
Spektrumsanalyse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08010658  08010658  00020658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011138  08011138  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  08011138  08011138  00021138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011140  08011140  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011140  08011140  00021140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011144  08011144  00021144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08011148  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000400  08011548  00030400  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08011548  000307fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffb5  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f5  00000000  00000000  000503e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  000547e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00056318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298ac  00000000  00000000  00057c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d75  00000000  00000000  00081514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf14  00000000  00000000  000a5289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019219d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008680  00000000  00000000  001921f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000400 	.word	0x20000400
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010640 	.word	0x08010640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000404 	.word	0x20000404
 80001cc:	08010640 	.word	0x08010640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	777b      	strb	r3, [r7, #29]
 8000f5e:	e01b      	b.n	8000f98 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	77bb      	strb	r3, [r7, #30]
 8000f64:	e012      	b.n	8000f8c <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000f66:	7fba      	ldrb	r2, [r7, #30]
 8000f68:	7f7b      	ldrb	r3, [r7, #29]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	1899      	adds	r1, r3, r2
 8000f74:	7fba      	ldrb	r2, [r7, #30]
 8000f76:	7f7b      	ldrb	r3, [r7, #29]
 8000f78:	7808      	ldrb	r0, [r1, #0]
 8000f7a:	4961      	ldr	r1, [pc, #388]	; (8001100 <AES_Encrypt+0x1b4>)
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	440a      	add	r2, r1
 8000f80:	4413      	add	r3, r2
 8000f82:	4602      	mov	r2, r0
 8000f84:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f86:	7fbb      	ldrb	r3, [r7, #30]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	77bb      	strb	r3, [r7, #30]
 8000f8c:	7fbb      	ldrb	r3, [r7, #30]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d9e9      	bls.n	8000f66 <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000f92:	7f7b      	ldrb	r3, [r7, #29]
 8000f94:	3301      	adds	r3, #1
 8000f96:	777b      	strb	r3, [r7, #29]
 8000f98:	7f7b      	ldrb	r3, [r7, #29]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d9e0      	bls.n	8000f60 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	77fb      	strb	r3, [r7, #31]
 8000fa2:	e00b      	b.n	8000fbc <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000fa4:	7ffb      	ldrb	r3, [r7, #31]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	441a      	add	r2, r3
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	3320      	adds	r3, #32
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	77fb      	strb	r3, [r7, #31]
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d9f0      	bls.n	8000fa4 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f89c 	bl	8001104 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000fcc:	2301      	movs	r3, #1
 8000fce:	773b      	strb	r3, [r7, #28]
 8000fd0:	e038      	b.n	8001044 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	777b      	strb	r3, [r7, #29]
 8000fd6:	e01f      	b.n	8001018 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	77bb      	strb	r3, [r7, #30]
 8000fdc:	e016      	b.n	800100c <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000fde:	7fba      	ldrb	r2, [r7, #30]
 8000fe0:	7f7b      	ldrb	r3, [r7, #29]
 8000fe2:	4947      	ldr	r1, [pc, #284]	; (8001100 <AES_Encrypt+0x1b4>)
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	440a      	add	r2, r1
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	7fbd      	ldrb	r5, [r7, #30]
 8000fee:	7f7c      	ldrb	r4, [r7, #29]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f8bf 	bl	8001174 <AES_Sub_Byte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <AES_Encrypt+0x1b4>)
 8000ffc:	00ab      	lsls	r3, r5, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	4423      	add	r3, r4
 8001002:	460a      	mov	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8001006:	7fbb      	ldrb	r3, [r7, #30]
 8001008:	3301      	adds	r3, #1
 800100a:	77bb      	strb	r3, [r7, #30]
 800100c:	7fbb      	ldrb	r3, [r7, #30]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d9e5      	bls.n	8000fde <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8001012:	7f7b      	ldrb	r3, [r7, #29]
 8001014:	3301      	adds	r3, #1
 8001016:	777b      	strb	r3, [r7, #29]
 8001018:	7f7b      	ldrb	r3, [r7, #29]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d9dc      	bls.n	8000fd8 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800101e:	f000 f8c7 	bl	80011b0 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8001022:	f000 f909 	bl	8001238 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	7f3b      	ldrb	r3, [r7, #28]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f998 	bl	8001364 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f863 	bl	8001104 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800103e:	7f3b      	ldrb	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	773b      	strb	r3, [r7, #28]
 8001044:	7f3b      	ldrb	r3, [r7, #28]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9c3      	bls.n	8000fd2 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800104a:	2300      	movs	r3, #0
 800104c:	777b      	strb	r3, [r7, #29]
 800104e:	e01f      	b.n	8001090 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8001050:	2300      	movs	r3, #0
 8001052:	77bb      	strb	r3, [r7, #30]
 8001054:	e016      	b.n	8001084 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8001056:	7fba      	ldrb	r2, [r7, #30]
 8001058:	7f7b      	ldrb	r3, [r7, #29]
 800105a:	4929      	ldr	r1, [pc, #164]	; (8001100 <AES_Encrypt+0x1b4>)
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	440a      	add	r2, r1
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	7fbd      	ldrb	r5, [r7, #30]
 8001066:	7f7c      	ldrb	r4, [r7, #29]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f883 	bl	8001174 <AES_Sub_Byte>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <AES_Encrypt+0x1b4>)
 8001074:	00ab      	lsls	r3, r5, #2
 8001076:	4413      	add	r3, r2
 8001078:	4423      	add	r3, r4
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800107e:	7fbb      	ldrb	r3, [r7, #30]
 8001080:	3301      	adds	r3, #1
 8001082:	77bb      	strb	r3, [r7, #30]
 8001084:	7fbb      	ldrb	r3, [r7, #30]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d9e5      	bls.n	8001056 <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800108a:	7f7b      	ldrb	r3, [r7, #29]
 800108c:	3301      	adds	r3, #1
 800108e:	777b      	strb	r3, [r7, #29]
 8001090:	7f7b      	ldrb	r3, [r7, #29]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d9dc      	bls.n	8001050 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8001096:	f000 f88b 	bl	80011b0 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	7f3b      	ldrb	r3, [r7, #28]
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f95e 	bl	8001364 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f829 	bl	8001104 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
 80010b6:	e01a      	b.n	80010ee <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	77bb      	strb	r3, [r7, #30]
 80010bc:	e011      	b.n	80010e2 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80010be:	7fb9      	ldrb	r1, [r7, #30]
 80010c0:	7f7a      	ldrb	r2, [r7, #29]
 80010c2:	7fb8      	ldrb	r0, [r7, #30]
 80010c4:	7f7b      	ldrb	r3, [r7, #29]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4403      	add	r3, r0
 80010ca:	4618      	mov	r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4403      	add	r3, r0
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <AES_Encrypt+0x1b4>)
 80010d2:	0089      	lsls	r1, r1, #2
 80010d4:	4401      	add	r1, r0
 80010d6:	440a      	add	r2, r1
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80010dc:	7fbb      	ldrb	r3, [r7, #30]
 80010de:	3301      	adds	r3, #1
 80010e0:	77bb      	strb	r3, [r7, #30]
 80010e2:	7fbb      	ldrb	r3, [r7, #30]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d9ea      	bls.n	80010be <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 80010e8:	7f7b      	ldrb	r3, [r7, #29]
 80010ea:	3301      	adds	r3, #1
 80010ec:	777b      	strb	r3, [r7, #29]
 80010ee:	7f7b      	ldrb	r3, [r7, #29]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d9e1      	bls.n	80010b8 <AES_Encrypt+0x16c>
		}
	}

}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000041c 	.word	0x2000041c

08001104 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800110c:	2300      	movs	r3, #0
 800110e:	73bb      	strb	r3, [r7, #14]
 8001110:	e024      	b.n	800115c <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e01b      	b.n	8001150 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	4914      	ldr	r1, [pc, #80]	; (8001170 <AES_Add_Round_Key+0x6c>)
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	440a      	add	r2, r1
 8001122:	4413      	add	r3, r2
 8001124:	7818      	ldrb	r0, [r3, #0]
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	7819      	ldrb	r1, [r3, #0]
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	4041      	eors	r1, r0
 800113c:	b2c8      	uxtb	r0, r1
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <AES_Add_Round_Key+0x6c>)
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	440a      	add	r2, r1
 8001144:	4413      	add	r3, r2
 8001146:	4602      	mov	r2, r0
 8001148:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d9e0      	bls.n	8001118 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	3301      	adds	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d9d7      	bls.n	8001112 <AES_Add_Round_Key+0xe>
		}
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	2000041c 	.word	0x2000041c

08001174 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	4906      	ldr	r1, [pc, #24]	; (80011ac <AES_Sub_Byte+0x38>)
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	440a      	add	r2, r1
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800119c:	7b7b      	ldrb	r3, [r7, #13]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000

080011b0 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <AES_Shift_Rows+0x84>)
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <AES_Shift_Rows+0x84>)
 80011be:	795a      	ldrb	r2, [r3, #5]
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <AES_Shift_Rows+0x84>)
 80011c2:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <AES_Shift_Rows+0x84>)
 80011c6:	799a      	ldrb	r2, [r3, #6]
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <AES_Shift_Rows+0x84>)
 80011ca:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <AES_Shift_Rows+0x84>)
 80011ce:	79da      	ldrb	r2, [r3, #7]
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <AES_Shift_Rows+0x84>)
 80011d2:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <AES_Shift_Rows+0x84>)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <AES_Shift_Rows+0x84>)
 80011dc:	7a1b      	ldrb	r3, [r3, #8]
 80011de:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <AES_Shift_Rows+0x84>)
 80011e2:	7a9a      	ldrb	r2, [r3, #10]
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <AES_Shift_Rows+0x84>)
 80011e6:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <AES_Shift_Rows+0x84>)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <AES_Shift_Rows+0x84>)
 80011f0:	7a5b      	ldrb	r3, [r3, #9]
 80011f2:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <AES_Shift_Rows+0x84>)
 80011f6:	7ada      	ldrb	r2, [r3, #11]
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <AES_Shift_Rows+0x84>)
 80011fa:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <AES_Shift_Rows+0x84>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <AES_Shift_Rows+0x84>)
 8001204:	7bdb      	ldrb	r3, [r3, #15]
 8001206:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <AES_Shift_Rows+0x84>)
 800120a:	7b9a      	ldrb	r2, [r3, #14]
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <AES_Shift_Rows+0x84>)
 800120e:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <AES_Shift_Rows+0x84>)
 8001212:	7b5a      	ldrb	r2, [r3, #13]
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <AES_Shift_Rows+0x84>)
 8001216:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <AES_Shift_Rows+0x84>)
 800121a:	7b1a      	ldrb	r2, [r3, #12]
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <AES_Shift_Rows+0x84>)
 800121e:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <AES_Shift_Rows+0x84>)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	7313      	strb	r3, [r2, #12]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000041c 	.word	0x2000041c

08001238 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800123e:	2300      	movs	r3, #0
 8001240:	73bb      	strb	r3, [r7, #14]
 8001242:	e082      	b.n	800134a <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e033      	b.n	80012b2 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800124a:	7bf9      	ldrb	r1, [r7, #15]
 800124c:	7bba      	ldrb	r2, [r7, #14]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4843      	ldr	r0, [pc, #268]	; (8001360 <AES_Mix_Collums+0x128>)
 8001252:	0089      	lsls	r1, r1, #2
 8001254:	4401      	add	r1, r0
 8001256:	440a      	add	r2, r1
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	3310      	adds	r3, #16
 800125c:	443b      	add	r3, r7
 800125e:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	493e      	ldr	r1, [pc, #248]	; (8001360 <AES_Mix_Collums+0x128>)
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	440a      	add	r2, r1
 800126c:	4413      	add	r3, r2
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	0052      	lsls	r2, r2, #1
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	3310      	adds	r3, #16
 8001278:	443b      	add	r3, r7
 800127a:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	4937      	ldr	r1, [pc, #220]	; (8001360 <AES_Mix_Collums+0x128>)
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	440a      	add	r2, r1
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0c      	bge.n	80012ac <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3310      	adds	r3, #16
 8001296:	443b      	add	r3, r7
 8001298:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	f082 021b 	eor.w	r2, r2, #27
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	3310      	adds	r3, #16
 80012a6:	443b      	add	r3, r7
 80012a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d9c8      	bls.n	800124a <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80012b8:	793a      	ldrb	r2, [r7, #4]
 80012ba:	7a7b      	ldrb	r3, [r7, #9]
 80012bc:	4053      	eors	r3, r2
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4053      	eors	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	4053      	eors	r3, r2
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	7afa      	ldrb	r2, [r7, #11]
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	404a      	eors	r2, r1
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <AES_Mix_Collums+0x128>)
 80012d6:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80012d8:	7a3a      	ldrb	r2, [r7, #8]
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	4053      	eors	r3, r2
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	7abb      	ldrb	r3, [r7, #10]
 80012e2:	4053      	eors	r3, r2
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	4053      	eors	r3, r2
 80012ea:	b2d9      	uxtb	r1, r3
 80012ec:	7afa      	ldrb	r2, [r7, #11]
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	404a      	eors	r2, r1
 80012f2:	b2d1      	uxtb	r1, r2
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <AES_Mix_Collums+0x128>)
 80012f6:	4413      	add	r3, r2
 80012f8:	460a      	mov	r2, r1
 80012fa:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 80012fc:	7a3a      	ldrb	r2, [r7, #8]
 80012fe:	7a7b      	ldrb	r3, [r7, #9]
 8001300:	4053      	eors	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	4053      	eors	r3, r2
 8001308:	b2da      	uxtb	r2, r3
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	4053      	eors	r3, r2
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	404a      	eors	r2, r1
 8001316:	b2d1      	uxtb	r1, r2
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <AES_Mix_Collums+0x128>)
 800131a:	4413      	add	r3, r2
 800131c:	460a      	mov	r2, r1
 800131e:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8001320:	7a3a      	ldrb	r2, [r7, #8]
 8001322:	793b      	ldrb	r3, [r7, #4]
 8001324:	4053      	eors	r3, r2
 8001326:	b2da      	uxtb	r2, r3
 8001328:	7a7b      	ldrb	r3, [r7, #9]
 800132a:	4053      	eors	r3, r2
 800132c:	b2da      	uxtb	r2, r3
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	4053      	eors	r3, r2
 8001332:	b2d9      	uxtb	r1, r3
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	404a      	eors	r2, r1
 800133a:	b2d1      	uxtb	r1, r2
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <AES_Mix_Collums+0x128>)
 800133e:	4413      	add	r3, r2
 8001340:	460a      	mov	r2, r1
 8001342:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	3301      	adds	r3, #1
 8001348:	73bb      	strb	r3, [r7, #14]
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	2b03      	cmp	r3, #3
 800134e:	f67f af79 	bls.w	8001244 <AES_Mix_Collums+0xc>
	}
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	2000041c 	.word	0x2000041c

08001364 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
 8001374:	e00c      	b.n	8001390 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	330c      	adds	r3, #12
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	441a      	add	r2, r3
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	3318      	adds	r3, #24
 8001384:	443b      	add	r3, r7
 8001386:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	3301      	adds	r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d9ef      	bls.n	8001376 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800139a:	7b7b      	ldrb	r3, [r7, #13]
 800139c:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80013a6:	7d3b      	ldrb	r3, [r7, #20]
 80013a8:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
 80013ae:	e012      	b.n	80013d6 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	3318      	adds	r3, #24
 80013b4:	443b      	add	r3, r7
 80013b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013ba:	7dfc      	ldrb	r4, [r7, #23]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fed9 	bl	8001174 <AES_Sub_Byte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	f104 0318 	add.w	r3, r4, #24
 80013ca:	443b      	add	r3, r7
 80013cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	3301      	adds	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d9e9      	bls.n	80013b0 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 80013dc:	2301      	movs	r3, #1
 80013de:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 80013e0:	e010      	b.n	8001404 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013e8:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d103      	bne.n	80013fe <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	f083 031b 	eor.w	r3, r3, #27
 80013fc:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	3b01      	subs	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d1eb      	bne.n	80013e2 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800140a:	7b3a      	ldrb	r2, [r7, #12]
 800140c:	7d7b      	ldrb	r3, [r7, #21]
 800140e:	4053      	eors	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
 8001418:	e02f      	b.n	800147a <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800141a:	2300      	movs	r3, #0
 800141c:	75bb      	strb	r3, [r7, #22]
 800141e:	e026      	b.n	800146e <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8001420:	7dba      	ldrb	r2, [r7, #22]
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	7dbb      	ldrb	r3, [r7, #22]
 8001432:	3318      	adds	r3, #24
 8001434:	443b      	add	r3, r7
 8001436:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800143a:	7db8      	ldrb	r0, [r7, #22]
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4403      	add	r3, r0
 8001448:	404a      	eors	r2, r1
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800144e:	7dba      	ldrb	r2, [r7, #22]
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	461a      	mov	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	441a      	add	r2, r3
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	3318      	adds	r3, #24
 8001462:	443b      	add	r3, r7
 8001464:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8001468:	7dbb      	ldrb	r3, [r7, #22]
 800146a:	3301      	adds	r3, #1
 800146c:	75bb      	strb	r3, [r7, #22]
 800146e:	7dbb      	ldrb	r3, [r7, #22]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d9d5      	bls.n	8001420 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	3301      	adds	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d9cc      	bls.n	800141a <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
	...

0800148c <Encrypt_Payload>:
extern unsigned char NwkSkey[16];
extern unsigned char AppSkey[16];
extern unsigned char DevAddr[4];

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	72fb      	strb	r3, [r7, #11]
 800149c:	4613      	mov	r3, r2
 800149e:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80014c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80014cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014d0:	3301      	adds	r3, #1
 80014d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014dc:	e07e      	b.n	80015dc <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 80014de:	2301      	movs	r3, #1
 80014e0:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 80014f2:	7abb      	ldrb	r3, [r7, #10]
 80014f4:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <Encrypt_Payload+0x168>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <Encrypt_Payload+0x168>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <Encrypt_Payload+0x168>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <Encrypt_Payload+0x168>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b2db      	uxtb	r3, r3
 800151a:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 800152e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A,AppSkey);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	492f      	ldr	r1, [pc, #188]	; (80015f8 <Encrypt_Payload+0x16c>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd05 	bl	8000f4c <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8001542:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001546:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800154a:	429a      	cmp	r2, r3
 800154c:	d01c      	beq.n	8001588 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001554:	e013      	b.n	800157e <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155e:	3328      	adds	r3, #40	; 0x28
 8001560:	443b      	add	r3, r7
 8001562:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001566:	4053      	eors	r3, r2
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	701a      	strb	r2, [r3, #0]
				Data++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8001574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001578:	3301      	adds	r3, #1
 800157a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800157e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d9e7      	bls.n	8001556 <Encrypt_Payload+0xca>
 8001586:	e024      	b.n	80015d2 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 8001588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8001590:	2310      	movs	r3, #16
 8001592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800159c:	e013      	b.n	80015c6 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a6:	3328      	adds	r3, #40	; 0x28
 80015a8:	443b      	add	r3, r7
 80015aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80015ae:	4053      	eors	r3, r2
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	701a      	strb	r2, [r3, #0]
				Data++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d3e5      	bcc.n	800159e <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 80015d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d6:	3301      	adds	r3, #1
 80015d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f67f af7a 	bls.w	80014de <Encrypt_Payload+0x52>
			}
		}
	}
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000044c 	.word	0x2000044c
 80015f8:	2000043c 	.word	0x2000043c

080015fc <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b09b      	sub	sp, #108	; 0x6c
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800160c:	4bb8      	ldr	r3, [pc, #736]	; (80018f0 <Calculate_MIC+0x2f4>)
 800160e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8001618:	4bb5      	ldr	r3, [pc, #724]	; (80018f0 <Calculate_MIC+0x2f4>)
 800161a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800161e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8001624:	4bb2      	ldr	r3, [pc, #712]	; (80018f0 <Calculate_MIC+0x2f4>)
 8001626:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8001630:	4baf      	ldr	r3, [pc, #700]	; (80018f0 <Calculate_MIC+0x2f4>)
 8001632:	f107 0414 	add.w	r4, r7, #20
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8001648:	2301      	movs	r3, #1
 800164a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800164e:	2349      	movs	r3, #73	; 0x49
 8001650:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800166c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001670:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8001674:	4b9f      	ldr	r3, [pc, #636]	; (80018f4 <Calculate_MIC+0x2f8>)
 8001676:	78db      	ldrb	r3, [r3, #3]
 8001678:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800167c:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <Calculate_MIC+0x2f8>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8001684:	4b9b      	ldr	r3, [pc, #620]	; (80018f4 <Calculate_MIC+0x2f8>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 800168c:	4b99      	ldr	r3, [pc, #612]	; (80018f4 <Calculate_MIC+0x2f8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 80016d0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <Calculate_MIC+0xe6>
	{
		Number_of_Blocks++;
 80016d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016dc:	3301      	adds	r3, #1
 80016de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2);
 80016e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f905 	bl	80018fc <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B,NwkSkey);
 80016f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f6:	4980      	ldr	r1, [pc, #512]	; (80018f8 <Calculate_MIC+0x2fc>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc27 	bl	8000f4c <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001704:	e010      	b.n	8001728 <Calculate_MIC+0x12c>
	{
		Old_Data[i] = Block_B[i];
 8001706:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800170a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800170e:	3268      	adds	r2, #104	; 0x68
 8001710:	443a      	add	r2, r7
 8001712:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001716:	3368      	adds	r3, #104	; 0x68
 8001718:	443b      	add	r3, r7
 800171a:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800171e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001722:	3301      	adds	r3, #1
 8001724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001728:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d9ea      	bls.n	8001706 <Calculate_MIC+0x10a>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8001730:	e043      	b.n	80017ba <Calculate_MIC+0x1be>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001738:	e00f      	b.n	800175a <Calculate_MIC+0x15e>
		{
			New_Data[i] = *Data;
 800173a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	3368      	adds	r3, #104	; 0x68
 8001744:	443b      	add	r3, r7
 8001746:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001750:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001754:	3301      	adds	r3, #1
 8001756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800175a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800175e:	2b0f      	cmp	r3, #15
 8001760:	d9eb      	bls.n	800173a <Calculate_MIC+0x13e>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001762:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f94f 	bl	8001a10 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data,NwkSkey);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4960      	ldr	r1, [pc, #384]	; (80018f8 <Calculate_MIC+0x2fc>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fbe7 	bl	8000f4c <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001784:	e010      	b.n	80017a8 <Calculate_MIC+0x1ac>
		{
			Old_Data[i] = New_Data[i];
 8001786:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800178a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800178e:	3268      	adds	r2, #104	; 0x68
 8001790:	443a      	add	r2, r7
 8001792:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8001796:	3368      	adds	r3, #104	; 0x68
 8001798:	443b      	add	r3, r7
 800179a:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800179e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017a2:	3301      	adds	r3, #1
 80017a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d9ea      	bls.n	8001786 <Calculate_MIC+0x18a>
		}

		//Raise Block counter
		Block_Counter++;
 80017b0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017b4:	3301      	adds	r3, #1
 80017b6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 80017ba:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80017be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3b5      	bcc.n	8001732 <Calculate_MIC+0x136>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 80017c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d12e      	bne.n	800182c <Calculate_MIC+0x230>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017d4:	e00f      	b.n	80017f6 <Calculate_MIC+0x1fa>
		{
			New_Data[i] = *Data;
 80017d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	3368      	adds	r3, #104	; 0x68
 80017e0:	443b      	add	r3, r7
 80017e2:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 80017ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d9eb      	bls.n	80017d6 <Calculate_MIC+0x1da>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 80017fe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f901 	bl	8001a10 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800180e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f8f9 	bl	8001a10 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4935      	ldr	r1, [pc, #212]	; (80018f8 <Calculate_MIC+0x2fc>)
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fb91 	bl	8000f4c <AES_Encrypt>
 800182a:	e04d      	b.n	80018c8 <Calculate_MIC+0x2cc>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001832:	e02f      	b.n	8001894 <Calculate_MIC+0x298>
		{
			if(i < Incomplete_Block_Size)
 8001834:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001838:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800183c:	429a      	cmp	r2, r3
 800183e:	d20a      	bcs.n	8001856 <Calculate_MIC+0x25a>
			{
				New_Data[i] = *Data;
 8001840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	3368      	adds	r3, #104	; 0x68
 800184a:	443b      	add	r3, r7
 800184c:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8001856:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800185a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800185e:	429a      	cmp	r2, r3
 8001860:	d106      	bne.n	8001870 <Calculate_MIC+0x274>
			{
				New_Data[i] = 0x80;
 8001862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001866:	3368      	adds	r3, #104	; 0x68
 8001868:	443b      	add	r3, r7
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8001870:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001874:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001878:	429a      	cmp	r2, r3
 800187a:	d906      	bls.n	800188a <Calculate_MIC+0x28e>
			{
				New_Data[i] = 0x00;
 800187c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001880:	3368      	adds	r3, #104	; 0x68
 8001882:	443b      	add	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800188a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800188e:	3301      	adds	r3, #1
 8001890:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001894:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d9cb      	bls.n	8001834 <Calculate_MIC+0x238>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800189c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f8b2 	bl	8001a10 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 80018ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f8aa 	bl	8001a10 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	490d      	ldr	r1, [pc, #52]	; (80018f8 <Calculate_MIC+0x2fc>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb42 	bl	8000f4c <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 80018c8:	7d3a      	ldrb	r2, [r7, #20]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	7d7a      	ldrb	r2, [r7, #21]
 80018d4:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3302      	adds	r3, #2
 80018da:	7dba      	ldrb	r2, [r7, #22]
 80018dc:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3303      	adds	r3, #3
 80018e2:	7dfa      	ldrb	r2, [r7, #23]
 80018e4:	701a      	strb	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	376c      	adds	r7, #108	; 0x6c
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08010658 	.word	0x08010658
 80018f4:	2000044c 	.word	0x2000044c
 80018f8:	2000042c 	.word	0x2000042c

080018fc <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1,NwkSkey);
 8001906:	4926      	ldr	r1, [pc, #152]	; (80019a0 <Generate_Keys+0xa4>)
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fb1f 	bl	8000f4c <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	da02      	bge.n	800191e <Generate_Keys+0x22>
	{
		MSB_Key = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	73bb      	strb	r3, [r7, #14]
 800191c:	e001      	b.n	8001922 <Generate_Keys+0x26>
	}
	else
	{
		MSB_Key = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f83e 	bl	80019a4 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d109      	bne.n	8001942 <Generate_Keys+0x46>
	{
		K1[15] = K1[15] ^ 0x87;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	330f      	adds	r3, #15
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	320f      	adds	r2, #15
 8001938:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800193c:	43db      	mvns	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e00a      	b.n	800195e <Generate_Keys+0x62>
	{
		K2[i] = K1[i];
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	441a      	add	r2, r3
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	440b      	add	r3, r1
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3301      	adds	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d9f1      	bls.n	8001948 <Generate_Keys+0x4c>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b25b      	sxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	da02      	bge.n	8001974 <Generate_Keys+0x78>
	{
		MSB_Key = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	73bb      	strb	r3, [r7, #14]
 8001972:	e001      	b.n	8001978 <Generate_Keys+0x7c>
	}
	else
	{
		MSB_Key = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f000 f813 	bl	80019a4 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d109      	bne.n	8001998 <Generate_Keys+0x9c>
	{
		K2[15] = K2[15] ^ 0x87;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	330f      	adds	r3, #15
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	320f      	adds	r2, #15
 800198e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8001992:	43db      	mvns	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	7013      	strb	r3, [r2, #0]
	}
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000042c 	.word	0x2000042c

080019a4 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e022      	b.n	80019fc <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b0e      	cmp	r3, #14
 80019ba:	d80d      	bhi.n	80019d8 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da02      	bge.n	80019d2 <Shift_Left+0x2e>
			{
				Overflow = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73bb      	strb	r3, [r7, #14]
 80019d0:	e004      	b.n	80019dc <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73bb      	strb	r3, [r7, #14]
 80019d6:	e001      	b.n	80019dc <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	7bba      	ldrb	r2, [r7, #14]
 80019f0:	440a      	add	r2, r1
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	d9d9      	bls.n	80019b6 <Shift_Left+0x12>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e010      	b.n	8001a42 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	7819      	ldrb	r1, [r3, #0]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4403      	add	r3, r0
 8001a36:	404a      	eors	r2, r1
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d9eb      	bls.n	8001a20 <XOR+0x10>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <rfm95_read>:
unsigned char NwkSkey[16];
unsigned char AppSkey[16];
unsigned char DevAddr[4];

static bool rfm95_read(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t *buffer) {
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6858      	ldr	r0, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	891b      	ldrh	r3, [r3, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f004 f828 	bl	8005ac4 <HAL_GPIO_WritePin>

	//uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
	uint8_t transmit_buffer = (uint8_t) reg;
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 0117 	add.w	r1, r7, #23
 8001a80:	230a      	movs	r3, #10
 8001a82:	2201      	movs	r2, #1
 8001a84:	f006 fc43 	bl	800830e <HAL_SPI_Transmit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <rfm95_read+0x3c>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e014      	b.n	8001abc <rfm95_read+0x66>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	230a      	movs	r3, #10
 8001a98:	2201      	movs	r2, #1
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f006 fda5 	bl	80085ea <HAL_SPI_Receive>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <rfm95_read+0x54>
			!= HAL_OK) {
		return false;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e008      	b.n	8001abc <rfm95_read+0x66>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6858      	ldr	r0, [r3, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	891b      	ldrh	r3, [r3, #8]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f004 f805 	bl	8005ac4 <HAL_GPIO_WritePin>

	return true;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <rfm95_write>:

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6858      	ldr	r0, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	891b      	ldrh	r3, [r3, #8]
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f003 fff0 	bl	8005ac4 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	733b      	strb	r3, [r7, #12]
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	f107 010c 	add.w	r1, r7, #12
 8001afa:	230a      	movs	r3, #10
 8001afc:	2202      	movs	r2, #2
 8001afe:	f006 fc06 	bl	800830e <HAL_SPI_Transmit>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e008      	b.n	8001b1e <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6858      	ldr	r0, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	891b      	ldrh	r3, [r3, #8]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4619      	mov	r1, r3
 8001b18:	f003 ffd4 	bl	8005ac4 <HAL_GPIO_WritePin>

	return true;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <rfm95_reset>:

static void rfm95_reset(rfm95_handle_t *handle) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68d8      	ldr	r0, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	8a1b      	ldrh	r3, [r3, #16]
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f003 ffc3 	bl	8005ac4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f003 fcc8 	bl	80054d4 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68d8      	ldr	r0, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8a1b      	ldrh	r3, [r3, #16]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f003 ffb8 	bl	8005ac4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001b54:	2005      	movs	r0, #5
 8001b56:	f003 fcbd 	bl	80054d4 <HAL_Delay>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b76:	d005      	beq.n	8001b84 <rfm95_init+0x20>
 8001b78:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <rfm95_init+0x214>)
 8001b7a:	4a80      	ldr	r2, [pc, #512]	; (8001d7c <rfm95_init+0x218>)
 8001b7c:	2181      	movs	r1, #129	; 0x81
 8001b7e:	4880      	ldr	r0, [pc, #512]	; (8001d80 <rfm95_init+0x21c>)
 8001b80:	f00b fcde 	bl	800d540 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <rfm95_init+0x36>
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <rfm95_init+0x220>)
 8001b90:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <rfm95_init+0x218>)
 8001b92:	2182      	movs	r1, #130	; 0x82
 8001b94:	487a      	ldr	r0, [pc, #488]	; (8001d80 <rfm95_init+0x21c>)
 8001b96:	f00b fcd3 	bl	800d540 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ba4:	d005      	beq.n	8001bb2 <rfm95_init+0x4e>
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <rfm95_init+0x224>)
 8001ba8:	4a74      	ldr	r2, [pc, #464]	; (8001d7c <rfm95_init+0x218>)
 8001baa:	2183      	movs	r1, #131	; 0x83
 8001bac:	4874      	ldr	r0, [pc, #464]	; (8001d80 <rfm95_init+0x21c>)
 8001bae:	f00b fcc7 	bl	800d540 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <rfm95_init+0x64>
 8001bbc:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <rfm95_init+0x228>)
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <rfm95_init+0x218>)
 8001bc0:	2184      	movs	r1, #132	; 0x84
 8001bc2:	486f      	ldr	r0, [pc, #444]	; (8001d80 <rfm95_init+0x21c>)
 8001bc4:	f00b fcbc 	bl	800d540 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <rfm95_init+0x7a>
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <rfm95_init+0x22c>)
 8001bd4:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <rfm95_init+0x218>)
 8001bd6:	2185      	movs	r1, #133	; 0x85
 8001bd8:	4869      	ldr	r0, [pc, #420]	; (8001d80 <rfm95_init+0x21c>)
 8001bda:	f00b fcb1 	bl	800d540 <__assert_func>

	rfm95_reset(handle);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa1 	bl	8001b26 <rfm95_reset>

	if (handle->reload_frame_counter != NULL) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <rfm95_init+0x9c>
		handle->reload_frame_counter(&handle->tx_frame_count,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	f102 0052 	add.w	r0, r2, #82	; 0x52
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	3250      	adds	r2, #80	; 0x50
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4798      	blx	r3
 8001bfe:	e007      	b.n	8001c10 <rfm95_init+0xac>
				&handle->rx_frame_count);
	} else {
		handle->tx_frame_count = 0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		handle->rx_frame_count = 0;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	// Check for correct version.
	uint8_t version;
	if (!rfm95_read(handle, RFM95_REGISTER_VERSION, &version))
 8001c10:	f107 030f 	add.w	r3, r7, #15
 8001c14:	461a      	mov	r2, r3
 8001c16:	2142      	movs	r1, #66	; 0x42
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff1c 	bl	8001a56 <rfm95_read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <rfm95_init+0xca>
		return false;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e0a0      	b.n	8001d70 <rfm95_init+0x20c>
	if (version != RFM9x_VER)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d001      	beq.n	8001c38 <rfm95_init+0xd4>
		return false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e09b      	b.n	8001d70 <rfm95_init+0x20c>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff41 	bl	8001ac4 <rfm95_write>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f083 0301 	eor.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <rfm95_init+0xee>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e08e      	b.n	8001d70 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	2101      	movs	r1, #1
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff34 	bl	8001ac4 <rfm95_write>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <rfm95_init+0x108>
	RFM95_REGISTER_OP_MODE_LORA))
		return false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e081      	b.n	8001d70 <rfm95_init+0x20c>

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8001c6c:	2111      	movs	r1, #17
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f890 	bl	8001d94 <rfm95_set_power>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <rfm95_init+0x120>
		return false;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e075      	b.n	8001d70 <rfm95_init+0x20c>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 37))
 8001c84:	2225      	movs	r2, #37	; 0x25
 8001c86:	211f      	movs	r1, #31
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff1b 	bl	8001ac4 <rfm95_write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <rfm95_init+0x13a>
		return false;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e068      	b.n	8001d70 <rfm95_init+0x20c>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff0e 	bl	8001ac4 <rfm95_write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f083 0301 	eor.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <rfm95_init+0x154>
		return false;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e05b      	b.n	8001d70 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001cb8:	2208      	movs	r2, #8
 8001cba:	2121      	movs	r1, #33	; 0x21
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff01 	bl	8001ac4 <rfm95_write>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <rfm95_init+0x16e>
		return false;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e04e      	b.n	8001d70 <rfm95_init+0x20c>

	// Turn on low data rate optimisation (for symbol lengths > 16ms) and automatic AGC
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3,
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	2126      	movs	r1, #38	; 0x26
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fef4 	bl	8001ac4 <rfm95_write>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <rfm95_init+0x188>
	RFM95_REGISTER_MODEM_CONFIG_3_LDR_OPTIM_AGC_AUTO_ON))
		return false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e041      	b.n	8001d70 <rfm95_init+0x20c>

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001cec:	2234      	movs	r2, #52	; 0x34
 8001cee:	2139      	movs	r1, #57	; 0x39
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fee7 	bl	8001ac4 <rfm95_write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <rfm95_init+0x1a2>
		return false;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e034      	b.n	8001d70 <rfm95_init+0x20c>

	// Set IQ inversion.
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_1,
 8001d06:	2227      	movs	r2, #39	; 0x27
 8001d08:	2133      	movs	r1, #51	; 0x33
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff feda 	bl	8001ac4 <rfm95_write>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f083 0301 	eor.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <rfm95_init+0x1bc>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e027      	b.n	8001d70 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_2,
 8001d20:	221d      	movs	r2, #29
 8001d22:	213b      	movs	r1, #59	; 0x3b
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fecd 	bl	8001ac4 <rfm95_write>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <rfm95_init+0x1d6>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e01a      	b.n	8001d70 <rfm95_init+0x20c>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	210e      	movs	r1, #14
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fec0 	bl	8001ac4 <rfm95_write>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f083 0301 	eor.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <rfm95_init+0x1f0>
		return false;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e00d      	b.n	8001d70 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001d54:	2200      	movs	r2, #0
 8001d56:	210f      	movs	r1, #15
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff feb3 	bl	8001ac4 <rfm95_write>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f083 0301 	eor.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <rfm95_init+0x20a>
		return false;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <rfm95_init+0x20c>

	return true;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	08010668 	.word	0x08010668
 8001d7c:	08010bdc 	.word	0x08010bdc
 8001d80:	0801069c 	.word	0x0801069c
 8001d84:	080106c0 	.word	0x080106c0
 8001d88:	080106fc 	.word	0x080106fc
 8001d8c:	08010734 	.word	0x08010734
 8001d90:	08010770 	.word	0x08010770

08001d94 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	dd03      	ble.n	8001db0 <rfm95_set_power+0x1c>
 8001da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dac:	2b11      	cmp	r3, #17
 8001dae:	dd09      	ble.n	8001dc4 <rfm95_set_power+0x30>
 8001db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db4:	2b14      	cmp	r3, #20
 8001db6:	d005      	beq.n	8001dc4 <rfm95_set_power+0x30>
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <rfm95_set_power+0xd8>)
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <rfm95_set_power+0xdc>)
 8001dbc:	21c9      	movs	r1, #201	; 0xc9
 8001dbe:	482d      	ldr	r0, [pc, #180]	; (8001e74 <rfm95_set_power+0xe0>)
 8001dc0:	f00b fbbe 	bl	800d540 <__assert_func>

	rfm95_register_pa_config_t pa_config = { 0 };
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	dd18      	ble.n	8001e06 <rfm95_set_power+0x72>
 8001dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd8:	2b11      	cmp	r3, #17
 8001dda:	dc14      	bgt.n	8001e06 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001ddc:	7b3b      	ldrb	r3, [r7, #12]
 8001dde:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001de2:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001de4:	7b3b      	ldrb	r3, [r7, #12]
 8001de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dea:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	3b02      	subs	r3, #2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	f362 0303 	bfi	r3, r2, #0, #4
 8001dfe:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001e00:	2384      	movs	r3, #132	; 0x84
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e011      	b.n	8001e2a <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	2b14      	cmp	r3, #20
 8001e0c:	d10d      	bne.n	8001e2a <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001e0e:	7b3b      	ldrb	r3, [r7, #12]
 8001e10:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e14:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001e16:	7b3b      	ldrb	r3, [r7, #12]
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001e1e:	7b3b      	ldrb	r3, [r7, #12]
 8001e20:	f043 030f 	orr.w	r3, r3, #15
 8001e24:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001e26:	2387      	movs	r3, #135	; 0x87
 8001e28:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2109      	movs	r1, #9
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fe47 	bl	8001ac4 <rfm95_write>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <rfm95_set_power+0xb2>
		return false;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e00e      	b.n	8001e64 <rfm95_set_power+0xd0>
	if (!rfm95_write(handle, RFM95_REGISTER_PA_DAC, pa_dac_config))
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	214d      	movs	r1, #77	; 0x4d
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fe39 	bl	8001ac4 <rfm95_write>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <rfm95_set_power+0xce>
		return false;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <rfm95_set_power+0xd0>

	return true;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	080107a8 	.word	0x080107a8
 8001e70:	08010be8 	.word	0x08010be8
 8001e74:	0801069c 	.word	0x0801069c

08001e78 <rfm95_send_package>:

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	70fb      	strb	r3, [r7, #3]
	assert(channel < 9);
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d905      	bls.n	8001e98 <rfm95_send_package+0x20>
 8001e8c:	4b86      	ldr	r3, [pc, #536]	; (80020a8 <rfm95_send_package+0x230>)
 8001e8e:	4a87      	ldr	r2, [pc, #540]	; (80020ac <rfm95_send_package+0x234>)
 8001e90:	21e5      	movs	r1, #229	; 0xe5
 8001e92:	4887      	ldr	r0, [pc, #540]	; (80020b0 <rfm95_send_package+0x238>)
 8001e94:	f00b fb54 	bl	800d540 <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001e98:	2281      	movs	r2, #129	; 0x81
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fe11 	bl	8001ac4 <rfm95_write>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e0f5      	b.n	800209e <rfm95_send_package+0x226>

	tick_start = HAL_GetTick();
 8001eb2:	f003 fb03 	bl	80054bc <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8001eb8:	e00d      	b.n	8001ed6 <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 8001eba:	f003 faff 	bl	80054bc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d906      	bls.n	8001ed6 <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2101      	movs	r1, #1
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fdf9 	bl	8001ac4 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e0e3      	b.n	800209e <rfm95_send_package+0x226>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8c1b      	ldrh	r3, [r3, #32]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f003 fdd7 	bl	8005a94 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0e6      	beq.n	8001eba <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4971      	ldr	r1, [pc, #452]	; (80020b4 <rfm95_send_package+0x23c>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	2106      	movs	r1, #6
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff fde0 	bl	8001ac4 <rfm95_write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f083 0301 	eor.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e0c4      	b.n	800209e <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	4967      	ldr	r1, [pc, #412]	; (80020b4 <rfm95_send_package+0x23c>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3301      	adds	r3, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	2107      	movs	r1, #7
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fdcb 	bl	8001ac4 <rfm95_write>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e0af      	b.n	800209e <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	495c      	ldr	r1, [pc, #368]	; (80020b4 <rfm95_send_package+0x23c>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2108      	movs	r1, #8
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff fdb6 	bl	8001ac4 <rfm95_write>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e09a      	b.n	800209e <rfm95_send_package+0x226>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8001f68:	2272      	movs	r2, #114	; 0x72
 8001f6a:	211d      	movs	r1, #29
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fda9 	bl	8001ac4 <rfm95_write>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f083 0301 	eor.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <rfm95_send_package+0x10a>
		return false;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e08d      	b.n	800209e <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8001f82:	2274      	movs	r2, #116	; 0x74
 8001f84:	211e      	movs	r1, #30
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7ff fd9c 	bl	8001ac4 <rfm95_write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <rfm95_send_package+0x124>
		return false;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e080      	b.n	800209e <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	2126      	movs	r1, #38	; 0x26
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f7ff fd8f 	bl	8001ac4 <rfm95_write>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <rfm95_send_package+0x13e>
		return false;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e073      	b.n	800209e <rfm95_send_package+0x226>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2122      	movs	r1, #34	; 0x22
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fd80 	bl	8001ac4 <rfm95_write>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <rfm95_send_package+0x15c>
		return false;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e064      	b.n	800209e <rfm95_send_package+0x226>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	210d      	movs	r1, #13
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff fd73 	bl	8001ac4 <rfm95_write>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <rfm95_send_package+0x176>
		return false;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e057      	b.n	800209e <rfm95_send_package+0x226>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e00b      	b.n	800200c <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2100      	movs	r1, #0
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff fd5f 	bl	8001ac4 <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3ef      	bcc.n	8001ff4 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff fd53 	bl	8001ac4 <rfm95_write>
 800201e:	4603      	mov	r3, r0
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 800202a:	2300      	movs	r3, #0
 800202c:	e037      	b.n	800209e <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 800202e:	2283      	movs	r2, #131	; 0x83
 8002030:	2101      	movs	r1, #1
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff fd46 	bl	8001ac4 <rfm95_write>
 8002038:	4603      	mov	r3, r0
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8002044:	2300      	movs	r3, #0
 8002046:	e02a      	b.n	800209e <rfm95_send_package+0x226>

	tick_start = HAL_GetTick();
 8002048:	f003 fa38 	bl	80054bc <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 800204e:	e00d      	b.n	800206c <rfm95_send_package+0x1f4>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8002050:	f003 fa34 	bl	80054bc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b13      	cmp	r3, #19
 800205c:	d906      	bls.n	800206c <rfm95_send_package+0x1f4>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fd2e 	bl	8001ac4 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8002068:	2300      	movs	r3, #0
 800206a:	e018      	b.n	800209e <rfm95_send_package+0x226>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8b1b      	ldrh	r3, [r3, #24]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f003 fd0c 	bl	8005a94 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0e6      	beq.n	8002050 <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8002082:	2200      	movs	r2, #0
 8002084:	2101      	movs	r1, #1
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fd1c 	bl	8001ac4 <rfm95_write>
 800208c:	4603      	mov	r3, r0
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <rfm95_send_package+0x224>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <rfm95_send_package+0x226>

	return true;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	080107d4 	.word	0x080107d4
 80020ac:	08010bf8 	.word	0x08010bf8
 80020b0:	0801069c 	.word	0x0801069c
 80020b4:	08010bc0 	.word	0x08010bc0

080020b8 <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

	// Set TTN sync word 0x12.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x12))
 80020c0:	2212      	movs	r2, #18
 80020c2:	2139      	movs	r1, #57	; 0x39
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fcfd 	bl	8001ac4 <rfm95_write>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <rfm95_send_data_groundstation+0x22>
		return false;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e0d2      	b.n	8002280 <rfm95_send_data_groundstation+0x1c8>

	size_t length = LENGHT_GROUNDSTATION;
 80020da:	230b      	movs	r3, #11
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t ident = IDENT;
 80020de:	2309      	movs	r3, #9
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t rfm_data[LENGHT_GROUNDSTATION];
	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
 80020e4:	230b      	movs	r3, #11
 80020e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	unsigned long latitude = handle->latitude;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	623b      	str	r3, [r7, #32]
	unsigned long longitude = handle->longitude;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	61fb      	str	r3, [r7, #28]
	unsigned altitude = handle->altitude;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020fa:	61bb      	str	r3, [r7, #24]



	// set identifier to 1 for bits
	rfm_data[0] = ((ident << 4) & 0xf0);
 80020fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	b2db      	uxtb	r3, r3
 8002104:	733b      	strb	r3, [r7, #12]
	// set the next for bits with the orientation
	if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'E') {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800210c:	2b4e      	cmp	r3, #78	; 0x4e
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800211c:	2b45      	cmp	r3, #69	; 0x45
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4013      	ands	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <rfm95_send_data_groundstation+0x82>
		rfm_data[0] = (rfm_data[0] | 0x01);
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	733b      	strb	r3, [r7, #12]
 8002138:	e052      	b.n	80021e0 <rfm95_send_data_groundstation+0x128>
	} else if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'W') {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002140:	2b4e      	cmp	r3, #78	; 0x4e
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002150:	2b57      	cmp	r3, #87	; 0x57
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4013      	ands	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <rfm95_send_data_groundstation+0xb6>
		rfm_data[0] = (rfm_data[0] | 0x02);
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	733b      	strb	r3, [r7, #12]
 800216c:	e038      	b.n	80021e0 <rfm95_send_data_groundstation+0x128>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'E') {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002174:	2b53      	cmp	r3, #83	; 0x53
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002184:	2b45      	cmp	r3, #69	; 0x45
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4013      	ands	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <rfm95_send_data_groundstation+0xea>
		rfm_data[0] = (rfm_data[0] | 0x03);
 8002196:	7b3b      	ldrb	r3, [r7, #12]
 8002198:	f043 0303 	orr.w	r3, r3, #3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	733b      	strb	r3, [r7, #12]
 80021a0:	e01e      	b.n	80021e0 <rfm95_send_data_groundstation+0x128>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'W') {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80021a8:	2b53      	cmp	r3, #83	; 0x53
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021b8:	2b57      	cmp	r3, #87	; 0x57
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4013      	ands	r3, r2
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <rfm95_send_data_groundstation+0x11e>
		rfm_data[0] = (rfm_data[0] | 0x04);
 80021ca:	7b3b      	ldrb	r3, [r7, #12]
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	733b      	strb	r3, [r7, #12]
 80021d4:	e004      	b.n	80021e0 <rfm95_send_data_groundstation+0x128>
	} else {
		rfm_data[0] = (rfm_data[0] | 0x01);
 80021d6:	7b3b      	ldrb	r3, [r7, #12]
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	733b      	strb	r3, [r7, #12]
	}

	// set latitude
	for (int i = 0; i < 4; i++) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	e00e      	b.n	8002204 <rfm95_send_data_groundstation+0x14c>
		rfm_data[4 - i] = ((latitude >> (i * 8)) & 0xFF);
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	6a3a      	ldr	r2, [r7, #32]
 80021ec:	40da      	lsrs	r2, r3
 80021ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f0:	f1c3 0304 	rsb	r3, r3, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	3338      	adds	r3, #56	; 0x38
 80021f8:	443b      	add	r3, r7
 80021fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 4; i++) {
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	3301      	adds	r3, #1
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	2b03      	cmp	r3, #3
 8002208:	dded      	ble.n	80021e6 <rfm95_send_data_groundstation+0x12e>
	}
	for (int i = 0; i < 4; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
 800220e:	e00e      	b.n	800222e <rfm95_send_data_groundstation+0x176>
		rfm_data[8 - i] = ((longitude >> (i * 8)) & 0xFF);
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	40da      	lsrs	r2, r3
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	f1c3 0308 	rsb	r3, r3, #8
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	3338      	adds	r3, #56	; 0x38
 8002222:	443b      	add	r3, r7
 8002224:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 4; i++) {
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	3301      	adds	r3, #1
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2b03      	cmp	r3, #3
 8002232:	dded      	ble.n	8002210 <rfm95_send_data_groundstation+0x158>
	}

	for (int i = 0; i < 2; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002238:	e00e      	b.n	8002258 <rfm95_send_data_groundstation+0x1a0>
		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	40da      	lsrs	r2, r3
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	f1c3 030a 	rsb	r3, r3, #10
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	3338      	adds	r3, #56	; 0x38
 800224c:	443b      	add	r3, r7
 800224e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 2; i++) {
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	3301      	adds	r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	2b01      	cmp	r3, #1
 800225c:	dded      	ble.n	800223a <rfm95_send_data_groundstation+0x182>
//		rfm_data[0] = 0x53;
//		rfm_data[1] = 0x4f;
//		rfm_data[2] = 0x53;


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 800225e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002262:	f107 010c 	add.w	r1, r7, #12
 8002266:	2308      	movs	r3, #8
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe05 	bl	8001e78 <rfm95_send_package>
 800226e:	4603      	mov	r3, r0
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <rfm95_send_data_groundstation+0x1c6>
			8)) {
		return false;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <rfm95_send_data_groundstation+0x1c8>
	}
	return true;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3738      	adds	r7, #56	; 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <rfm95_send_data>:

bool rfm95_send_data(rfm95_handle_t *handle, const uint8_t *data, size_t length) {
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b09d      	sub	sp, #116	; 0x74
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8002294:	2234      	movs	r2, #52	; 0x34
 8002296:	2139      	movs	r1, #57	; 0x39
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fc13 	bl	8001ac4 <rfm95_write>
 800229e:	4603      	mov	r3, r0
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <rfm95_send_data+0x26>
		return false;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e0df      	b.n	800246e <rfm95_send_data+0x1e6>

	// 64 bytes is maximum size of FIFO
	assert(length + 4 + 9 <= 64);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	330d      	adds	r3, #13
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d906      	bls.n	80022c4 <rfm95_send_data+0x3c>
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <rfm95_send_data+0x1f0>)
 80022b8:	4a70      	ldr	r2, [pc, #448]	; (800247c <rfm95_send_data+0x1f4>)
 80022ba:	f240 116b 	movw	r1, #363	; 0x16b
 80022be:	4870      	ldr	r0, [pc, #448]	; (8002480 <rfm95_send_data+0x1f8>)
 80022c0:	f00b f93e 	bl	800d540 <__assert_func>

	uint8_t direction = 0; // Up
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t frame_control = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t frame_port = 0x01;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t mac_header = 0x40;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t rfm_data[64 + 4 + 9];
	uint8_t rfm_package_length = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t mic[4];

	rfm_data[0] = mac_header;
 80022e2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80022e6:	753b      	strb	r3, [r7, #20]
	rfm_data[1] = handle->device_address[3];
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022ee:	757b      	strb	r3, [r7, #21]
	rfm_data[2] = handle->device_address[2];
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f6:	75bb      	strb	r3, [r7, #22]
	rfm_data[3] = handle->device_address[1];
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80022fe:	75fb      	strb	r3, [r7, #23]
	rfm_data[4] = handle->device_address[0];
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002306:	763b      	strb	r3, [r7, #24]
	rfm_data[5] = frame_control;
 8002308:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800230c:	767b      	strb	r3, [r7, #25]
	rfm_data[6] = (handle->tx_frame_count & 0x00ffu);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002314:	b2db      	uxtb	r3, r3
 8002316:	76bb      	strb	r3, [r7, #26]
	rfm_data[7] = ((uint16_t) (handle->tx_frame_count >> 8u) & 0x00ffu);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	76fb      	strb	r3, [r7, #27]
	rfm_data[8] = frame_port;
 8002326:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800232a:	773b      	strb	r3, [r7, #28]
	rfm_package_length += 9;
 800232c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002330:	3309      	adds	r3, #9
 8002332:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Copy network and application session keys as well as device address to variables of encryption library
	memcpy(NwkSkey, handle->network_session_key,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3326      	adds	r3, #38	; 0x26
 800233a:	4a52      	ldr	r2, [pc, #328]	; (8002484 <rfm95_send_data+0x1fc>)
 800233c:	4614      	mov	r4, r2
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->network_session_key));
	memcpy(AppSkey, handle->application_session_key,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3336      	adds	r3, #54	; 0x36
 800234c:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <rfm95_send_data+0x200>)
 800234e:	4614      	mov	r4, r2
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->application_session_key));
	memcpy(DevAddr, handle->device_address, sizeof(handle->device_address));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3322      	adds	r3, #34	; 0x22
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <rfm95_send_data+0x204>)
 8002364:	601a      	str	r2, [r3, #0]

	// Encrypt payload in place in package.
	memcpy(rfm_data + rfm_package_length, data, length);
 8002366:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800236a:	f107 0214 	add.w	r2, r7, #20
 800236e:	4413      	add	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f00b f941 	bl	800d5fc <memcpy>
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 800237a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800237e:	f107 0214 	add.w	r2, r7, #20
 8002382:	18d0      	adds	r0, r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	b2d9      	uxtb	r1, r3
			handle->tx_frame_count, direction);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 800238e:	461a      	mov	r2, r3
 8002390:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002394:	f7ff f87a 	bl	800148c <Encrypt_Payload>
	rfm_package_length += length;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80023a0:	4413      	add	r3, r2
 80023a2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Calculate MIC and copy to last 4 bytes of the package.
	Calculate_MIC(rfm_data, mic, rfm_package_length, handle->tx_frame_count,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023ac:	461c      	mov	r4, r3
 80023ae:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80023b2:	f107 0110 	add.w	r1, r7, #16
 80023b6:	f107 0014 	add.w	r0, r7, #20
 80023ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4623      	mov	r3, r4
 80023c2:	f7ff f91b 	bl	80015fc <Calculate_MIC>
			direction);
	for (uint8_t i = 0; i < 4; i++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023cc:	e013      	b.n	80023f6 <rfm95_send_data+0x16e>
		rfm_data[rfm_package_length + i] = mic[i];
 80023ce:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80023d2:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 80023d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023da:	440b      	add	r3, r1
 80023dc:	3268      	adds	r2, #104	; 0x68
 80023de:	443a      	add	r2, r7
 80023e0:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 80023e4:	3368      	adds	r3, #104	; 0x68
 80023e6:	443b      	add	r3, r7
 80023e8:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (uint8_t i = 0; i < 4; i++) {
 80023ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d9e7      	bls.n	80023ce <rfm95_send_data+0x146>
	}
	rfm_package_length += 4;
 80023fe:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002402:	3304      	adds	r3, #4
 8002404:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t pseudorandom_channel = rfm_data[rfm_package_length - 1] & 0x7u;
 8002408:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800240c:	3b01      	subs	r3, #1
 800240e:	3368      	adds	r3, #104	; 0x68
 8002410:	443b      	add	r3, r7
 8002412:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 800241e:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8002422:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8002426:	f107 0114 	add.w	r1, r7, #20
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff fd24 	bl	8001e78 <rfm95_send_package>
 8002430:	4603      	mov	r3, r0
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <rfm95_send_data+0x1b8>
			pseudorandom_channel)) {
		return false;
 800243c:	2300      	movs	r3, #0
 800243e:	e016      	b.n	800246e <rfm95_send_data+0x1e6>
	}

	handle->tx_frame_count++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002446:	3301      	adds	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if (handle->save_frame_counter != NULL) {
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <rfm95_send_data+0x1e4>
		handle->save_frame_counter(handle->tx_frame_count,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	f8b2 0052 	ldrh.w	r0, [r2, #82]	; 0x52
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002468:	4611      	mov	r1, r2
 800246a:	4798      	blx	r3
				handle->rx_frame_count);
	}
	return true;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	376c      	adds	r7, #108	; 0x6c
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	bf00      	nop
 8002478:	080107e0 	.word	0x080107e0
 800247c:	08010c0c 	.word	0x08010c0c
 8002480:	0801069c 	.word	0x0801069c
 8002484:	2000042c 	.word	0x2000042c
 8002488:	2000043c 	.word	0x2000043c
 800248c:	2000044c 	.word	0x2000044c

08002490 <FlowInit>:
#include <stdio.h>

#define LORAINTERVALL 5
extern SPI_HandleTypeDef hspi2;

FlowInit(rfm95_handle_t *handle) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	// Initialise RFM95 module.
	if (!rfm95_init(handle)) {
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fb63 	bl	8001b64 <rfm95_init>
 800249e:	4603      	mov	r3, r0
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <FlowInit+0x22>
		printf("RFM95 init failed\n\r");
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <FlowInit+0x30>)
 80024ac:	f00b fe80 	bl	800e1b0 <iprintf>
	} else {
		printf("RFM95 init sucess\n\r");
	}
}
 80024b0:	e002      	b.n	80024b8 <FlowInit+0x28>
		printf("RFM95 init sucess\n\r");
 80024b2:	4804      	ldr	r0, [pc, #16]	; (80024c4 <FlowInit+0x34>)
 80024b4:	f00b fe7c 	bl	800e1b0 <iprintf>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	080107f8 	.word	0x080107f8
 80024c4:	0801080c 	.word	0x0801080c

080024c8 <Flow>:

Flow(rfm95_handle_t *handle) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09c      	sub	sp, #112	; 0x70
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
//		printf("RFM95 send failed\n\r");
//	} else {
//		printf("RFM95 send success\n\r");
//	}

	size_t length = LENGHT_GROUNDSTATION;
 80024d0:	230b      	movs	r3, #11
 80024d2:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t ident = IDENT;
 80024d4:	2309      	movs	r3, #9
 80024d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t rfm_data[LENGHT_GROUNDSTATION];
	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
 80024da:	230b      	movs	r3, #11
 80024dc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	unsigned long latitude = handle->latitude;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned long longitude = handle->longitude;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
	unsigned altitude = handle->altitude;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50



	// set identifier to 1 for bits
	rfm_data[0] = ((ident << 4) & 0xf0);
 80024f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	733b      	strb	r3, [r7, #12]
	// set the next for bits with the orientation
	if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'E') {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002502:	2b4e      	cmp	r3, #78	; 0x4e
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2da      	uxtb	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002512:	2b45      	cmp	r3, #69	; 0x45
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4013      	ands	r3, r2
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <Flow+0x68>
		rfm_data[0] = (rfm_data[0] | 0x01);
 8002524:	7b3b      	ldrb	r3, [r7, #12]
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	733b      	strb	r3, [r7, #12]
 800252e:	e04f      	b.n	80025d0 <Flow+0x108>
	} else if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'W') {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002536:	2b4e      	cmp	r3, #78	; 0x4e
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002546:	2b57      	cmp	r3, #87	; 0x57
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4013      	ands	r3, r2
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <Flow+0x9c>
		rfm_data[0] = (rfm_data[0] | 0x02);
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	733b      	strb	r3, [r7, #12]
 8002562:	e035      	b.n	80025d0 <Flow+0x108>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'E') {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800256a:	2b53      	cmp	r3, #83	; 0x53
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800257a:	2b45      	cmp	r3, #69	; 0x45
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4013      	ands	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <Flow+0xd0>
		rfm_data[0] = (rfm_data[0] | 0x03);
 800258c:	7b3b      	ldrb	r3, [r7, #12]
 800258e:	f043 0303 	orr.w	r3, r3, #3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	733b      	strb	r3, [r7, #12]
 8002596:	e01b      	b.n	80025d0 <Flow+0x108>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'W') {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800259e:	2b53      	cmp	r3, #83	; 0x53
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025ae:	2b57      	cmp	r3, #87	; 0x57
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4013      	ands	r3, r2
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <Flow+0x104>
		rfm_data[0] = (rfm_data[0] | 0x04);
 80025c0:	7b3b      	ldrb	r3, [r7, #12]
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	733b      	strb	r3, [r7, #12]
 80025ca:	e001      	b.n	80025d0 <Flow+0x108>
	} else {
		rfm_data[0] = (rfm_data[0] | 0x00);
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	733b      	strb	r3, [r7, #12]
	}

	// set latitude
	for (int i = 0; i < 4; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025d4:	e00e      	b.n	80025f4 <Flow+0x12c>
		rfm_data[4 - i] = ((latitude >> (i * 8)) & 0xFF);
 80025d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025dc:	40da      	lsrs	r2, r3
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	f1c3 0304 	rsb	r3, r3, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	3370      	adds	r3, #112	; 0x70
 80025e8:	443b      	add	r3, r7
 80025ea:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 4; i++) {
 80025ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f0:	3301      	adds	r3, #1
 80025f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	dded      	ble.n	80025d6 <Flow+0x10e>
	}
	for (int i = 0; i < 4; i++) {
 80025fa:	2300      	movs	r3, #0
 80025fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025fe:	e00e      	b.n	800261e <Flow+0x156>
		rfm_data[8 - i] = ((longitude >> (i * 8)) & 0xFF);
 8002600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002606:	40da      	lsrs	r2, r3
 8002608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260a:	f1c3 0308 	rsb	r3, r3, #8
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	3370      	adds	r3, #112	; 0x70
 8002612:	443b      	add	r3, r7
 8002614:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 4; i++) {
 8002618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261a:	3301      	adds	r3, #1
 800261c:	66bb      	str	r3, [r7, #104]	; 0x68
 800261e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002620:	2b03      	cmp	r3, #3
 8002622:	dded      	ble.n	8002600 <Flow+0x138>
	}

	for (int i = 0; i < 2; i++) {
 8002624:	2300      	movs	r3, #0
 8002626:	667b      	str	r3, [r7, #100]	; 0x64
 8002628:	e00e      	b.n	8002648 <Flow+0x180>
		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
 800262a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002630:	40da      	lsrs	r2, r3
 8002632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002634:	f1c3 030a 	rsb	r3, r3, #10
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	3370      	adds	r3, #112	; 0x70
 800263c:	443b      	add	r3, r7
 800263e:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 2; i++) {
 8002642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002644:	3301      	adds	r3, #1
 8002646:	667b      	str	r3, [r7, #100]	; 0x64
 8002648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800264a:	2b01      	cmp	r3, #1
 800264c:	dded      	ble.n	800262a <Flow+0x162>
	}


	if (!rfm95_send_data(handle, rfm_data, sizeof(rfm_data))) {
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	220b      	movs	r2, #11
 8002654:	4619      	mov	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe16 	bl	8002288 <rfm95_send_data>
 800265c:	4603      	mov	r3, r0
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <Flow+0x1a8>
		printf("RFM95 send failed\n\r");
 8002668:	4810      	ldr	r0, [pc, #64]	; (80026ac <Flow+0x1e4>)
 800266a:	f00b fda1 	bl	800e1b0 <iprintf>
 800266e:	e002      	b.n	8002676 <Flow+0x1ae>
	} else {
		printf("RFM95 send success\n\r");
 8002670:	480f      	ldr	r0, [pc, #60]	; (80026b0 <Flow+0x1e8>)
 8002672:	f00b fd9d 	bl	800e1b0 <iprintf>
	}

	if (!rfm95_send_data_groundstation(handle)) {
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fd1e 	bl	80020b8 <rfm95_send_data_groundstation>
 800267c:	4603      	mov	r3, r0
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <Flow+0x1c8>
		printf("RFM95 send failed\n\r");
 8002688:	4808      	ldr	r0, [pc, #32]	; (80026ac <Flow+0x1e4>)
 800268a:	f00b fd91 	bl	800e1b0 <iprintf>
 800268e:	e002      	b.n	8002696 <Flow+0x1ce>
	} else {
		printf("RFM95 send success\n\r");
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <Flow+0x1e8>)
 8002692:	f00b fd8d 	bl	800e1b0 <iprintf>
	}

//	}

	loraCounter++;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <Flow+0x1ec>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <Flow+0x1ec>)
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3770      	adds	r7, #112	; 0x70
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08010820 	.word	0x08010820
 80026b0:	08010834 	.word	0x08010834
 80026b4:	20000450 	.word	0x20000450

080026b8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80026b8:	b40f      	push	{r0, r1, r2, r3}
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <myprintf+0x34>)
 80026d0:	f00b fee8 	bl	800e4a4 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <myprintf+0x34>)
 80026d6:	f7fd fd7b 	bl	80001d0 <strlen>
 80026da:	4603      	mov	r3, r0
 80026dc:	607b      	str	r3, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026e8:	b004      	add	sp, #16
 80026ea:	4770      	bx	lr
 80026ec:	20000688 	.word	0x20000688

080026f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80026f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80026f8:	f002 fe78 	bl	80053ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80026fc:	f000 fa74 	bl	8002be8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002700:	f000 fbca 	bl	8002e98 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002704:	f000 fb32 	bl	8002d6c <MX_SPI2_Init>
	MX_TIM16_Init();
 8002708:	f000 fb6e 	bl	8002de8 <MX_TIM16_Init>
	MX_I2C1_Init();
 800270c:	f000 fab2 	bl	8002c74 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002710:	f000 faee 	bl	8002cf0 <MX_SPI1_Init>
	MX_FATFS_Init();
 8002714:	f007 fcb8 	bl	800a088 <MX_FATFS_Init>
	MX_UART4_Init();
 8002718:	f000 fb8e 	bl	8002e38 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	Setup();
 800271c:	f000 fcec 	bl	80030f8 <Setup>
//	NVIC_SetPriority(SysTick_IRQn, 0);

//	PCA9847_SetChannel(&multiplexer, 5);
//	SHT41_read(&temp_innen);

	HAL_TIM_Base_Start_IT(&htim16);
 8002720:	48ce      	ldr	r0, [pc, #824]	; (8002a5c <main+0x36c>)
 8002722:	f006 fcb9 	bl	8009098 <HAL_TIM_Base_Start_IT>

//	Write_SD_Card(&rfm95_handle);
//	Write_SD_Card(&rfm95_handle);

	char bfr[1024];
	char msgSep = '$';
 8002726:	2324      	movs	r3, #36	; 0x24
 8002728:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
	char msgSep1 = 'G';
 800272c:	2347      	movs	r3, #71	; 0x47
 800272e:	f887 3442 	strb.w	r3, [r7, #1090]	; 0x442
	char msgSep2 = 'N';
 8002732:	234e      	movs	r3, #78	; 0x4e
 8002734:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
	char msgSep3 = 'G';
 8002738:	2347      	movs	r3, #71	; 0x47
 800273a:	f887 3440 	strb.w	r3, [r7, #1088]	; 0x440
	char msgSep4 = 'G';
 800273e:	2347      	movs	r3, #71	; 0x47
 8002740:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	char msgSep5 = 'A';
 8002744:	2341      	movs	r3, #65	; 0x41
 8002746:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e

	char part_string[13];
	uint16_t who[] = { 9, 12, 1, 13, 1, 1, 2, 4, 5 };
 800274a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800274e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002752:	4ac3      	ldr	r2, [pc, #780]	; (8002a60 <main+0x370>)
 8002754:	461c      	mov	r4, r3
 8002756:	4615      	mov	r5, r2
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	8023      	strh	r3, [r4, #0]

	bool foundString;
	uint16_t string_Start;

	uint16_t datapoint = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
		//HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
		//HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
		// HAL_GPIO_TogglePin(READY_LED_GPIO_Port, READY_LED_Pin);
		// HAL_Delay(5000);

		foundString = false;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
		string_Start = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c

		for (int o = 0; o < 1024; ++o) {
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8002778:	e00d      	b.n	8002796 <main+0xa6>
			bfr[o] = 0;
 800277a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800277e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8002782:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002786:	4413      	add	r3, r2
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		for (int o = 0; o < 1024; ++o) {
 800278c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8002796:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	dbec      	blt.n	800277a <main+0x8a>
		}
		HAL_StatusTypeDef status;
		if (UART4->ISR & USART_ISR_ORE)
 80027a0:	4bb0      	ldr	r3, [pc, #704]	; (8002a64 <main+0x374>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <main+0xc2>
			UART4->ICR = USART_ICR_ORECF;
 80027ac:	4bad      	ldr	r3, [pc, #692]	; (8002a64 <main+0x374>)
 80027ae:	2208      	movs	r2, #8
 80027b0:	621a      	str	r2, [r3, #32]

		status = HAL_UART_Receive(&huart4, (uint8_t*) bfr, sizeof(bfr), 800);
 80027b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80027b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80027ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027be:	48aa      	ldr	r0, [pc, #680]	; (8002a68 <main+0x378>)
 80027c0:	f006 ff28 	bl	8009614 <HAL_UART_Receive>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
		for (uint16_t i = 0; i < 1024; i++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
 80027d0:	e05d      	b.n	800288e <main+0x19e>
			if (bfr[i] == msgSep && bfr[i + 1] == msgSep1
 80027d2:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 80027d6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80027da:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	f897 2443 	ldrb.w	r2, [r7, #1091]	; 0x443
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d14d      	bne.n	8002884 <main+0x194>
 80027e8:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 80027ec:	3301      	adds	r3, #1
 80027ee:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80027f2:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	f897 2442 	ldrb.w	r2, [r7, #1090]	; 0x442
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d141      	bne.n	8002884 <main+0x194>
					&& bfr[i + 2] == msgSep2 && bfr[i + 3] == msgSep3
 8002800:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002804:	3302      	adds	r3, #2
 8002806:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800280a:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	f897 2441 	ldrb.w	r2, [r7, #1089]	; 0x441
 8002814:	429a      	cmp	r2, r3
 8002816:	d135      	bne.n	8002884 <main+0x194>
 8002818:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 800281c:	3303      	adds	r3, #3
 800281e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002822:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	f897 2440 	ldrb.w	r2, [r7, #1088]	; 0x440
 800282c:	429a      	cmp	r2, r3
 800282e:	d129      	bne.n	8002884 <main+0x194>
					&& bfr[i + 4] == msgSep4 && bfr[i + 5] == msgSep5) {
 8002830:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002834:	3304      	adds	r3, #4
 8002836:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800283a:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	f897 243f 	ldrb.w	r2, [r7, #1087]	; 0x43f
 8002844:	429a      	cmp	r2, r3
 8002846:	d11d      	bne.n	8002884 <main+0x194>
 8002848:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 800284c:	3305      	adds	r3, #5
 800284e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002852:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f897 243e 	ldrb.w	r2, [r7, #1086]	; 0x43e
 800285c:	429a      	cmp	r2, r3
 800285e:	d111      	bne.n	8002884 <main+0x194>
//	             if (EvalFrame(&bfr[i], sample)){
//	                 return;
//	             }
				printf(bfr[i]);
 8002860:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002864:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002868:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	4618      	mov	r0, r3
 8002870:	f00b fc9e 	bl	800e1b0 <iprintf>
				foundString = true;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				string_Start = i + 7;
 800287a:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 800287e:	3307      	adds	r3, #7
 8002880:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
		for (uint16_t i = 0; i < 1024; i++) {
 8002884:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002888:	3301      	adds	r3, #1
 800288a:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
 800288e:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d39c      	bcc.n	80027d2 <main+0xe2>

			}
		}

		if (foundString == true) {
 8002898:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 816a 	beq.w	8002b76 <main+0x486>
			datapoint = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
			while (datapoint < 9) {
 80028a8:	e160      	b.n	8002b6c <main+0x47c>

				for (int var = 0; var <= who[datapoint]; ++var) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80028b0:	e056      	b.n	8002960 <main+0x270>
					if (bfr[string_Start + var] != ',') {
 80028b2:	f8b7 246c 	ldrh.w	r2, [r7, #1132]	; 0x46c
 80028b6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80028ba:	4413      	add	r3, r2
 80028bc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80028c0:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	2b2c      	cmp	r3, #44	; 0x2c
 80028c8:	d013      	beq.n	80028f2 <main+0x202>
						part_string[var] = bfr[string_Start + var];
 80028ca:	f8b7 246c 	ldrh.w	r2, [r7, #1132]	; 0x46c
 80028ce:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80028d2:	4413      	add	r3, r2
 80028d4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80028d8:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80028dc:	5cd1      	ldrb	r1, [r2, r3]
 80028de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80028e2:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 80028e6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80028ea:	4413      	add	r3, r2
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e031      	b.n	8002956 <main+0x266>
					} else {
						if (var == 0) {
 80028f2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <main+0x21c>
							part_string[var] = ',';
 80028fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80028fe:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8002902:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002906:	4413      	add	r3, r2
 8002908:	222c      	movs	r2, #44	; 0x2c
 800290a:	701a      	strb	r2, [r3, #0]
						}
						string_Start = string_Start + var + 1;
 800290c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002910:	b29a      	uxth	r2, r3
 8002912:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 8002916:	4413      	add	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
						for (uint16_t p = var + 1; p < 13; ++p) {
 8002920:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002924:	b29b      	uxth	r3, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
 800292c:	e00c      	b.n	8002948 <main+0x258>
							part_string[p] = '?';
 800292e:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 8002932:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002936:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 800293a:	213f      	movs	r1, #63	; 0x3f
 800293c:	54d1      	strb	r1, [r2, r3]
						for (uint16_t p = var + 1; p < 13; ++p) {
 800293e:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 8002942:	3301      	adds	r3, #1
 8002944:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
 8002948:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d9ee      	bls.n	800292e <main+0x23e>
						}
						var = 12 + 1;
 8002950:	230d      	movs	r3, #13
 8002952:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				for (int var = 0; var <= who[datapoint]; ++var) {
 8002956:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800295a:	3301      	adds	r3, #1
 800295c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8002960:	f8b7 246a 	ldrh.w	r2, [r7, #1130]	; 0x46a
 8002964:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002968:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800296c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002970:	461a      	mov	r2, r3
 8002972:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002976:	4293      	cmp	r3, r2
 8002978:	dd9b      	ble.n	80028b2 <main+0x1c2>
					}

				}
				if (datapoint == 0) {
 800297a:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11c      	bne.n	80029bc <main+0x2cc>
					// 9 is the size of the time array
					for (int looper = 0; looper < 9; ++looper) {
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8002988:	e013      	b.n	80029b2 <main+0x2c2>
						rfm95_handle.time[looper] = part_string[looper];
 800298a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800298e:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8002992:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002996:	4413      	add	r3, r2
 8002998:	7819      	ldrb	r1, [r3, #0]
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <main+0x37c>)
 800299c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80029a0:	4413      	add	r3, r2
 80029a2:	3368      	adds	r3, #104	; 0x68
 80029a4:	460a      	mov	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
					for (int looper = 0; looper < 9; ++looper) {
 80029a8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80029ac:	3301      	adds	r3, #1
 80029ae:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80029b2:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	dde7      	ble.n	800298a <main+0x29a>
 80029ba:	e0d2      	b.n	8002b62 <main+0x472>
					}

				} else if (datapoint == 1) {
 80029bc:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d155      	bne.n	8002a70 <main+0x380>
					unsigned long answer;
					char *remaining;
					for (uint16_t ll = 5; ll < 10; ++ll) {
 80029c4:	2305      	movs	r3, #5
 80029c6:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
 80029ca:	e013      	b.n	80029f4 <main+0x304>
						part_string[ll - 1] = part_string[ll];
 80029cc:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	; 0x452
 80029d0:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80029d4:	3b01      	subs	r3, #1
 80029d6:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80029da:	f5a1 618a 	sub.w	r1, r1, #1104	; 0x450
 80029de:	5c89      	ldrb	r1, [r1, r2]
 80029e0:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80029e4:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 80029e8:	54d1      	strb	r1, [r2, r3]
					for (uint16_t ll = 5; ll < 10; ++ll) {
 80029ea:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
 80029f4:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d9e7      	bls.n	80029cc <main+0x2dc>
					}
					for (int z = 0; z < 13; ++z) {
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8002a02:	e017      	b.n	8002a34 <main+0x344>
						if (part_string[z] == '?') {
 8002a04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002a08:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8002a0c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002a10:	4413      	add	r3, r2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b3f      	cmp	r3, #63	; 0x3f
 8002a16:	d108      	bne.n	8002a2a <main+0x33a>
							part_string[z - 1] = '?';
 8002a18:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002a22:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 8002a26:	213f      	movs	r1, #63	; 0x3f
 8002a28:	54d1      	strb	r1, [r2, r3]
					for (int z = 0; z < 13; ++z) {
 8002a2a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8002a34:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	dde3      	ble.n	8002a04 <main+0x314>

						}
					}
					answer = strtol(part_string, &remaining, 10);
 8002a3c:	f107 0108 	add.w	r1, r7, #8
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	220a      	movs	r2, #10
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00b fcf6 	bl	800e438 <strtol>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					rfm95_handle.latitude = answer;
 8002a52:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <main+0x37c>)
 8002a54:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002a58:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002a5a:	e082      	b.n	8002b62 <main+0x472>
 8002a5c:	20000570 	.word	0x20000570
 8002a60:	0801084c 	.word	0x0801084c
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	200005bc 	.word	0x200005bc
 8002a6c:	20000120 	.word	0x20000120

				} else if (datapoint == 2) {
 8002a70:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d108      	bne.n	8002a8a <main+0x39a>
					rfm95_handle.latitude_or[0] = part_string[0];
 8002a78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002a7c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <main+0x4e0>)
 8002a84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002a88:	e06b      	b.n	8002b62 <main+0x472>

				} else if (datapoint == 3) {
 8002a8a:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d14a      	bne.n	8002b28 <main+0x438>
					unsigned long answer;
					char *remaining;
					for (uint16_t ll = 6; ll < 11; ++ll) {
 8002a92:	2306      	movs	r3, #6
 8002a94:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8002a98:	e013      	b.n	8002ac2 <main+0x3d2>
						part_string[ll - 1] = part_string[ll];
 8002a9a:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 8002a9e:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8002aa8:	f5a1 618a 	sub.w	r1, r1, #1104	; 0x450
 8002aac:	5c89      	ldrb	r1, [r1, r2]
 8002aae:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002ab2:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 8002ab6:	54d1      	strb	r1, [r2, r3]
					for (uint16_t ll = 6; ll < 11; ++ll) {
 8002ab8:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8002abc:	3301      	adds	r3, #1
 8002abe:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8002ac2:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8002ac6:	2b0a      	cmp	r3, #10
 8002ac8:	d9e7      	bls.n	8002a9a <main+0x3aa>
					}
					for (int z = 0; z < 13; ++z) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8002ad0:	e017      	b.n	8002b02 <main+0x412>
						if (part_string[z] == '?') {
 8002ad2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002ad6:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8002ada:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ae4:	d108      	bne.n	8002af8 <main+0x408>
							part_string[z - 1] = '?';
 8002ae6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002af0:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 8002af4:	213f      	movs	r1, #63	; 0x3f
 8002af6:	54d1      	strb	r1, [r2, r3]
					for (int z = 0; z < 13; ++z) {
 8002af8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002afc:	3301      	adds	r3, #1
 8002afe:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8002b02:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	dde3      	ble.n	8002ad2 <main+0x3e2>

						}
					}
					answer = strtol(part_string, &remaining, 10);
 8002b0a:	1d39      	adds	r1, r7, #4
 8002b0c:	f107 0320 	add.w	r3, r7, #32
 8002b10:	220a      	movs	r2, #10
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00b fc90 	bl	800e438 <strtol>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
					rfm95_handle.longitude = answer;
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <main+0x4e0>)
 8002b20:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8002b24:	6553      	str	r3, [r2, #84]	; 0x54
 8002b26:	e01c      	b.n	8002b62 <main+0x472>
				} else if (datapoint == 4) {
 8002b28:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d108      	bne.n	8002b42 <main+0x452>
					rfm95_handle.longitude_or[0] = part_string[0];
 8002b30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002b34:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <main+0x4e0>)
 8002b3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b40:	e00f      	b.n	8002b62 <main+0x472>

				} else if (datapoint == 8) {
 8002b42:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10b      	bne.n	8002b62 <main+0x472>
					unsigned int answer;
					answer = atoi(part_string);
 8002b4a:	f107 0320 	add.w	r3, r7, #32
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00a fd14 	bl	800d57c <atoi>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
					rfm95_handle.altitude = answer;
 8002b5a:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <main+0x4e0>)
 8002b5c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002b60:	6653      	str	r3, [r2, #100]	; 0x64
				}
				datapoint++;
 8002b62:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
			while (datapoint < 9) {
 8002b6c:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	f67f ae9a 	bls.w	80028aa <main+0x1ba>
			}

		}

		if (read_and_safe == true) {
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <main+0x4e4>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f43f adf3 	beq.w	8002766 <main+0x76>
			read_and_safe = false;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <main+0x4e4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
			PCA9847_SetChannel(&multiplexer, 7);
 8002b86:	2107      	movs	r1, #7
 8002b88:	4813      	ldr	r0, [pc, #76]	; (8002bd8 <main+0x4e8>)
 8002b8a:	f002 fb37 	bl	80051fc <PCA9847_SetChannel>
			LSM303AGR_ReadAcceleration(&lsm303agr);
 8002b8e:	4813      	ldr	r0, [pc, #76]	; (8002bdc <main+0x4ec>)
 8002b90:	f002 f84e 	bl	8004c30 <LSM303AGR_ReadAcceleration>
			LSM303AGR_ReadMagnetometer(&lsm303agr);
 8002b94:	4811      	ldr	r0, [pc, #68]	; (8002bdc <main+0x4ec>)
 8002b96:	f002 f9cf 	bl	8004f38 <LSM303AGR_ReadMagnetometer>
			Read_Spectralsensor(&rfm95_handle);
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <main+0x4e0>)
 8002b9c:	f000 fb20 	bl	80031e0 <Read_Spectralsensor>
			check_gain(&rfm95_handle);
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <main+0x4e0>)
 8002ba2:	f000 ff9d 	bl	8003ae0 <check_gain>
			SHT41_read(&temp_innen);
 8002ba6:	480e      	ldr	r0, [pc, #56]	; (8002be0 <main+0x4f0>)
 8002ba8:	f002 fb82 	bl	80052b0 <SHT41_read>
			SHT41_read(&temp_aussen);
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <main+0x4f4>)
 8002bae:	f002 fb7f 	bl	80052b0 <SHT41_read>
			read_temp_aussen(&rfm95_handle);
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <main+0x4e0>)
 8002bb4:	f000 fef6 	bl	80039a4 <read_temp_aussen>
			read_temp_innen(&rfm95_handle);
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <main+0x4e0>)
 8002bba:	f000 fe55 	bl	8003868 <read_temp_innen>
			Write_SD_Card_Spectral(&rfm95_handle, &lsm303agr);
 8002bbe:	4907      	ldr	r1, [pc, #28]	; (8002bdc <main+0x4ec>)
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <main+0x4e0>)
 8002bc2:	f000 fba5 	bl	8003310 <Write_SD_Card_Spectral>
			check_stats();
 8002bc6:	f001 f8f5 	bl	8003db4 <check_stats>
			fail_handler();
 8002bca:	f001 f8ff 	bl	8003dcc <fail_handler>
	while (1) {
 8002bce:	e5ca      	b.n	8002766 <main+0x76>
 8002bd0:	20000120 	.word	0x20000120
 8002bd4:	20000684 	.word	0x20000684
 8002bd8:	20000640 	.word	0x20000640
 8002bdc:	20000648 	.word	0x20000648
 8002be0:	20000100 	.word	0x20000100
 8002be4:	20000110 	.word	0x20000110

08002be8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b096      	sub	sp, #88	; 0x58
 8002bec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	2244      	movs	r2, #68	; 0x44
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f00a fd0e 	bl	800d618 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c0e:	f003 fff9 	bl	8006c04 <HAL_PWREx_ControlVoltageScaling>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8002c18:	f001 f91e 	bl	8003e58 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c28:	2360      	movs	r3, #96	; 0x60
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f83b 	bl	8006cb0 <HAL_RCC_OscConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x5c>
		Error_Handler();
 8002c40:	f001 f90a 	bl	8003e58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c44:	230f      	movs	r3, #15
 8002c46:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fc03 	bl	8007468 <HAL_RCC_ClockConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0x84>
		Error_Handler();
 8002c68:	f001 f8f6 	bl	8003e58 <Error_Handler>
	}
}
 8002c6c:	bf00      	nop
 8002c6e:	3758      	adds	r7, #88	; 0x58
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <MX_I2C1_Init+0x78>)
 8002c7c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c80:	f640 6214 	movw	r2, #3604	; 0xe14
 8002c84:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cb2:	f002 ff39 	bl	8005b28 <HAL_I2C_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002cbc:	f001 f8cc 	bl	8003e58 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cc4:	f003 fef8 	bl	8006ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8002cce:	f001 f8c3 	bl	8003e58 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cd6:	f003 ff3a 	bl	8006b4e <HAL_I2CEx_ConfigDigitalFilter>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_I2C1_Init+0x70>
		Error_Handler();
 8002ce0:	f001 f8ba 	bl	8003e58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000454 	.word	0x20000454
 8002cec:	40005400 	.word	0x40005400

08002cf0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <MX_SPI1_Init+0x78>)
 8002cf8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d00:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d0e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d22:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d3e:	2207      	movs	r2, #7
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_SPI1_Init+0x74>)
 8002d50:	f005 fa3a 	bl	80081c8 <HAL_SPI_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_SPI1_Init+0x6e>
		Error_Handler();
 8002d5a:	f001 f87d 	bl	8003e58 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200004a8 	.word	0x200004a8
 8002d68:	40013000 	.word	0x40013000

08002d6c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <MX_SPI2_Init+0x78>)
 8002d74:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d7c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d8a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002da2:	2238      	movs	r2, #56	; 0x38
 8002da4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002dba:	2207      	movs	r2, #7
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <MX_SPI2_Init+0x74>)
 8002dcc:	f005 f9fc 	bl	80081c8 <HAL_SPI_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_SPI2_Init+0x6e>
		Error_Handler();
 8002dd6:	f001 f83f 	bl	8003e58 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000050c 	.word	0x2000050c
 8002de4:	40003800 	.word	0x40003800

08002de8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <MX_TIM16_Init+0x4c>)
 8002df0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 6000;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002df4:	f241 7270 	movw	r2, #6000	; 0x1770
 8002df8:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 4000;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002e02:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002e06:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_TIM16_Init+0x48>)
 8002e1c:	f006 f8e4 	bl	8008fe8 <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM16_Init+0x42>
		Error_Handler();
 8002e26:	f001 f817 	bl	8003e58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000570 	.word	0x20000570
 8002e34:	40014400 	.word	0x40014400

08002e38 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <MX_UART4_Init+0x5c>)
 8002e40:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e48:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_UART4_Init+0x58>)
 8002e7c:	f006 fb7c 	bl	8009578 <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_UART4_Init+0x52>
		Error_Handler();
 8002e86:	f000 ffe7 	bl	8003e58 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200005bc 	.word	0x200005bc
 8002e94:	40004c00 	.word	0x40004c00

08002e98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	4a76      	ldr	r2, [pc, #472]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eba:	4b74      	ldr	r3, [pc, #464]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a70      	ldr	r2, [pc, #448]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b6e      	ldr	r3, [pc, #440]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b6b      	ldr	r3, [pc, #428]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4a6a      	ldr	r2, [pc, #424]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eea:	4b68      	ldr	r3, [pc, #416]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef6:	4b65      	ldr	r3, [pc, #404]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <MX_GPIO_Init+0x1f4>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | SD_LC_Pin, GPIO_PIN_SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2118      	movs	r1, #24
 8002f12:	485f      	ldr	r0, [pc, #380]	; (8003090 <MX_GPIO_Init+0x1f8>)
 8002f14:	f002 fdd6 	bl	8005ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f649 010c 	movw	r1, #38924	; 0x980c
 8002f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f22:	f002 fdcf 	bl	8005ac4 <HAL_GPIO_WritePin>
	INT_GPS_Pin | RESET_GPS_Pin | LORA_LC3_Pin | LORA_LC1_Pin | RESET_n_MUX_Pin,
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2110      	movs	r1, #16
 8002f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2e:	f002 fdc9 	bl	8005ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, POWER_SW_Pin | SS1_Pin | SS2_Pin, GPIO_PIN_RESET);
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8002f38:	4855      	ldr	r0, [pc, #340]	; (8003090 <MX_GPIO_Init+0x1f8>)
 8002f3a:	f002 fdc3 	bl	8005ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LoRa_LC2_GPIO_Port, LoRa_LC2_Pin, GPIO_PIN_SET);
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2104      	movs	r1, #4
 8002f42:	4854      	ldr	r0, [pc, #336]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8002f44:	f002 fdbe 	bl	8005ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8002f4e:	4851      	ldr	r0, [pc, #324]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8002f50:	f002 fdb8 	bl	8005ac4 <HAL_GPIO_WritePin>
	READY_LED_Pin | STATUS_LED_Pin | LORA_NSS_Pin | SS4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : ADC_3V3_Pin ADC_BATTERIE_Pin */
	GPIO_InitStruct.Pin = ADC_3V3_Pin | ADC_BATTERIE_Pin;
 8002f54:	2303      	movs	r3, #3
 8002f56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f58:	230b      	movs	r3, #11
 8002f5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	484a      	ldr	r0, [pc, #296]	; (8003090 <MX_GPIO_Init+0x1f8>)
 8002f68:	f002 fbea 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC3 SD_LC_Pin POWER_SW_Pin SS1_Pin
	 SS2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | SD_LC_Pin | POWER_SW_Pin | SS1_Pin
 8002f6c:	f241 4338 	movw	r3, #5176	; 0x1438
 8002f70:	617b      	str	r3, [r7, #20]
			| SS2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	4619      	mov	r1, r3
 8002f84:	4842      	ldr	r0, [pc, #264]	; (8003090 <MX_GPIO_Init+0x1f8>)
 8002f86:	f002 fbdb 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_GPS_Pin RESET_GPS_Pin SD_NSS_Pin RESET_n_MUX_Pin */
	GPIO_InitStruct.Pin = INT_GPS_Pin | RESET_GPS_Pin | SD_NSS_Pin
 8002f8a:	f248 031c 	movw	r3, #32796	; 0x801c
 8002f8e:	617b      	str	r3, [r7, #20]
			| RESET_n_MUX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa6:	f002 fbcb 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT1_AS_Pin INT2_AS_Pin INT_SS3_Pin INT_SS4_Pin */
	GPIO_InitStruct.Pin = INT1_AS_Pin | INT2_AS_Pin | INT_SS3_Pin | INT_SS4_Pin;
 8002faa:	23a3      	movs	r3, #163	; 0xa3
 8002fac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4835      	ldr	r0, [pc, #212]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8002fbe:	f002 fbbf 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pin : LoRa_LC2_Pin */
	GPIO_InitStruct.Pin = LoRa_LC2_Pin;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002fc6:	2311      	movs	r3, #17
 8002fc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LoRa_LC2_GPIO_Port, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	482e      	ldr	r0, [pc, #184]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8002fda:	f002 fbb1 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : READY_LED_Pin STATUS_LED_Pin LORA_NSS_Pin SS4_Pin */
	GPIO_InitStruct.Pin = READY_LED_Pin | STATUS_LED_Pin | LORA_NSS_Pin
 8002fde:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8002fe2:	617b      	str	r3, [r7, #20]
			| SS4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4827      	ldr	r0, [pc, #156]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8002ff8:	f002 fba2 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIO0_Pin LORA_DIO1_Pin LORA_DIO2_Pin LORA_DIO3_Pin
	 INT_SS1_Pin */
	GPIO_InitStruct.Pin = LORA_DIO0_Pin | LORA_DIO1_Pin | LORA_DIO2_Pin
 8002ffc:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8003000:	617b      	str	r3, [r7, #20]
			| LORA_DIO3_Pin | INT_SS1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	481f      	ldr	r0, [pc, #124]	; (8003090 <MX_GPIO_Init+0x1f8>)
 8003012:	f002 fb95 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIO4_Pin LORA_DIO5_Pin Reset_LoRa_Pin */
	GPIO_InitStruct.Pin = LORA_DIO4_Pin | LORA_DIO5_Pin | Reset_LoRa_Pin;
 8003016:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800301a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302e:	f002 fb87 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_LC3_Pin LORA_LC1_Pin */
	GPIO_InitStruct.Pin = LORA_LC3_Pin | LORA_LC1_Pin;
 8003032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003036:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003038:	2311      	movs	r3, #17
 800303a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4619      	mov	r1, r3
 800304a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304e:	f002 fb77 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_SS2_Pin */
	GPIO_InitStruct.Pin = INT_SS2_Pin;
 8003052:	2304      	movs	r3, #4
 8003054:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_SS2_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <MX_GPIO_Init+0x200>)
 8003066:	f002 fb6b 	bl	8005740 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS3_Pin */
	GPIO_InitStruct.Pin = SS3_Pin;
 800306a:	2310      	movs	r3, #16
 800306c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800306e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003072:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4619      	mov	r1, r3
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <MX_GPIO_Init+0x1fc>)
 8003080:	f002 fb5e 	bl	8005740 <HAL_GPIO_Init>

}
 8003084:	bf00      	nop
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	48000800 	.word	0x48000800
 8003094:	48000400 	.word	0x48000400
 8003098:	48000c00 	.word	0x48000c00

0800309c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	static int sendintervall = 4;
	if (htim == &htim16) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d117      	bne.n	80030dc <HAL_TIM_PeriodElapsedCallback+0x40>
		read_and_safe = true;
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]

		if (sendintervall == 4) {
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d10b      	bne.n	80030d2 <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80030ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030be:	480c      	ldr	r0, [pc, #48]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80030c0:	f002 fd18 	bl	8005af4 <HAL_GPIO_TogglePin>
			Flow(&rfm95_handle);
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80030c6:	f7ff f9ff 	bl	80024c8 <Flow>
			sendintervall = 0;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
		//	read_temp_innen(&rfm95_handle, 5);
//		Write_SD_Card_Spectral(&rfm95_handle);

	}

}
 80030d0:	e004      	b.n	80030dc <HAL_TIM_PeriodElapsedCallback+0x40>
			sendintervall++;
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000570 	.word	0x20000570
 80030e8:	20000684 	.word	0x20000684
 80030ec:	20000208 	.word	0x20000208
 80030f0:	48000400 	.word	0x48000400
 80030f4:	20000120 	.word	0x20000120

080030f8 <Setup>:
void Setup(void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	FlowInit(&rfm95_handle);
 80030fc:	480c      	ldr	r0, [pc, #48]	; (8003130 <Setup+0x38>)
 80030fe:	f7ff f9c7 	bl	8002490 <FlowInit>
	errIni = PCA9847_Initialise(&multiplexer, &hi2c1);
 8003102:	490c      	ldr	r1, [pc, #48]	; (8003134 <Setup+0x3c>)
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <Setup+0x40>)
 8003106:	f002 f855 	bl	80051b4 <PCA9847_Initialise>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <Setup+0x44>)
 8003110:	701a      	strb	r2, [r3, #0]
	Setup_Spectralsensor();
 8003112:	f000 f817 	bl	8003144 <Setup_Spectralsensor>
	PCA9847_SetChannel(&multiplexer, 7);
 8003116:	2107      	movs	r1, #7
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <Setup+0x40>)
 800311a:	f002 f86f 	bl	80051fc <PCA9847_SetChannel>
	LSM303AGR_Initialise(&lsm303agr, &hi2c1);
 800311e:	4905      	ldr	r1, [pc, #20]	; (8003134 <Setup+0x3c>)
 8003120:	4807      	ldr	r0, [pc, #28]	; (8003140 <Setup+0x48>)
 8003122:	f001 fca9 	bl	8004a78 <LSM303AGR_Initialise>
	Write_SD_Card_Header();
 8003126:	f000 f8a5 	bl	8003274 <Write_SD_Card_Header>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000120 	.word	0x20000120
 8003134:	20000454 	.word	0x20000454
 8003138:	20000640 	.word	0x20000640
 800313c:	20000644 	.word	0x20000644
 8003140:	20000648 	.word	0x20000648

08003144 <Setup_Spectralsensor>:
void Setup_Spectralsensor(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e019      	b.n	8003184 <Setup_Spectralsensor+0x40>
		PCA9847_SetChannel(&multiplexer, i);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	480f      	ldr	r0, [pc, #60]	; (8003194 <Setup_Spectralsensor+0x50>)
 8003158:	f002 f850 	bl	80051fc <PCA9847_SetChannel>
		AS7341_Init(eSpm);
 800315c:	2000      	movs	r0, #0
 800315e:	f001 f9af 	bl	80044c0 <AS7341_Init>
		AS7341_ATIME_config(100);
 8003162:	2064      	movs	r0, #100	; 0x64
 8003164:	f001 fc2b 	bl	80049be <AS7341_ATIME_config>
		AS7341_ASTEP_config(999);
 8003168:	f240 30e7 	movw	r0, #999	; 0x3e7
 800316c:	f001 fc35 	bl	80049da <AS7341_ASTEP_config>
		AS7341_AGAIN_config(rfm95_handle.gain);
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <Setup_Spectralsensor+0x54>)
 8003172:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	f001 fc47 	bl	8004a0c <AS7341_AGAIN_config>
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3301      	adds	r3, #1
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b03      	cmp	r3, #3
 8003188:	dde2      	ble.n	8003150 <Setup_Spectralsensor+0xc>
	}

}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000640 	.word	0x20000640
 8003198:	20000120 	.word	0x20000120

0800319c <Setup_Gain>:
void Setup_Gain(rfm95_handle_t *handle) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e00f      	b.n	80031ca <Setup_Gain+0x2e>
		PCA9847_SetChannel(&multiplexer, i);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	480a      	ldr	r0, [pc, #40]	; (80031dc <Setup_Gain+0x40>)
 80031b2:	f002 f823 	bl	80051fc <PCA9847_SetChannel>
		AS7341_AGAIN_config(handle->gain);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fc24 	bl	8004a0c <AS7341_AGAIN_config>
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	ddec      	ble.n	80031aa <Setup_Gain+0xe>
	}

}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000640 	.word	0x20000640

080031e0 <Read_Spectralsensor>:

void Read_Spectralsensor(rfm95_handle_t *handle) {
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b08f      	sub	sp, #60	; 0x3c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6178      	str	r0, [r7, #20]
	sModeOneData_t data1;
	sModeTwoData_t data2;
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 80031e8:	2300      	movs	r3, #0
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
 80031ec:	e038      	b.n	8003260 <Read_Spectralsensor+0x80>
		PCA9847_SetChannel(&multiplexer, i);
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	481e      	ldr	r0, [pc, #120]	; (8003270 <Read_Spectralsensor+0x90>)
 80031f6:	f002 f801 	bl	80051fc <PCA9847_SetChannel>
		AS7341_startMeasure(eF1F4ClearNIR);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f001 faba 	bl	8004774 <AS7341_startMeasure>
		handle->spectraldata_1[i] = AS7341_ReadSpectralDataOne();
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003212:	463b      	mov	r3, r7
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fb55 	bl	80048c4 <AS7341_ReadSpectralDataOne>
 800321a:	1ca3      	adds	r3, r4, #2
 800321c:	463a      	mov	r2, r7
 800321e:	6810      	ldr	r0, [r2, #0]
 8003220:	6851      	ldr	r1, [r2, #4]
 8003222:	6892      	ldr	r2, [r2, #8]
 8003224:	6018      	str	r0, [r3, #0]
 8003226:	6059      	str	r1, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
		AS7341_startMeasure(eF5F8ClearNIR);
 800322a:	2001      	movs	r0, #1
 800322c:	f001 faa2 	bl	8004774 <AS7341_startMeasure>
		handle->spectraldata_2[i] = AS7341_ReadSpectralDataTwo();
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003242:	463b      	mov	r3, r7
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fb6b 	bl	8004920 <AS7341_ReadSpectralDataTwo>
 800324a:	1ca3      	adds	r3, r4, #2
 800324c:	463a      	mov	r2, r7
 800324e:	6810      	ldr	r0, [r2, #0]
 8003250:	6851      	ldr	r1, [r2, #4]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	6059      	str	r1, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	3301      	adds	r3, #1
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	2b03      	cmp	r3, #3
 8003264:	ddc3      	ble.n	80031ee <Read_Spectralsensor+0xe>
	}

}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	373c      	adds	r7, #60	; 0x3c
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	20000640 	.word	0x20000640

08003274 <Write_SD_Card_Header>:
void Write_SD_Card_Header() {
 8003274:	b580      	push	{r7, lr}
 8003276:	f5ad 6dce 	sub.w	sp, sp, #1648	; 0x670
 800327a:	af00      	add	r7, sp, #0
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800327c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003280:	2201      	movs	r2, #1
 8003282:	491e      	ldr	r1, [pc, #120]	; (80032fc <Write_SD_Card_Header+0x88>)
 8003284:	4618      	mov	r0, r3
 8003286:	f009 f989 	bl	800c59c <f_mount>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
	if (fres != FR_OK) {
 8003290:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <Write_SD_Card_Header+0x38>
		myprintf("f_mount error (%i)\r\n", fres);
 8003298:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 800329c:	4619      	mov	r1, r3
 800329e:	4818      	ldr	r0, [pc, #96]	; (8003300 <Write_SD_Card_Header+0x8c>)
 80032a0:	f7ff fa0a 	bl	80026b8 <myprintf>
		errorDetected = true;
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <Write_SD_Card_Header+0x90>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e023      	b.n	80032f4 <Write_SD_Card_Header+0x80>
		return;
	}

	UINT bytesWrote;
	fres = f_open(&fil, "write.txt",
 80032ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b0:	2232      	movs	r2, #50	; 0x32
 80032b2:	4915      	ldr	r1, [pc, #84]	; (8003308 <Write_SD_Card_Header+0x94>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f009 f9b7 	bl	800c628 <f_open>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
	FA_WRITE | FA_OPEN_APPEND | FA_OPEN_EXISTING);
	int cx;
	char data_packet[512];
	cx =
			snprintf(data_packet, 512,
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <Write_SD_Card_Header+0x98>)
 80032c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00a ffff 	bl	800e2cc <sniprintf>
 80032ce:	f8c7 0668 	str.w	r0, [r7, #1640]	; 0x668
					"Clear;NIR;CH1;CH2;CH3;CH4;CH5;CH6;CH7;CH8;Clear;NIR;CH1;CH2;CH3;CH4;CH5;CH6;CH7;CH8;Clear;NIR;CH1;CH2;CH3;CH4;CH5;CH6;CH7;CH8;Clear;NIR;CH1;CH2;CH3;CH4;CH5;CH6;CH7;CH8;T_innen;T-aussen;R_innen;R_aussen;accx;accy;accz;magx;magy;magz;pitch;roll;lat;lat_or;long;lon_or;alt;gain;time;END \r\n");
	fres = f_write(&fil, data_packet, cx, &bytesWrote);
 80032d2:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 80032d6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80032da:	1d39      	adds	r1, r7, #4
 80032dc:	f507 7002 	add.w	r0, r7, #520	; 0x208
 80032e0:	f009 fb60 	bl	800c9a4 <f_write>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
	f_close(&fil);
 80032ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ee:	4618      	mov	r0, r3
 80032f0:	f009 fd4b 	bl	800cd8a <f_close>
}
 80032f4:	f507 67ce 	add.w	r7, r7, #1648	; 0x670
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	08010860 	.word	0x08010860
 8003300:	08010864 	.word	0x08010864
 8003304:	20000685 	.word	0x20000685
 8003308:	0801087c 	.word	0x0801087c
 800330c:	08010888 	.word	0x08010888

08003310 <Write_SD_Card_Spectral>:

void Write_SD_Card_Spectral(rfm95_handle_t *handle, LSM303AGR *dev) {
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 8003318:	b08b      	sub	sp, #44	; 0x2c
 800331a:	af20      	add	r7, sp, #128	; 0x80
 800331c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003320:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003324:	6018      	str	r0, [r3, #0]
 8003326:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800332a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800332e:	6019      	str	r1, [r3, #0]
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8003330:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8003334:	f103 0308 	add.w	r3, r3, #8
 8003338:	2201      	movs	r2, #1
 800333a:	491a      	ldr	r1, [pc, #104]	; (80033a4 <Write_SD_Card_Spectral+0x94>)
 800333c:	4618      	mov	r0, r3
 800333e:	f009 f92d 	bl	800c59c <f_mount>
 8003342:	4603      	mov	r3, r0
 8003344:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003348:	f102 0223 	add.w	r2, r2, #35	; 0x23
 800334c:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK) {
 800334e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003352:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <Write_SD_Card_Spectral+0x66>
		myprintf("f_mount error (%i)\r\n", fres);
 800335c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003360:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	480f      	ldr	r0, [pc, #60]	; (80033a8 <Write_SD_Card_Spectral+0x98>)
 800336a:	f7ff f9a5 	bl	80026b8 <myprintf>
		errorDetected = true;
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <Write_SD_Card_Spectral+0x9c>)
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e26b      	b.n	800384e <Write_SD_Card_Spectral+0x53e>

	//Now let's try and write a file "write.txt"

	//BYTE readBuf[30];
	UINT bytesWrote;
	fres = f_open(&fil, "write.txt",
 8003376:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800337a:	f103 0318 	add.w	r3, r3, #24
 800337e:	2232      	movs	r2, #50	; 0x32
 8003380:	490b      	ldr	r1, [pc, #44]	; (80033b0 <Write_SD_Card_Spectral+0xa0>)
 8003382:	4618      	mov	r0, r3
 8003384:	f009 f950 	bl	800c628 <f_open>
 8003388:	4603      	mov	r3, r0
 800338a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800338e:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8003392:	7013      	strb	r3, [r2, #0]
	char data_packet[512];
	char data_packet_full[3840];
	int cx, cx1, cx2, cx3;
	int sl[4];

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003394:	2300      	movs	r3, #0
 8003396:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800339a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e0f9      	b.n	8003596 <Write_SD_Card_Spectral+0x286>
 80033a2:	bf00      	nop
 80033a4:	08010860 	.word	0x08010860
 80033a8:	08010864 	.word	0x08010864
 80033ac:	20000685 	.word	0x20000685
 80033b0:	0801087c 	.word	0x0801087c
		sl[i] = snprintf(data_packet_spectral[i], 768,
 80033b4:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80033b8:	f102 0208 	add.w	r2, r2, #8
 80033bc:	3a14      	subs	r2, #20
 80033be:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80033c2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	460b      	mov	r3, r1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	18d0      	adds	r0, r2, r3
				"%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;",
				handle->spectraldata_1[i].CLEAR, handle->spectraldata_1[i].NIR,
 80033d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80033e0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	337a      	adds	r3, #122	; 0x7a
 80033f2:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 80033f4:	469c      	mov	ip, r3
				handle->spectraldata_1[i].CLEAR, handle->spectraldata_1[i].NIR,
 80033f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80033fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003404:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	337c      	adds	r3, #124	; 0x7c
 8003416:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 8003418:	461c      	mov	r4, r3
				handle->spectraldata_1[i].channel1,
 800341a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800341e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003428:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3372      	adds	r3, #114	; 0x72
 800343a:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 800343c:	461d      	mov	r5, r3
				handle->spectraldata_1[i].channel2,
 800343e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003442:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800344c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3374      	adds	r3, #116	; 0x74
 800345e:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 8003460:	461e      	mov	r6, r3
				handle->spectraldata_1[i].channel3,
 8003462:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003466:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003470:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3376      	adds	r3, #118	; 0x76
 8003482:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 8003484:	653b      	str	r3, [r7, #80]	; 0x50
				handle->spectraldata_1[i].channel4,
 8003486:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800348a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003494:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3378      	adds	r3, #120	; 0x78
 80034a6:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
				handle->spectraldata_2[i].channel5,
 80034aa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	f507 5e07 	add.w	lr, r7, #8640	; 0x21c0
 80034b8:	f10e 0e24 	add.w	lr, lr, #36	; 0x24
 80034bc:	f8de 2000 	ldr.w	r2, [lr]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	33a2      	adds	r3, #162	; 0xa2
 80034cc:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40
				handle->spectraldata_2[i].channel6,
 80034d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	f507 5e07 	add.w	lr, r7, #8640	; 0x21c0
 80034de:	f10e 0e24 	add.w	lr, lr, #36	; 0x24
 80034e2:	f8de 2000 	ldr.w	r2, [lr]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	33a4      	adds	r3, #164	; 0xa4
 80034f2:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
				handle->spectraldata_2[i].channel7,
 80034f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80034fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	f507 5e07 	add.w	lr, r7, #8640	; 0x21c0
 8003504:	f10e 0e24 	add.w	lr, lr, #36	; 0x24
 8003508:	f8de 2000 	ldr.w	r2, [lr]
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	33a6      	adds	r3, #166	; 0xa6
 8003518:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
				handle->spectraldata_2[i].channel8);
 800351c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003520:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	f507 5e07 	add.w	lr, r7, #8640	; 0x21c0
 800352a:	f10e 0e24 	add.w	lr, lr, #36	; 0x24
 800352e:	f8de 2000 	ldr.w	r2, [lr]
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	33a8      	adds	r3, #168	; 0xa8
 800353e:	881b      	ldrh	r3, [r3, #0]
		sl[i] = snprintf(data_packet_spectral[i], 768,
 8003540:	9308      	str	r3, [sp, #32]
 8003542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003544:	9207      	str	r2, [sp, #28]
 8003546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003548:	9206      	str	r2, [sp, #24]
 800354a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354c:	9205      	str	r2, [sp, #20]
 800354e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003550:	9204      	str	r2, [sp, #16]
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	9602      	str	r6, [sp, #8]
 8003558:	9501      	str	r5, [sp, #4]
 800355a:	9400      	str	r4, [sp, #0]
 800355c:	4663      	mov	r3, ip
 800355e:	4abf      	ldr	r2, [pc, #764]	; (800385c <Write_SD_Card_Spectral+0x54c>)
 8003560:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003564:	f00a feb2 	bl	800e2cc <sniprintf>
 8003568:	4601      	mov	r1, r0
 800356a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800356e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003572:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003576:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003580:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003584:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003590:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800359a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	f77f af07 	ble.w	80033b4 <Write_SD_Card_Spectral+0xa4>
		//fres = f_write(&fil, data_packet_spectral, cx, &bytesWrote);
	}
	cx2 = snprintf(data_packet, 512,
			"%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%lu;%s;%lu;%s;%d;%d;%s",
			handle->tem_innen, handle->tem_aussen, handle->rph_innen,
 80035a6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
	cx2 = snprintf(data_packet, 512,
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffc7 	bl	8000548 <__aeabi_f2d>
 80035ba:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			handle->tem_innen, handle->tem_aussen, handle->rph_innen,
 80035be:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	cx2 = snprintf(data_packet, 512,
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ffbb 	bl	8000548 <__aeabi_f2d>
 80035d2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			handle->tem_innen, handle->tem_aussen, handle->rph_innen,
 80035d6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
	cx2 = snprintf(data_packet, 512,
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ffaf 	bl	8000548 <__aeabi_f2d>
 80035ea:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			handle->rph_aussen, dev->acc[0], dev->acc[1], dev->acc[2],
 80035ee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80035f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	cx2 = snprintf(data_packet, 512,
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ffa3 	bl	8000548 <__aeabi_f2d>
 8003602:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			handle->rph_aussen, dev->acc[0], dev->acc[1], dev->acc[2],
 8003606:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800360a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
	cx2 = snprintf(data_packet, 512,
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ff98 	bl	8000548 <__aeabi_f2d>
 8003618:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			handle->rph_aussen, dev->acc[0], dev->acc[1], dev->acc[2],
 800361c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003620:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
	cx2 = snprintf(data_packet, 512,
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ff8d 	bl	8000548 <__aeabi_f2d>
 800362e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			handle->rph_aussen, dev->acc[0], dev->acc[1], dev->acc[2],
 8003632:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003636:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
	cx2 = snprintf(data_packet, 512,
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff82 	bl	8000548 <__aeabi_f2d>
 8003644:	e9c7 0108 	strd	r0, r1, [r7, #32]
			dev->mag[0], dev->mag[1], dev->mag[2], dev->pitch, dev->roll,
 8003648:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800364c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
	cx2 = snprintf(data_packet, 512,
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff77 	bl	8000548 <__aeabi_f2d>
 800365a:	e9c7 0106 	strd	r0, r1, [r7, #24]
			dev->mag[0], dev->mag[1], dev->mag[2], dev->pitch, dev->roll,
 800365e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003662:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cx2 = snprintf(data_packet, 512,
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6c 	bl	8000548 <__aeabi_f2d>
 8003670:	e9c7 0104 	strd	r0, r1, [r7, #16]
			dev->mag[0], dev->mag[1], dev->mag[2], dev->pitch, dev->roll,
 8003674:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003678:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	cx2 = snprintf(data_packet, 512,
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc ff61 	bl	8000548 <__aeabi_f2d>
 8003686:	e9c7 0102 	strd	r0, r1, [r7, #8]
			dev->mag[0], dev->mag[1], dev->mag[2], dev->pitch, dev->roll,
 800368a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800368e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
	cx2 = snprintf(data_packet, 512,
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc ff56 	bl	8000548 <__aeabi_f2d>
 800369c:	4682      	mov	sl, r0
 800369e:	468b      	mov	fp, r1
			dev->mag[0], dev->mag[1], dev->mag[2], dev->pitch, dev->roll,
 80036a0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
	cx2 = snprintf(data_packet, 512,
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc ff4b 	bl	8000548 <__aeabi_f2d>
 80036b2:	4680      	mov	r8, r0
 80036b4:	4689      	mov	r9, r1
 80036b6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	607b      	str	r3, [r7, #4]
			handle->latitude, handle->latitude_or, handle->longitude,
 80036c4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f103 0660 	add.w	r6, r3, #96	; 0x60
	cx2 = snprintf(data_packet, 512,
 80036d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d5d      	ldr	r5, [r3, #84]	; 0x54
			handle->longitude_or, handle->altitude, handle->gain, handle->time);
 80036de:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f103 0458 	add.w	r4, r3, #88	; 0x58
	cx2 = snprintf(data_packet, 512,
 80036ec:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
			handle->longitude_or, handle->altitude, handle->gain, handle->time);
 80036f8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80036fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
	cx2 = snprintf(data_packet, 512,
 8003706:	4619      	mov	r1, r3
			handle->longitude_or, handle->altitude, handle->gain, handle->time);
 8003708:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800370c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3368      	adds	r3, #104	; 0x68
	cx2 = snprintf(data_packet, 512,
 8003714:	f607 7088 	addw	r0, r7, #3976	; 0xf88
 8003718:	3814      	subs	r0, #20
 800371a:	931e      	str	r3, [sp, #120]	; 0x78
 800371c:	911d      	str	r1, [sp, #116]	; 0x74
 800371e:	921c      	str	r2, [sp, #112]	; 0x70
 8003720:	941b      	str	r4, [sp, #108]	; 0x6c
 8003722:	951a      	str	r5, [sp, #104]	; 0x68
 8003724:	9619      	str	r6, [sp, #100]	; 0x64
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	9318      	str	r3, [sp, #96]	; 0x60
 800372a:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 800372e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8003732:	ed97 7b02 	vldr	d7, [r7, #8]
 8003736:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800373a:	ed97 7b04 	vldr	d7, [r7, #16]
 800373e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003742:	ed97 7b06 	vldr	d7, [r7, #24]
 8003746:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800374a:	ed97 7b08 	vldr	d7, [r7, #32]
 800374e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003752:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003756:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800375a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800375e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003762:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800376a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800376e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003772:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003776:	ed8d 7b02 	vstr	d7, [sp, #8]
 800377a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800377e:	ed8d 7b00 	vstr	d7, [sp]
 8003782:	4a37      	ldr	r2, [pc, #220]	; (8003860 <Write_SD_Card_Spectral+0x550>)
 8003784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003788:	f00a fda0 	bl	800e2cc <sniprintf>
 800378c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003790:	f103 031c 	add.w	r3, r3, #28
 8003794:	6018      	str	r0, [r3, #0]

	cx3 = sniprintf(data_packet_full, 3840, "%.*s%.*s,%.*s,%.*s,%.*s;END \r\n",
 8003796:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800379a:	3834      	subs	r0, #52	; 0x34
 800379c:	f607 7388 	addw	r3, r7, #3976	; 0xf88
 80037a0:	3b14      	subs	r3, #20
 80037a2:	9308      	str	r3, [sp, #32]
 80037a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a8:	9307      	str	r3, [sp, #28]
 80037aa:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037ae:	f103 0308 	add.w	r3, r3, #8
 80037b2:	3b14      	subs	r3, #20
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	9306      	str	r3, [sp, #24]
 80037ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037c4:	f103 0308 	add.w	r3, r3, #8
 80037c8:	3b14      	subs	r3, #20
 80037ca:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80037ce:	9304      	str	r3, [sp, #16]
 80037d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037d4:	9303      	str	r3, [sp, #12]
 80037d6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037da:	f103 0308 	add.w	r3, r3, #8
 80037de:	3b14      	subs	r3, #20
 80037e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80037e4:	9302      	str	r3, [sp, #8]
 80037e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80037f0:	f103 0308 	add.w	r3, r3, #8
 80037f4:	3b14      	subs	r3, #20
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <Write_SD_Card_Spectral+0x554>)
 80037fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8003802:	f00a fd63 	bl	800e2cc <sniprintf>
 8003806:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800380a:	f103 0318 	add.w	r3, r3, #24
 800380e:	6018      	str	r0, [r3, #0]
			(int) sizeof data_packet_spectral[0], data_packet_spectral[0],
			(int) sizeof data_packet_spectral[1], data_packet_spectral[1],
			(int) sizeof data_packet_spectral[2], data_packet_spectral[2],
			(int) sizeof data_packet_spectral[3], data_packet_spectral[3],
			(int) sizeof data_packet, data_packet);
	fres = f_write(&fil, data_packet_full, cx3, &bytesWrote);
 8003810:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003814:	f103 0318 	add.w	r3, r3, #24
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800381e:	f103 0314 	add.w	r3, r3, #20
 8003822:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003826:	3934      	subs	r1, #52	; 0x34
 8003828:	f507 50eb 	add.w	r0, r7, #7520	; 0x1d60
 800382c:	f100 0018 	add.w	r0, r0, #24
 8003830:	f009 f8b8 	bl	800c9a4 <f_write>
 8003834:	4603      	mov	r3, r0
 8003836:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800383a:	f102 0223 	add.w	r2, r2, #35	; 0x23
 800383e:	7013      	strb	r3, [r2, #0]
//	cx = snprintf(data_packet_full, 2816, "\r\n");
//	fres = f_write(&fil, data_packet, cx, &bytesWrote);
	f_close(&fil);
 8003840:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8003844:	f103 0318 	add.w	r3, r3, #24
 8003848:	4618      	mov	r0, r3
 800384a:	f009 fa9e 	bl	800cd8a <f_close>

}
 800384e:	f507 5707 	add.w	r7, r7, #8640	; 0x21c0
 8003852:	372c      	adds	r7, #44	; 0x2c
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	080109a8 	.word	0x080109a8
 8003860:	080109c8 	.word	0x080109c8
 8003864:	08010a04 	.word	0x08010a04

08003868 <read_temp_innen>:

	f_close(&fil);
	counter++;
}

read_temp_innen(rfm95_handle_t *handle) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
	PCA9847_SetChannel(&multiplexer, 5);
 8003870:	2105      	movs	r1, #5
 8003872:	4844      	ldr	r0, [pc, #272]	; (8003984 <read_temp_innen+0x11c>)
 8003874:	f001 fcc2 	bl	80051fc <PCA9847_SetChannel>
	HAL_StatusTypeDef status;
	uint8_t value[6] = { 0 };
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	2300      	movs	r3, #0
 800387e:	823b      	strh	r3, [r7, #16]
	uint8_t cmd = 0xFD;
 8003880:	23fd      	movs	r3, #253	; 0xfd
 8003882:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &cmd, 1, 10);
 8003884:	f107 020b 	add.w	r2, r7, #11
 8003888:	230a      	movs	r3, #10
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	2188      	movs	r1, #136	; 0x88
 8003890:	483d      	ldr	r0, [pc, #244]	; (8003988 <read_temp_innen+0x120>)
 8003892:	f002 f9d9 	bl	8005c48 <HAL_I2C_Master_Transmit>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	HAL_Delay(10);
 800389c:	200a      	movs	r0, #10
 800389e:	f001 fe19 	bl	80054d4 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, 0x44 << 1, value, 6, 10);
 80038a2:	f107 020c 	add.w	r2, r7, #12
 80038a6:	230a      	movs	r3, #10
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2306      	movs	r3, #6
 80038ac:	2188      	movs	r1, #136	; 0x88
 80038ae:	4836      	ldr	r0, [pc, #216]	; (8003988 <read_temp_innen+0x120>)
 80038b0:	f002 fabe 	bl	8005e30 <HAL_I2C_Master_Receive>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	float t_ticks = value[0] * 256 + value[1];
 80038ba:	7b3b      	ldrb	r3, [r7, #12]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	7b7a      	ldrb	r2, [r7, #13]
 80038c0:	4413      	add	r3, r2
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float checksum_t = value[2];
 80038ce:	7bbb      	ldrb	r3, [r7, #14]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d8:	edc7 7a08 	vstr	s15, [r7, #32]
	float rh_ticks = value[3] * 256 + value[4];
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	7c3a      	ldrb	r2, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ec:	edc7 7a07 	vstr	s15, [r7, #28]
	float checksum_rh = value[5];
 80038f0:	7c7b      	ldrb	r3, [r7, #17]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_degC = -45 + 175 * t_ticks / 65535;
 80038fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003902:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800398c <read_temp_innen+0x124>
 8003906:	ee27 7a87 	vmul.f32	s14, s15, s14
 800390a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003990 <read_temp_innen+0x128>
 800390e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003912:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003994 <read_temp_innen+0x12c>
 8003916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800391a:	edc7 7a05 	vstr	s15, [r7, #20]
	float rh_pRH = -6 + 125 * rh_ticks / 65535;
 800391e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003922:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003998 <read_temp_innen+0x130>
 8003926:	ee27 7a87 	vmul.f32	s14, s15, s14
 800392a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003990 <read_temp_innen+0x128>
 800392e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003932:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800393a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if (rh_pRH > 100) {
 800393e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003942:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800399c <read_temp_innen+0x134>
 8003946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	dd01      	ble.n	8003954 <read_temp_innen+0xec>
		rh_pRH = 100;
 8003950:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <read_temp_innen+0x138>)
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (rh_pRH < 0) {
 8003954:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	d502      	bpl.n	8003968 <read_temp_innen+0x100>
		rh_pRH = 0;
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	handle->tem_innen = t_degC;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	handle->rph_innen = rh_pRH;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 8003978:	bf00      	nop
 800397a:	4618      	mov	r0, r3
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000640 	.word	0x20000640
 8003988:	20000454 	.word	0x20000454
 800398c:	432f0000 	.word	0x432f0000
 8003990:	477fff00 	.word	0x477fff00
 8003994:	42340000 	.word	0x42340000
 8003998:	42fa0000 	.word	0x42fa0000
 800399c:	42c80000 	.word	0x42c80000
 80039a0:	42c80000 	.word	0x42c80000

080039a4 <read_temp_aussen>:

read_temp_aussen(rfm95_handle_t *handle) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	; 0x38
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
	PCA9847_SetChannel(&multiplexer, 4);
 80039ac:	2104      	movs	r1, #4
 80039ae:	4844      	ldr	r0, [pc, #272]	; (8003ac0 <read_temp_aussen+0x11c>)
 80039b0:	f001 fc24 	bl	80051fc <PCA9847_SetChannel>
	HAL_StatusTypeDef status;
	uint8_t value[6] = { 0 };
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	2300      	movs	r3, #0
 80039ba:	823b      	strh	r3, [r7, #16]
	uint8_t cmd = 0xFD;
 80039bc:	23fd      	movs	r3, #253	; 0xfd
 80039be:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &cmd, 1, 10);
 80039c0:	f107 020b 	add.w	r2, r7, #11
 80039c4:	230a      	movs	r3, #10
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2301      	movs	r3, #1
 80039ca:	2188      	movs	r1, #136	; 0x88
 80039cc:	483d      	ldr	r0, [pc, #244]	; (8003ac4 <read_temp_aussen+0x120>)
 80039ce:	f002 f93b 	bl	8005c48 <HAL_I2C_Master_Transmit>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	HAL_Delay(10);
 80039d8:	200a      	movs	r0, #10
 80039da:	f001 fd7b 	bl	80054d4 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, 0x44 << 1, value, 6, 10);
 80039de:	f107 020c 	add.w	r2, r7, #12
 80039e2:	230a      	movs	r3, #10
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2306      	movs	r3, #6
 80039e8:	2188      	movs	r1, #136	; 0x88
 80039ea:	4836      	ldr	r0, [pc, #216]	; (8003ac4 <read_temp_aussen+0x120>)
 80039ec:	f002 fa20 	bl	8005e30 <HAL_I2C_Master_Receive>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	float t_ticks = value[0] * 256 + value[1];
 80039f6:	7b3b      	ldrb	r3, [r7, #12]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	7b7a      	ldrb	r2, [r7, #13]
 80039fc:	4413      	add	r3, r2
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float checksum_t = value[2];
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a14:	edc7 7a08 	vstr	s15, [r7, #32]
	float rh_ticks = value[3] * 256 + value[4];
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	7c3a      	ldrb	r2, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a28:	edc7 7a07 	vstr	s15, [r7, #28]
	float checksum_rh = value[5];
 8003a2c:	7c7b      	ldrb	r3, [r7, #17]
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_degC = -45 + 175 * t_ticks / 65535;
 8003a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a3e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003ac8 <read_temp_aussen+0x124>
 8003a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a46:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003acc <read_temp_aussen+0x128>
 8003a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a4e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003ad0 <read_temp_aussen+0x12c>
 8003a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a56:	edc7 7a05 	vstr	s15, [r7, #20]
	float rh_pRH = -6 + 125 * rh_ticks / 65535;
 8003a5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a5e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ad4 <read_temp_aussen+0x130>
 8003a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a66:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003acc <read_temp_aussen+0x128>
 8003a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a6e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if (rh_pRH > 100) {
 8003a7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a7e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ad8 <read_temp_aussen+0x134>
 8003a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	dd01      	ble.n	8003a90 <read_temp_aussen+0xec>
		rh_pRH = 100;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <read_temp_aussen+0x138>)
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (rh_pRH < 0) {
 8003a90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	d502      	bpl.n	8003aa4 <read_temp_aussen+0x100>
		rh_pRH = 0;
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	handle->tem_aussen = t_degC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	handle->rph_aussen = rh_pRH;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 8003ab4:	bf00      	nop
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3730      	adds	r7, #48	; 0x30
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000640 	.word	0x20000640
 8003ac4:	20000454 	.word	0x20000454
 8003ac8:	432f0000 	.word	0x432f0000
 8003acc:	477fff00 	.word	0x477fff00
 8003ad0:	42340000 	.word	0x42340000
 8003ad4:	42fa0000 	.word	0x42fa0000
 8003ad8:	42c80000 	.word	0x42c80000
 8003adc:	42c80000 	.word	0x42c80000

08003ae0 <check_gain>:

void check_gain(rfm95_handle_t *handle) {
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b08e      	sub	sp, #56	; 0x38
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	61f8      	str	r0, [r7, #28]
	uint64_t MAXVALUE = 60000;
 8003aea:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t MINVALUE = 10;
 8003af6:	f04f 020a 	mov.w	r2, #10
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	bool setGain_up = false;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool setGain_down = false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003b0e:	2300      	movs	r3, #0
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
 8003b12:	e07f      	b.n	8003c14 <check_gain+0x134>
		if (handle->spectraldata_1[i].channel2 > MAXVALUE
 8003b14:	69f9      	ldr	r1, [r7, #28]
 8003b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3374      	adds	r3, #116	; 0x74
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b32:	42a2      	cmp	r2, r4
 8003b34:	41ab      	sbcs	r3, r5
 8003b36:	d325      	bcc.n	8003b84 <check_gain+0xa4>
				|| handle->spectraldata_1[i].channel3 > MAXVALUE
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3376      	adds	r3, #118	; 0x76
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4698      	mov	r8, r3
 8003b50:	4691      	mov	r9, r2
 8003b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b56:	4542      	cmp	r2, r8
 8003b58:	eb73 0309 	sbcs.w	r3, r3, r9
 8003b5c:	d312      	bcc.n	8003b84 <check_gain+0xa4>
				|| handle->spectraldata_1[i].channel4 > MAXVALUE) {
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3378      	adds	r3, #120	; 0x78
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	469a      	mov	sl, r3
 8003b76:	4693      	mov	fp, r2
 8003b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b7c:	4552      	cmp	r2, sl
 8003b7e:	eb73 030b 	sbcs.w	r3, r3, fp
 8003b82:	d202      	bcs.n	8003b8a <check_gain+0xaa>
			setGain_down = true;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		}
		if (handle->spectraldata_1[i].channel2 < MINVALUE
 8003b8a:	69f9      	ldr	r1, [r7, #28]
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	3374      	adds	r3, #116	; 0x74
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	617a      	str	r2, [r7, #20]
 8003ba4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	4291      	cmp	r1, r2
 8003bac:	6979      	ldr	r1, [r7, #20]
 8003bae:	eb71 0303 	sbcs.w	r3, r1, r3
 8003bb2:	d329      	bcc.n	8003c08 <check_gain+0x128>
				|| handle->spectraldata_1[i].channel3 < MINVALUE
 8003bb4:	69f9      	ldr	r1, [r7, #28]
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3376      	adds	r3, #118	; 0x76
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	60fa      	str	r2, [r7, #12]
 8003bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4291      	cmp	r1, r2
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	eb71 0303 	sbcs.w	r3, r1, r3
 8003bdc:	d314      	bcc.n	8003c08 <check_gain+0x128>
				|| handle->spectraldata_1[i].channel4 < MINVALUE) {
 8003bde:	69f9      	ldr	r1, [r7, #28]
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3378      	adds	r3, #120	; 0x78
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4291      	cmp	r1, r2
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c06:	d202      	bcs.n	8003c0e <check_gain+0x12e>
			setGain_up = true;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	3301      	adds	r3, #1
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	f77f af7c 	ble.w	8003b14 <check_gain+0x34>

		}

	}
	if (setGain_up == true && setGain_down == false) {
 8003c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <check_gain+0x172>
 8003c24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00f      	beq.n	8003c52 <check_gain+0x172>
		if (handle->gain != 10) {
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8003c38:	2b0a      	cmp	r3, #10
 8003c3a:	d00a      	beq.n	8003c52 <check_gain+0x172>
			handle->gain = handle->gain + 1;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8003c42:	3301      	adds	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
			Setup_Gain(handle);
 8003c4c:	69f8      	ldr	r0, [r7, #28]
 8003c4e:	f7ff faa5 	bl	800319c <Setup_Gain>
		}
	}
	if (setGain_down == true && setGain_up == false) {
 8003c52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <check_gain+0x1a8>
 8003c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00f      	beq.n	8003c88 <check_gain+0x1a8>
		if (handle->gain != 0) {
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <check_gain+0x1a8>
			handle->gain = handle->gain - 1;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
			Setup_Gain(handle);
 8003c82:	69f8      	ldr	r0, [r7, #28]
 8003c84:	f7ff fa8a 	bl	800319c <Setup_Gain>
		}

	}
	setGain_down = false;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	setGain_up = false;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

}
 8003c94:	bf00      	nop
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ca0 <check_spectral>:
void check_spectral(rfm95_handle_t *handle) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e03c      	b.n	8003d28 <check_spectral+0x88>
		if (handle->spectraldata_1[i].CLEAR == 0
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	337a      	adds	r3, #122	; 0x7a
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d12e      	bne.n	8003d22 <check_spectral+0x82>
				&& handle->spectraldata_1[i].channel1 == 0
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3372      	adds	r3, #114	; 0x72
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d123      	bne.n	8003d22 <check_spectral+0x82>
				&& handle->spectraldata_1[i].channel2 == 0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3374      	adds	r3, #116	; 0x74
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d118      	bne.n	8003d22 <check_spectral+0x82>
				&& handle->spectraldata_1[i].channel3 == 0
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3376      	adds	r3, #118	; 0x76
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <check_spectral+0x82>
				&& handle->spectraldata_1[i].channel4 == 0) {
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3378      	adds	r3, #120	; 0x78
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <check_spectral+0x82>
			errorDetected = true;
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <check_spectral+0x9c>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	ddbf      	ble.n	8003cae <check_spectral+0xe>

		}
	}
}
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000685 	.word	0x20000685

08003d40 <check_imu>:
void check_imu(LSM303AGR *dev) {
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	static bool last_time_was_zero;

	if (dev->acc[0] == 0 && dev->acc[1] == 0 && dev->acc[2] == 0) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	d11e      	bne.n	8003d96 <check_imu+0x56>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	d116      	bne.n	8003d96 <check_imu+0x56>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d76:	d10e      	bne.n	8003d96 <check_imu+0x56>
		if (last_time_was_zero == true) {
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <check_imu+0x6c>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d006      	beq.n	8003d8e <check_imu+0x4e>
			last_time_was_zero = false;
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <check_imu+0x6c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
			errorDetected = true;
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <check_imu+0x70>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
		if (last_time_was_zero == true) {
 8003d8c:	e007      	b.n	8003d9e <check_imu+0x5e>
		} else {
			last_time_was_zero = false;
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <check_imu+0x6c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
		if (last_time_was_zero == true) {
 8003d94:	e003      	b.n	8003d9e <check_imu+0x5e>
		}
	} else {
		last_time_was_zero = false;
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <check_imu+0x6c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
	}

}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000788 	.word	0x20000788
 8003db0:	20000685 	.word	0x20000685

08003db4 <check_stats>:

void check_stats() {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	check_spectral(&rfm95_handle);
 8003db8:	4803      	ldr	r0, [pc, #12]	; (8003dc8 <check_stats+0x14>)
 8003dba:	f7ff ff71 	bl	8003ca0 <check_spectral>
	check_imu(&rfm95_handle);
 8003dbe:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <check_stats+0x14>)
 8003dc0:	f7ff ffbe 	bl	8003d40 <check_imu>

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000120 	.word	0x20000120

08003dcc <fail_handler>:

void fail_handler() {
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
	static uint64_t last_time = 0;
	uint64_t time = HAL_GetTick();
 8003dd4:	f001 fb72 	bl	80054bc <HAL_GetTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2200      	movs	r2, #0
 8003ddc:	469a      	mov	sl, r3
 8003dde:	4693      	mov	fp, r2
 8003de0:	e9c7 ab00 	strd	sl, fp, [r7]
	// the timing stuff needs to be checked
	if (errorDetected == true && (time - last_time) > 30000) {
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <fail_handler+0x80>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d029      	beq.n	8003e40 <fail_handler+0x74>
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <fail_handler+0x84>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003df6:	1a84      	subs	r4, r0, r2
 8003df8:	eb61 0503 	sbc.w	r5, r1, r3
 8003dfc:	f247 5331 	movw	r3, #30001	; 0x7531
 8003e00:	429c      	cmp	r4, r3
 8003e02:	f175 0300 	sbcs.w	r3, r5, #0
 8003e06:	d31b      	bcc.n	8003e40 <fail_handler+0x74>
		HAL_GPIO_WritePin(POWER_SW_GPIO_Port, POWER_SW_Pin, GPIO_PIN_SET);
 8003e08:	2201      	movs	r2, #1
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	4811      	ldr	r0, [pc, #68]	; (8003e54 <fail_handler+0x88>)
 8003e0e:	f001 fe59 	bl	8005ac4 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8003e12:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e16:	f001 fb5d 	bl	80054d4 <HAL_Delay>
		HAL_GPIO_WritePin(POWER_SW_GPIO_Port, POWER_SW_Pin, GPIO_PIN_RESET);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	480d      	ldr	r0, [pc, #52]	; (8003e54 <fail_handler+0x88>)
 8003e20:	f001 fe50 	bl	8005ac4 <HAL_GPIO_WritePin>
		Setup();
 8003e24:	f7ff f968 	bl	80030f8 <Setup>
		errorDetected = false;
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <fail_handler+0x80>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
		last_time = HAL_GetTick();
 8003e2e:	f001 fb45 	bl	80054bc <HAL_GetTick>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2200      	movs	r2, #0
 8003e36:	4698      	mov	r8, r3
 8003e38:	4691      	mov	r9, r2
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <fail_handler+0x84>)
 8003e3c:	e9c3 8900 	strd	r8, r9, [r3]
	}

}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000685 	.word	0x20000685
 8003e50:	20000790 	.word	0x20000790
 8003e54:	48000800 	.word	0x48000800

08003e58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5c:	b672      	cpsid	i
}
 8003e5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e60:	e7fe      	b.n	8003e60 <Error_Handler+0x8>
	...

08003e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6613      	str	r3, [r2, #96]	; 0x60
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_MspInit+0x44>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b0aa      	sub	sp, #168	; 0xa8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec4:	f107 0310 	add.w	r3, r7, #16
 8003ec8:	2284      	movs	r2, #132	; 0x84
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f009 fba3 	bl	800d618 <memset>
  if(hi2c->Instance==I2C1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_I2C_MspInit+0xb0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d13b      	bne.n	8003f54 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003edc:	2340      	movs	r3, #64	; 0x40
 8003ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 fce1 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ef4:	f7ff ffb0 	bl	8003e58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f04:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f18:	2312      	movs	r3, #18
 8003f1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f34:	4619      	mov	r1, r3
 8003f36:	480b      	ldr	r0, [pc, #44]	; (8003f64 <HAL_I2C_MspInit+0xb8>)
 8003f38:	f001 fc02 	bl	8005740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f46:	6593      	str	r3, [r2, #88]	; 0x58
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_I2C_MspInit+0xb4>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f54:	bf00      	nop
 8003f56:	37a8      	adds	r7, #168	; 0xa8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40005400 	.word	0x40005400
 8003f60:	40021000 	.word	0x40021000
 8003f64:	48000400 	.word	0x48000400

08003f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	; 0x30
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <HAL_SPI_MspInit+0xdc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d129      	bne.n	8003fde <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f94:	6613      	str	r3, [r2, #96]	; 0x60
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a28      	ldr	r2, [pc, #160]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fba:	23e0      	movs	r3, #224	; 0xe0
 8003fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fca:	2305      	movs	r3, #5
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 031c 	add.w	r3, r7, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd8:	f001 fbb2 	bl	8005740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003fdc:	e02d      	b.n	800403a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_SPI_MspInit+0xe4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d128      	bne.n	800403a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_SPI_MspInit+0xe0>)
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MISO_Pin|LORA_MOSI_Pin;
 8004018:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800401c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800402a:	2305      	movs	r3, #5
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402e:	f107 031c 	add.w	r3, r7, #28
 8004032:	4619      	mov	r1, r3
 8004034:	4806      	ldr	r0, [pc, #24]	; (8004050 <HAL_SPI_MspInit+0xe8>)
 8004036:	f001 fb83 	bl	8005740 <HAL_GPIO_Init>
}
 800403a:	bf00      	nop
 800403c:	3730      	adds	r7, #48	; 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40013000 	.word	0x40013000
 8004048:	40021000 	.word	0x40021000
 800404c:	40003800 	.word	0x40003800
 8004050:	48000400 	.word	0x48000400

08004054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <HAL_TIM_Base_MspInit+0x44>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_TIM_Base_MspInit+0x48>)
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_TIM_Base_MspInit+0x48>)
 800406c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004070:	6613      	str	r3, [r2, #96]	; 0x60
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_TIM_Base_MspInit+0x48>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	2019      	movs	r0, #25
 8004084:	f001 fb25 	bl	80056d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004088:	2019      	movs	r0, #25
 800408a:	f001 fb3e 	bl	800570a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40014400 	.word	0x40014400
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b0aa      	sub	sp, #168	; 0xa8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	2284      	movs	r2, #132	; 0x84
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f009 faa9 	bl	800d618 <memset>
  if(huart->Instance==UART4)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_UART_MspInit+0xb0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d13b      	bne.n	8004148 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80040d0:	2308      	movs	r3, #8
 80040d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80040d4:	2300      	movs	r3, #0
 80040d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f003 fbe7 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040e8:	f7ff feb6 	bl	8003e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_UART_MspInit+0xb4>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_UART_MspInit+0xb4>)
 80040f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
 80040f8:	4b16      	ldr	r3, [pc, #88]	; (8004154 <HAL_UART_MspInit+0xb4>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_UART_MspInit+0xb4>)
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <HAL_UART_MspInit+0xb4>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_UART_MspInit+0xb4>)
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800411c:	2303      	movs	r3, #3
 800411e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412e:	2303      	movs	r3, #3
 8004130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004134:	2308      	movs	r3, #8
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800413e:	4619      	mov	r1, r3
 8004140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004144:	f001 fafc 	bl	8005740 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8004148:	bf00      	nop
 800414a:	37a8      	adds	r7, #168	; 0xa8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40004c00 	.word	0x40004c00
 8004154:	40021000 	.word	0x40021000

08004158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800415c:	e7fe      	b.n	800415c <NMI_Handler+0x4>

0800415e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004162:	e7fe      	b.n	8004162 <HardFault_Handler+0x4>

08004164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <MemManage_Handler+0x4>

0800416a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416e:	e7fe      	b.n	800416e <BusFault_Handler+0x4>

08004170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004174:	e7fe      	b.n	8004174 <UsageFault_Handler+0x4>

08004176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a4:	f001 f976 	bl	8005494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80041b2:	f004 ffe1 	bl	8009178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000570 	.word	0x20000570

080041c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
	return 1;
 80041c4:	2301      	movs	r3, #1
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_kill>:

int _kill(int pid, int sig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041da:	f009 f9d3 	bl	800d584 <__errno>
 80041de:	4603      	mov	r3, r0
 80041e0:	2216      	movs	r2, #22
 80041e2:	601a      	str	r2, [r3, #0]
	return -1;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_exit>:

void _exit (int status)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041f8:	f04f 31ff 	mov.w	r1, #4294967295
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ffe7 	bl	80041d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004202:	e7fe      	b.n	8004202 <_exit+0x12>

08004204 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e00a      	b.n	800422c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004216:	f3af 8000 	nop.w
 800421a:	4601      	mov	r1, r0
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	60ba      	str	r2, [r7, #8]
 8004222:	b2ca      	uxtb	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	dbf0      	blt.n	8004216 <_read+0x12>
	}

return len;
 8004234:	687b      	ldr	r3, [r7, #4]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e009      	b.n	8004264 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	60ba      	str	r2, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3301      	adds	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	dbf1      	blt.n	8004250 <_write+0x12>
	}
	return len;
 800426c:	687b      	ldr	r3, [r7, #4]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <_close>:

int _close(int file)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	return -1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800429e:	605a      	str	r2, [r3, #4]
	return 0;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <_isatty>:

int _isatty(int file)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
	return 1;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	return 0;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042e8:	4a14      	ldr	r2, [pc, #80]	; (800433c <_sbrk+0x5c>)
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <_sbrk+0x60>)
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <_sbrk+0x64>)
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <_sbrk+0x68>)
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <_sbrk+0x64>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d207      	bcs.n	8004320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004310:	f009 f938 	bl	800d584 <__errno>
 8004314:	4603      	mov	r3, r0
 8004316:	220c      	movs	r2, #12
 8004318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	e009      	b.n	8004334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004320:	4b08      	ldr	r3, [pc, #32]	; (8004344 <_sbrk+0x64>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <_sbrk+0x64>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <_sbrk+0x64>)
 8004330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20018000 	.word	0x20018000
 8004340:	00000400 	.word	0x00000400
 8004344:	20000798 	.word	0x20000798
 8004348:	20000800 	.word	0x20000800

0800434c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <SystemInit+0x20>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4a05      	ldr	r2, [pc, #20]	; (800436c <SystemInit+0x20>)
 8004358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800435c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004374:	f7ff ffea 	bl	800434c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004378:	480c      	ldr	r0, [pc, #48]	; (80043ac <LoopForever+0x6>)
  ldr r1, =_edata
 800437a:	490d      	ldr	r1, [pc, #52]	; (80043b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800437c:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <LoopForever+0xe>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004380:	e002      	b.n	8004388 <LoopCopyDataInit>

08004382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004386:	3304      	adds	r3, #4

08004388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800438c:	d3f9      	bcc.n	8004382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004390:	4c0a      	ldr	r4, [pc, #40]	; (80043bc <LoopForever+0x16>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004394:	e001      	b.n	800439a <LoopFillZerobss>

08004396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004398:	3204      	adds	r2, #4

0800439a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800439c:	d3fb      	bcc.n	8004396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800439e:	f009 f909 	bl	800d5b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043a2:	f7fe f9a5 	bl	80026f0 <main>

080043a6 <LoopForever>:

LoopForever:
    b LoopForever
 80043a6:	e7fe      	b.n	80043a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80043a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80043ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b0:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 80043b4:	08011148 	.word	0x08011148
  ldr r2, =_sbss
 80043b8:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80043bc:	200007fc 	.word	0x200007fc

080043c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043c0:	e7fe      	b.n	80043c0 <ADC1_2_IRQHandler>
	...

080043c4 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <DEV_I2C_Init+0x24>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 80043d4:	4a05      	ldr	r2, [pc, #20]	; (80043ec <DEV_I2C_Init+0x28>)
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	7013      	strb	r3, [r2, #0]
#endif
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000079c 	.word	0x2000079c
 80043ec:	2000079d 	.word	0x2000079d

080043f0 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	4603      	mov	r3, r0
 80043f8:	460a      	mov	r2, r1
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8004400:	2300      	movs	r3, #0
 8004402:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8004404:	79bb      	ldrb	r3, [r7, #6]
 8004406:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <I2C_Write_Byte+0x40>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b299      	uxth	r1, r3
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	b29a      	uxth	r2, r3
 8004412:	2320      	movs	r3, #32
 8004414:	9302      	str	r3, [sp, #8]
 8004416:	2301      	movs	r3, #1
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2301      	movs	r3, #1
 8004422:	4804      	ldr	r0, [pc, #16]	; (8004434 <I2C_Write_Byte+0x44>)
 8004424:	f001 fdfa 	bl	800601c <HAL_I2C_Mem_Write>
#endif
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000079d 	.word	0x2000079d
 8004434:	20000454 	.word	0x20000454

08004438 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af04      	add	r7, sp, #16
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8004442:	2300      	movs	r3, #0
 8004444:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <I2C_Read_Byte+0x3c>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	b299      	uxth	r1, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	b29a      	uxth	r2, r3
 8004454:	2320      	movs	r3, #32
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	2301      	movs	r3, #1
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2301      	movs	r3, #1
 8004464:	4804      	ldr	r0, [pc, #16]	; (8004478 <I2C_Read_Byte+0x40>)
 8004466:	f001 feed 	bl	8006244 <HAL_I2C_Mem_Read>
	return Buf[0];
 800446a:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2000079d 	.word	0x2000079d
 8004478:	20000454 	.word	0x20000454

0800447c <AS7341_Read_Byte>:
 function:	Read one byte of data to AS7341 via I2C
 parameter:
 Addr: Register address
 Info:
 ******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
	return I2C_Read_Byte(Addr);
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ffd5 	bl	8004438 <I2C_Read_Byte>
 800448e:	4603      	mov	r3, r0
 8004490:	b2db      	uxtb	r3, r3
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <AS7341_Write_Byte>:
 parameter:
 Addr: Register address
 Value: Write to the value of the register
 Info:
 ******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value) {
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	460a      	mov	r2, r1
 80044a4:	71fb      	strb	r3, [r7, #7]
 80044a6:	4613      	mov	r3, r2
 80044a8:	71bb      	strb	r3, [r7, #6]
	I2C_Write_Byte(Addr, Value);
 80044aa:	79ba      	ldrb	r2, [r7, #6]
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff9d 	bl	80043f0 <I2C_Write_Byte>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <AS7341_Init>:
/******************************************************************************
 function:	AS7341 Initialization
 parameter:
 Info:
 ******************************************************************************/
UBYTE AS7341_Init(eMode_t mode) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS << 1); //8-bit address
 80044ca:	2072      	movs	r0, #114	; 0x72
 80044cc:	f7ff ff7a 	bl	80043c4 <DEV_I2C_Init>
	//printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id
	AS7341_Enable(true);
 80044d0:	2001      	movs	r0, #1
 80044d2:	f000 f80b 	bl	80044ec <AS7341_Enable>
	measureMode = mode;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <AS7341_Init+0x28>)
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	7013      	strb	r3, [r2, #0]
	return 0;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000079e 	.word	0x2000079e

080044ec <AS7341_Enable>:

/******************************************************************************
 function： enable PON
 info：	power on
 ******************************************************************************/
void AS7341_Enable(int flag) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 80044f4:	2080      	movs	r0, #128	; 0x80
 80044f6:	f7ff ffc1 	bl	800447c <AS7341_Read_Byte>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d104      	bne.n	800450e <AS7341_Enable+0x22>
		data = data | (1 << 0);
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e003      	b.n	8004516 <AS7341_Enable+0x2a>
	} else {
		data = data & (~1);
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	4619      	mov	r1, r3
 800451a:	2080      	movs	r0, #128	; 0x80
 800451c:	f7ff ffbd 	bl	800449a <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8004520:	4805      	ldr	r0, [pc, #20]	; (8004538 <AS7341_Enable+0x4c>)
 8004522:	f009 fecb 	bl	800e2bc <puts>
	AS7341_Write_Byte(0x00, 0x30);
 8004526:	2130      	movs	r1, #48	; 0x30
 8004528:	2000      	movs	r0, #0
 800452a:	f7ff ffb6 	bl	800449a <AS7341_Write_Byte>
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	08010a48 	.word	0x08010a48

0800453c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
 function： enable Spectral measure
 info：
 ******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)    //Enable spectral measurement
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 8004544:	2080      	movs	r0, #128	; 0x80
 8004546:	f7ff ff99 	bl	800447c <AS7341_Read_Byte>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d104      	bne.n	800455e <AS7341_EnableSpectralMeasure+0x22>
		data = data | (1 << 1);
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e003      	b.n	8004566 <AS7341_EnableSpectralMeasure+0x2a>
	} else {
		data = data & (~(1 << 1));
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f023 0302 	bic.w	r3, r3, #2
 8004564:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	4619      	mov	r1, r3
 800456a:	2080      	movs	r0, #128	; 0x80
 800456c:	f7ff ff95 	bl	800449a <AS7341_Write_Byte>
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <AS7341_EnableSMUX>:
 function： enable SMUX
 info：
 ******************************************************************************/
void AS7341_EnableSMUX(int flag)    //Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 8004580:	2080      	movs	r0, #128	; 0x80
 8004582:	f7ff ff7b 	bl	800447c <AS7341_Read_Byte>
 8004586:	4603      	mov	r3, r0
 8004588:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d104      	bne.n	800459a <AS7341_EnableSMUX+0x22>
		data = data | (1 << 4);
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	f043 0310 	orr.w	r3, r3, #16
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	e003      	b.n	80045a2 <AS7341_EnableSMUX+0x2a>
	} else {
		data = data & (~(1 << 4));
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	4619      	mov	r1, r3
 80045a6:	2080      	movs	r0, #128	; 0x80
 80045a8:	f7ff ff77 	bl	800449a <AS7341_Write_Byte>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <AS7341_Config>:

/******************************************************************************
 function:	choose model for spectral measurement
 info：
 ******************************************************************************/
void AS7341_Config(eMode_t mode) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
	UBYTE data;
	AS7341_SetBank(1);
 80045be:	2001      	movs	r0, #1
 80045c0:	f000 fa37 	bl	8004a32 <AS7341_SetBank>
	data = AS7341_Read_Byte(AS7341_CONFIG);
 80045c4:	2070      	movs	r0, #112	; 0x70
 80045c6:	f7ff ff59 	bl	800447c <AS7341_Read_Byte>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d015      	beq.n	8004600 <AS7341_Config+0x4c>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	dc18      	bgt.n	800460a <AS7341_Config+0x56>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <AS7341_Config+0x2e>
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d005      	beq.n	80045ec <AS7341_Config+0x38>
		data = (data & (~3)) | eSynd;
	}
		;
		break;
	default:
		break;
 80045e0:	e013      	b.n	800460a <AS7341_Config+0x56>
		data = (data & (~3)) | eSpm;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	f023 0303 	bic.w	r3, r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
		break;
 80045ea:	e00f      	b.n	800460c <AS7341_Config+0x58>
		data = (data & (~3)) | eSyns;
 80045ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	73fb      	strb	r3, [r7, #15]
		break;
 80045fe:	e005      	b.n	800460c <AS7341_Config+0x58>
		data = (data & (~3)) | eSynd;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	f043 0303 	orr.w	r3, r3, #3
 8004606:	73fb      	strb	r3, [r7, #15]
		break;
 8004608:	e000      	b.n	800460c <AS7341_Config+0x58>
		break;
 800460a:	bf00      	nop
	}
	AS7341_Write_Byte(AS7341_CONFIG, data);
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	4619      	mov	r1, r3
 8004610:	2070      	movs	r0, #112	; 0x70
 8004612:	f7ff ff42 	bl	800449a <AS7341_Write_Byte>
	AS7341_SetBank(0);
 8004616:	2000      	movs	r0, #0
 8004618:	f000 fa0b 	bl	8004a32 <AS7341_SetBank>
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <F1F4_Clear_NIR>:

/******************************************************************************
 function:	Configure SMUX for sensors F1-4, Clear and NIR
 info：
 ******************************************************************************/
void F1F4_Clear_NIR() {
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	AS7341_Write_Byte(0x00, 0x30);
 8004628:	2130      	movs	r1, #48	; 0x30
 800462a:	2000      	movs	r0, #0
 800462c:	f7ff ff35 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x01, 0x01);
 8004630:	2101      	movs	r1, #1
 8004632:	2001      	movs	r0, #1
 8004634:	f7ff ff31 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x02, 0x00);
 8004638:	2100      	movs	r1, #0
 800463a:	2002      	movs	r0, #2
 800463c:	f7ff ff2d 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x03, 0x00);
 8004640:	2100      	movs	r1, #0
 8004642:	2003      	movs	r0, #3
 8004644:	f7ff ff29 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x04, 0x00);
 8004648:	2100      	movs	r1, #0
 800464a:	2004      	movs	r0, #4
 800464c:	f7ff ff25 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x05, 0x42);
 8004650:	2142      	movs	r1, #66	; 0x42
 8004652:	2005      	movs	r0, #5
 8004654:	f7ff ff21 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x06, 0x00);
 8004658:	2100      	movs	r1, #0
 800465a:	2006      	movs	r0, #6
 800465c:	f7ff ff1d 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x07, 0x00);
 8004660:	2100      	movs	r1, #0
 8004662:	2007      	movs	r0, #7
 8004664:	f7ff ff19 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x08, 0x50);
 8004668:	2150      	movs	r1, #80	; 0x50
 800466a:	2008      	movs	r0, #8
 800466c:	f7ff ff15 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x09, 0x00);
 8004670:	2100      	movs	r1, #0
 8004672:	2009      	movs	r0, #9
 8004674:	f7ff ff11 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0A, 0x00);
 8004678:	2100      	movs	r1, #0
 800467a:	200a      	movs	r0, #10
 800467c:	f7ff ff0d 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0B, 0x00);
 8004680:	2100      	movs	r1, #0
 8004682:	200b      	movs	r0, #11
 8004684:	f7ff ff09 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0C, 0x20);
 8004688:	2120      	movs	r1, #32
 800468a:	200c      	movs	r0, #12
 800468c:	f7ff ff05 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0D, 0x04);
 8004690:	2104      	movs	r1, #4
 8004692:	200d      	movs	r0, #13
 8004694:	f7ff ff01 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0E, 0x00);
 8004698:	2100      	movs	r1, #0
 800469a:	200e      	movs	r0, #14
 800469c:	f7ff fefd 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0F, 0x30);
 80046a0:	2130      	movs	r1, #48	; 0x30
 80046a2:	200f      	movs	r0, #15
 80046a4:	f7ff fef9 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x10, 0x01);
 80046a8:	2101      	movs	r1, #1
 80046aa:	2010      	movs	r0, #16
 80046ac:	f7ff fef5 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x11, 0x50);
 80046b0:	2150      	movs	r1, #80	; 0x50
 80046b2:	2011      	movs	r0, #17
 80046b4:	f7ff fef1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x12, 0x00);
 80046b8:	2100      	movs	r1, #0
 80046ba:	2012      	movs	r0, #18
 80046bc:	f7ff feed 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x13, 0x06);
 80046c0:	2106      	movs	r1, #6
 80046c2:	2013      	movs	r0, #19
 80046c4:	f7ff fee9 	bl	800449a <AS7341_Write_Byte>
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}

080046cc <F5F8_Clear_NIR>:
/******************************************************************************
 function:	Configure SMUX for sensors F5-8, Clear and NIR
 info：
 ******************************************************************************/
void F5F8_Clear_NIR() {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
	AS7341_Write_Byte(0x00, 0x00);
 80046d0:	2100      	movs	r1, #0
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7ff fee1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x01, 0x00);
 80046d8:	2100      	movs	r1, #0
 80046da:	2001      	movs	r0, #1
 80046dc:	f7ff fedd 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x02, 0x00);
 80046e0:	2100      	movs	r1, #0
 80046e2:	2002      	movs	r0, #2
 80046e4:	f7ff fed9 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x03, 0x40);
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	2003      	movs	r0, #3
 80046ec:	f7ff fed5 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x04, 0x02);
 80046f0:	2102      	movs	r1, #2
 80046f2:	2004      	movs	r0, #4
 80046f4:	f7ff fed1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x05, 0x00);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2005      	movs	r0, #5
 80046fc:	f7ff fecd 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x06, 0x10);
 8004700:	2110      	movs	r1, #16
 8004702:	2006      	movs	r0, #6
 8004704:	f7ff fec9 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x07, 0x03);
 8004708:	2103      	movs	r1, #3
 800470a:	2007      	movs	r0, #7
 800470c:	f7ff fec5 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x08, 0x50);
 8004710:	2150      	movs	r1, #80	; 0x50
 8004712:	2008      	movs	r0, #8
 8004714:	f7ff fec1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x09, 0x10);
 8004718:	2110      	movs	r1, #16
 800471a:	2009      	movs	r0, #9
 800471c:	f7ff febd 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0A, 0x03);
 8004720:	2103      	movs	r1, #3
 8004722:	200a      	movs	r0, #10
 8004724:	f7ff feb9 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0B, 0x00);
 8004728:	2100      	movs	r1, #0
 800472a:	200b      	movs	r0, #11
 800472c:	f7ff feb5 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0C, 0x00);
 8004730:	2100      	movs	r1, #0
 8004732:	200c      	movs	r0, #12
 8004734:	f7ff feb1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0D, 0x00);
 8004738:	2100      	movs	r1, #0
 800473a:	200d      	movs	r0, #13
 800473c:	f7ff fead 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0E, 0x24);
 8004740:	2124      	movs	r1, #36	; 0x24
 8004742:	200e      	movs	r0, #14
 8004744:	f7ff fea9 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0F, 0x00);
 8004748:	2100      	movs	r1, #0
 800474a:	200f      	movs	r0, #15
 800474c:	f7ff fea5 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x10, 0x00);
 8004750:	2100      	movs	r1, #0
 8004752:	2010      	movs	r0, #16
 8004754:	f7ff fea1 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x11, 0x50);
 8004758:	2150      	movs	r1, #80	; 0x50
 800475a:	2011      	movs	r0, #17
 800475c:	f7ff fe9d 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x12, 0x00);
 8004760:	2100      	movs	r1, #0
 8004762:	2012      	movs	r0, #18
 8004764:	f7ff fe99 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(0x13, 0x06);
 8004768:	2106      	movs	r1, #6
 800476a:	2013      	movs	r0, #19
 800476c:	f7ff fe95 	bl	800449a <AS7341_Write_Byte>
}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}

08004774 <AS7341_startMeasure>:

/******************************************************************************
 function:	Start the measurement
 info：		This function only handles SPM and SYNS modes.
 ******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode) {
 8004774:	b5b0      	push	{r4, r5, r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	UBYTE data = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
	data = AS7341_Read_Byte(AS7341_CFG_0);
 8004782:	20a9      	movs	r0, #169	; 0xa9
 8004784:	f7ff fe7a 	bl	800447c <AS7341_Read_Byte>
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]
	data = data & (~(1 << 4));
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	73fb      	strb	r3, [r7, #15]

	AS7341_Write_Byte(AS7341_CFG_0, data);
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	4619      	mov	r1, r3
 8004798:	20a9      	movs	r0, #169	; 0xa9
 800479a:	f7ff fe7e 	bl	800449a <AS7341_Write_Byte>

	AS7341_EnableSpectralMeasure(false);
 800479e:	2000      	movs	r0, #0
 80047a0:	f7ff fecc 	bl	800453c <AS7341_EnableSpectralMeasure>
	AS7341_Write_Byte(0xAF, 0x10);    //SMUX Command config
 80047a4:	2110      	movs	r1, #16
 80047a6:	20af      	movs	r0, #175	; 0xaf
 80047a8:	f7ff fe77 	bl	800449a <AS7341_Write_Byte>

	if (mode == eF1F4ClearNIR)
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <AS7341_startMeasure+0x44>
		F1F4_Clear_NIR();
 80047b2:	f7ff ff37 	bl	8004624 <F1F4_Clear_NIR>
 80047b6:	e004      	b.n	80047c2 <AS7341_startMeasure+0x4e>
	else if (mode == eF5F8ClearNIR)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <AS7341_startMeasure+0x4e>
		F5F8_Clear_NIR();
 80047be:	f7ff ff85 	bl	80046cc <F5F8_Clear_NIR>
	AS7341_EnableSMUX(true);
 80047c2:	2001      	movs	r0, #1
 80047c4:	f7ff fed8 	bl	8004578 <AS7341_EnableSMUX>
	if (measureMode == eSyns) {
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <AS7341_startMeasure+0xcc>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <AS7341_startMeasure+0x6a>
		AS7341_SetGpioMode(INPUT);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f000 f8d3 	bl	800497c <AS7341_SetGpioMode>
		AS7341_Config(eSyns);
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7ff feec 	bl	80045b4 <AS7341_Config>
 80047dc:	e006      	b.n	80047ec <AS7341_startMeasure+0x78>
	} else if (measureMode == eSpm) {
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <AS7341_startMeasure+0xcc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <AS7341_startMeasure+0x78>
		AS7341_Config(eSpm);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7ff fee4 	bl	80045b4 <AS7341_Config>
	}
	AS7341_EnableSpectralMeasure(true);
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7ff fea5 	bl	800453c <AS7341_EnableSpectralMeasure>
	if (measureMode == eSpm) {
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <AS7341_startMeasure+0xcc>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11e      	bne.n	8004838 <AS7341_startMeasure+0xc4>
		// 01.06.2022
		// Added try to prevent a while forever loop

		uint64_t tick = 0;
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bool exit_flagg = false;
 8004806:	2300      	movs	r3, #0
 8004808:	73bb      	strb	r3, [r7, #14]
		while (!AS7341_MeasureComplete()) {
 800480a:	e00e      	b.n	800482a <AS7341_startMeasure+0xb6>
			//DEV_Delay_ms(1);
			if (++tick > (UINT16_MAX/20)-1) {
 800480c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004810:	1c54      	adds	r4, r2, #1
 8004812:	f143 0500 	adc.w	r5, r3, #0
 8004816:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800481a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800481e:	f640 41cc 	movw	r1, #3276	; 0xccc
 8004822:	428a      	cmp	r2, r1
 8004824:	f173 0300 	sbcs.w	r3, r3, #0
 8004828:	d205      	bcs.n	8004836 <AS7341_startMeasure+0xc2>
		while (!AS7341_MeasureComplete()) {
 800482a:	f000 f80b 	bl	8004844 <AS7341_MeasureComplete>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0eb      	beq.n	800480c <AS7341_startMeasure+0x98>
 8004834:	e000      	b.n	8004838 <AS7341_startMeasure+0xc4>
				return;
 8004836:	bf00      	nop
			}
		}


	}
}
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bdb0      	pop	{r4, r5, r7, pc}
 800483e:	bf00      	nop
 8004840:	2000079e 	.word	0x2000079e

08004844 <AS7341_MeasureComplete>:
/******************************************************************************
 function:  Determine whether the measurement is complete
 info：
 ******************************************************************************/

int AS7341_MeasureComplete() {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2);
 800484a:	20a3      	movs	r0, #163	; 0xa3
 800484c:	f7ff fe16 	bl	800447c <AS7341_Read_Byte>
 8004850:	4603      	mov	r3, r0
 8004852:	71fb      	strb	r3, [r7, #7]
	if ((status & (1 << 6))) {
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <AS7341_MeasureComplete+0x1e>
		return true;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <AS7341_MeasureComplete+0x20>
	} else {
		return false;
 8004862:	2300      	movs	r3, #0
	}
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <AS7341_GetChannelData>:

/******************************************************************************
 function:  Gets data for all channels
 info：
 ******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
	UWORD data[2];
	UWORD channelData = 0x0000;
 8004876:	2300      	movs	r3, #0
 8004878:	81fb      	strh	r3, [r7, #14]
	data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel * 2);
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3b6b      	subs	r3, #107	; 0x6b
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fdf9 	bl	800447c <AS7341_Read_Byte>
 800488a:	4603      	mov	r3, r0
 800488c:	b29b      	uxth	r3, r3
 800488e:	813b      	strh	r3, [r7, #8]
	data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel * 2);
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	334b      	adds	r3, #75	; 0x4b
 8004894:	b2db      	uxtb	r3, r3
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fdee 	bl	800447c <AS7341_Read_Byte>
 80048a0:	4603      	mov	r3, r0
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	817b      	strh	r3, [r7, #10]
	channelData = data[1];
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	81fb      	strh	r3, [r7, #14]
	channelData = (channelData << 8) | data[0];
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	b21a      	sxth	r2, r3
 80048b0:	893b      	ldrh	r3, [r7, #8]
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	4313      	orrs	r3, r2
 80048b6:	b21b      	sxth	r3, r3
 80048b8:	81fb      	strh	r3, [r7, #14]
	//DEV_Delay_ms(50);
	return channelData;
 80048ba:	89fb      	ldrh	r3, [r7, #14]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <AS7341_ReadSpectralDataOne>:
/******************************************************************************
 function:  Use SMUX to read data from the low channel
 info：
 ******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne() {
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	sModeOneData_t data;
	data.channel1 = AS7341_GetChannelData(0);
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff ffcd 	bl	800486c <AS7341_GetChannelData>
 80048d2:	4603      	mov	r3, r0
 80048d4:	81bb      	strh	r3, [r7, #12]
	data.channel2 = AS7341_GetChannelData(1);
 80048d6:	2001      	movs	r0, #1
 80048d8:	f7ff ffc8 	bl	800486c <AS7341_GetChannelData>
 80048dc:	4603      	mov	r3, r0
 80048de:	81fb      	strh	r3, [r7, #14]
	data.channel3 = AS7341_GetChannelData(2);
 80048e0:	2002      	movs	r0, #2
 80048e2:	f7ff ffc3 	bl	800486c <AS7341_GetChannelData>
 80048e6:	4603      	mov	r3, r0
 80048e8:	823b      	strh	r3, [r7, #16]
	data.channel4 = AS7341_GetChannelData(3);
 80048ea:	2003      	movs	r0, #3
 80048ec:	f7ff ffbe 	bl	800486c <AS7341_GetChannelData>
 80048f0:	4603      	mov	r3, r0
 80048f2:	827b      	strh	r3, [r7, #18]
	data.CLEAR = AS7341_GetChannelData(4);
 80048f4:	2004      	movs	r0, #4
 80048f6:	f7ff ffb9 	bl	800486c <AS7341_GetChannelData>
 80048fa:	4603      	mov	r3, r0
 80048fc:	82bb      	strh	r3, [r7, #20]
	data.NIR = AS7341_GetChannelData(5);
 80048fe:	2005      	movs	r0, #5
 8004900:	f7ff ffb4 	bl	800486c <AS7341_GetChannelData>
 8004904:	4603      	mov	r3, r0
 8004906:	82fb      	strh	r3, [r7, #22]
	return data;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	461c      	mov	r4, r3
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004912:	6020      	str	r0, [r4, #0]
 8004914:	6061      	str	r1, [r4, #4]
 8004916:	60a2      	str	r2, [r4, #8]
}
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}

08004920 <AS7341_ReadSpectralDataTwo>:
/******************************************************************************
 function:  Use SMUX to read data from the high channel
 info：
 ******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo() {
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	sModeTwoData_t data;
	data.channel5 = AS7341_GetChannelData(0);
 8004928:	2000      	movs	r0, #0
 800492a:	f7ff ff9f 	bl	800486c <AS7341_GetChannelData>
 800492e:	4603      	mov	r3, r0
 8004930:	81bb      	strh	r3, [r7, #12]
	data.channel6 = AS7341_GetChannelData(1);
 8004932:	2001      	movs	r0, #1
 8004934:	f7ff ff9a 	bl	800486c <AS7341_GetChannelData>
 8004938:	4603      	mov	r3, r0
 800493a:	81fb      	strh	r3, [r7, #14]
	data.channel7 = AS7341_GetChannelData(2);
 800493c:	2002      	movs	r0, #2
 800493e:	f7ff ff95 	bl	800486c <AS7341_GetChannelData>
 8004942:	4603      	mov	r3, r0
 8004944:	823b      	strh	r3, [r7, #16]
	data.channel8 = AS7341_GetChannelData(3);
 8004946:	2003      	movs	r0, #3
 8004948:	f7ff ff90 	bl	800486c <AS7341_GetChannelData>
 800494c:	4603      	mov	r3, r0
 800494e:	827b      	strh	r3, [r7, #18]
	data.CLEAR = AS7341_GetChannelData(4);
 8004950:	2004      	movs	r0, #4
 8004952:	f7ff ff8b 	bl	800486c <AS7341_GetChannelData>
 8004956:	4603      	mov	r3, r0
 8004958:	82bb      	strh	r3, [r7, #20]
	data.NIR = AS7341_GetChannelData(5);
 800495a:	2005      	movs	r0, #5
 800495c:	f7ff ff86 	bl	800486c <AS7341_GetChannelData>
 8004960:	4603      	mov	r3, r0
 8004962:	82fb      	strh	r3, [r7, #22]
	return data;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	461c      	mov	r4, r3
 8004968:	f107 030c 	add.w	r3, r7, #12
 800496c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800496e:	6020      	str	r0, [r4, #0]
 8004970:	6061      	str	r1, [r4, #4]
 8004972:	60a2      	str	r2, [r4, #8]
}
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}

0800497c <AS7341_SetGpioMode>:

/******************************************************************************
 function:	Set GPIO to input or output mode
 info：
 ******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
	UBYTE data;

	data = AS7341_Read_Byte(AS7341_GPIO_2);
 8004986:	20be      	movs	r0, #190	; 0xbe
 8004988:	f7ff fd78 	bl	800447c <AS7341_Read_Byte>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
	if (mode == INPUT) {
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <AS7341_SetGpioMode+0x22>
		data = data | (1 << 2);
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	73fb      	strb	r3, [r7, #15]
	}

	if (mode == OUTPUT) {
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d103      	bne.n	80049ac <AS7341_SetGpioMode+0x30>
		data = data & (~(1 << 2));
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	f023 0304 	bic.w	r3, r3, #4
 80049aa:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_GPIO_2, data);
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	4619      	mov	r1, r3
 80049b0:	20be      	movs	r0, #190	; 0xbe
 80049b2:	f7ff fd72 	bl	800449a <AS7341_Write_Byte>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <AS7341_ATIME_config>:

/******************************************************************************
 function:	Configure the ATIME register
 info：
 ******************************************************************************/
void AS7341_ATIME_config(UBYTE value) {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	71fb      	strb	r3, [r7, #7]
	AS7341_Write_Byte(AS7341_ATIME, value);
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	4619      	mov	r1, r3
 80049cc:	2081      	movs	r0, #129	; 0x81
 80049ce:	f7ff fd64 	bl	800449a <AS7341_Write_Byte>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <AS7341_ASTEP_config>:

/******************************************************************************
 function:	Configure the ASTEP register
 info：
 ******************************************************************************/
void AS7341_ASTEP_config(UWORD value) {
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	4603      	mov	r3, r0
 80049e2:	80fb      	strh	r3, [r7, #6]
	UBYTE highValue, lowValue;
	lowValue = value & 0x00ff;
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	73fb      	strb	r3, [r7, #15]
	highValue = value >> 8;
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	73bb      	strb	r3, [r7, #14]
	AS7341_Write_Byte(AS7341_ASTEP_L, lowValue);
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	4619      	mov	r1, r3
 80049f4:	20ca      	movs	r0, #202	; 0xca
 80049f6:	f7ff fd50 	bl	800449a <AS7341_Write_Byte>
	AS7341_Write_Byte(AS7341_ASTEP_H, highValue);
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	4619      	mov	r1, r3
 80049fe:	20cb      	movs	r0, #203	; 0xcb
 8004a00:	f7ff fd4b 	bl	800449a <AS7341_Write_Byte>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <AS7341_AGAIN_config>:
/******************************************************************************
 function:	Configure the AGAIN register
 value:    0    1    2    3    4    5      6     7     8     9      10
 gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
 ******************************************************************************/
void AS7341_AGAIN_config(UBYTE value) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
	if (value > 10)
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b0a      	cmp	r3, #10
 8004a1a:	d901      	bls.n	8004a20 <AS7341_AGAIN_config+0x14>
		value = 10;
 8004a1c:	230a      	movs	r3, #10
 8004a1e:	71fb      	strb	r3, [r7, #7]
	AS7341_Write_Byte(AS7341_CFG_1, value);
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4619      	mov	r1, r3
 8004a24:	20aa      	movs	r0, #170	; 0xaa
 8004a26:	f7ff fd38 	bl	800449a <AS7341_Write_Byte>
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <AS7341_SetBank>:
/******************************************************************************
 function:	set REG_BANK
 info：	0: Register access to register 0x80 and above
 1: Register access to register 0x60 to 0x74
 ******************************************************************************/
void AS7341_SetBank(UBYTE addr) {
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
	UBYTE data = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]
	data = AS7341_Read_Byte(AS7341_CFG_0);
 8004a40:	20a9      	movs	r0, #169	; 0xa9
 8004a42:	f7ff fd1b 	bl	800447c <AS7341_Read_Byte>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
	if (addr == 1) {
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d103      	bne.n	8004a58 <AS7341_SetBank+0x26>

		data = data | (1 << 4);
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	f043 0310 	orr.w	r3, r3, #16
 8004a56:	73fb      	strb	r3, [r7, #15]
	}

	if (addr == 0) {
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <AS7341_SetBank+0x34>

		data = data & (~(1 << 4));
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_CFG_0, data);
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	20a9      	movs	r0, #169	; 0xa9
 8004a6c:	f7ff fd15 	bl	800449a <AS7341_Write_Byte>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <LSM303AGR_Initialise>:
#include "LSM303AGR.h"

uint8_t LSM303AGR_Initialise(LSM303AGR *dev, I2C_HandleTypeDef *i2cHandle){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle 	= i2cHandle;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]
	dev->mag[0] 	= 0.0f;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
	dev->mag[1] 	= 0.0f;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
	dev->mag[2] 	= 0.0f;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
	dev->acc[0] 	= 0.0f;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
	dev->acc[1] 	= 0.0f;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
	dev->acc[2] 	= 0.0f;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	60da      	str	r2, [r3, #12]
	dev->temp_C		= 0.0f;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

	/* Store number of transaction errors (gets returned at the end of the function) */
	uint8_t errNum = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check who am i of both devices */
	uint8_t regData;

	status = LSM303AGR_MAG_ReadRegister(dev, LSM303AGR_WHO_AM_I_M ,&regData);
 8004ac4:	f107 030d 	add.w	r3, r7, #13
 8004ac8:	461a      	mov	r2, r3
 8004aca:	214f      	movs	r1, #79	; 0x4f
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 faeb 	bl	80050a8 <LSM303AGR_MAG_ReadRegister>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	73fb      	strb	r3, [r7, #15]
	if (regData != LSM303AGR_MAG_WHO_AM_I){
 8004aea:	7b7b      	ldrb	r3, [r7, #13]
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d005      	beq.n	8004afc <LSM303AGR_Initialise+0x84>
		printf("Error MAG_WHO_AM_I: regdata is %x but should be %x \n",regData,LSM303AGR_MAG_WHO_AM_I);
 8004af0:	7b7b      	ldrb	r3, [r7, #13]
 8004af2:	2240      	movs	r2, #64	; 0x40
 8004af4:	4619      	mov	r1, r3
 8004af6:	484c      	ldr	r0, [pc, #304]	; (8004c28 <LSM303AGR_Initialise+0x1b0>)
 8004af8:	f009 fb5a 	bl	800e1b0 <iprintf>
		//return 255;
	}

	status = LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_WHO_AM_I_A ,&regData);
 8004afc:	f107 030d 	add.w	r3, r7, #13
 8004b00:	461a      	mov	r2, r3
 8004b02:	210f      	movs	r1, #15
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb21 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4413      	add	r3, r2
 8004b20:	73fb      	strb	r3, [r7, #15]
	if (regData != LSM303AGR_ACC_WHO_AM_I){
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	2b33      	cmp	r3, #51	; 0x33
 8004b26:	d005      	beq.n	8004b34 <LSM303AGR_Initialise+0xbc>
		printf("Error ACC_WHO_AM_I: regdata is %x but should be %x \n",regData,LSM303AGR_ACC_WHO_AM_I);
 8004b28:	7b7b      	ldrb	r3, [r7, #13]
 8004b2a:	2233      	movs	r2, #51	; 0x33
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	483f      	ldr	r0, [pc, #252]	; (8004c2c <LSM303AGR_Initialise+0x1b4>)
 8004b30:	f009 fb3e 	bl	800e1b0 <iprintf>
	 * hight resolution: yes
	 * data rate: 10Hz
	 * continuous mode: yes
	 */

	regData = 0x80;
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_A_M, &regData);
 8004b38:	f107 030d 	add.w	r3, r7, #13
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2160      	movs	r1, #96	; 0x60
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fae9 	bl	8005118 <LSM303AGR_MAG_WriteRegister>
 8004b46:	4603      	mov	r3, r0
 8004b48:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	73fb      	strb	r3, [r7, #15]
	 * offset cancellation single measurement disabled
	 * no interrupt recognition checks
	 * offset cancellation enabled
	 * lowpass enabled
	 */
	regData = 0x03;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_B_M, &regData);
 8004b62:	f107 030d 	add.w	r3, r7, #13
 8004b66:	461a      	mov	r2, r3
 8004b68:	2161      	movs	r1, #97	; 0x61
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fad4 	bl	8005118 <LSM303AGR_MAG_WriteRegister>
 8004b70:	4603      	mov	r3, r0
 8004b72:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	4413      	add	r3, r2
 8004b86:	73fb      	strb	r3, [r7, #15]
	/*
	 * Block Data Update (BDU) enable
	 * avoiding of reading incorrect data when data is read asynchronously
	 * output registers not updated until MSB and LSB have been read
	 */
	regData = 0x10; // old 0x00
 8004b88:	2310      	movs	r3, #16
 8004b8a:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_C_M, &regData);
 8004b8c:	f107 030d 	add.w	r3, r7, #13
 8004b90:	461a      	mov	r2, r3
 8004b92:	2162      	movs	r1, #98	; 0x62
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fabf 	bl	8005118 <LSM303AGR_MAG_WriteRegister>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	4413      	add	r3, r2
 8004bb0:	73fb      	strb	r3, [r7, #15]
	/*
	 * 10Hz sampling
	 * normal mode (Power)
	 * X, Y and Z activated
	 */
	regData = 0x27;
 8004bb2:	2327      	movs	r3, #39	; 0x27
 8004bb4:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_CTRL_REG1_A, &regData);
 8004bb6:	f107 030d 	add.w	r3, r7, #13
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2120      	movs	r1, #32
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fade 	bl	8005180 <LSM303AGR_ACC_WriteRegister>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	4413      	add	r3, r2
 8004bda:	73fb      	strb	r3, [r7, #15]
	 * spi/selftest disabled
	 */
	// regData = 0x38; // Continuous Update
	// regData = 0xB8; // +- 16g
	// regData = 0x88; // +- 2g
	regData = 0x98;
 8004bdc:	2398      	movs	r3, #152	; 0x98
 8004bde:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_CTRL_REG4_A, &regData);
 8004be0:	f107 030d 	add.w	r3, r7, #13
 8004be4:	461a      	mov	r2, r3
 8004be6:	2123      	movs	r1, #35	; 0x23
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fac9 	bl	8005180 <LSM303AGR_ACC_WriteRegister>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	4413      	add	r3, r2
 8004c04:	73fb      	strb	r3, [r7, #15]


	/*
	 * Temperature Sensor enabled
	 */
	regData = 0xC0;
 8004c06:	23c0      	movs	r3, #192	; 0xc0
 8004c08:	737b      	strb	r3, [r7, #13]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_TEMP_CFG_REG_A, &regData);
 8004c0a:	f107 030d 	add.w	r3, r7, #13
 8004c0e:	461a      	mov	r2, r3
 8004c10:	211f      	movs	r1, #31
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fab4 	bl	8005180 <LSM303AGR_ACC_WriteRegister>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73bb      	strb	r3, [r7, #14]

	/* Return number of errors (0 if successful initialisation) */
	return errNum;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	08010ab0 	.word	0x08010ab0
 8004c2c:	08010ae8 	.word	0x08010ae8

08004c30 <LSM303AGR_ReadAcceleration>:
	dev->temp_C = (tmpRawSigned + 25);

	return errNum;
}

HAL_StatusTypeDef LSM303AGR_ReadAcceleration(LSM303AGR *dev){
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	/* Store number of transaction errors (gets returned at the end of the function) */
	uint8_t errNum = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]

	/* Read raw values from Resgister (x, y, z -> 16 bits each) */
	uint8_t regDataXL, regDataXH, regDataYL, regDataYH, regDataZL, regDataZH;
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_L_A, &regDataXL) != HAL_OK);
 8004c3c:	f107 0315 	add.w	r3, r7, #21
 8004c40:	461a      	mov	r2, r3
 8004c42:	2128      	movs	r1, #40	; 0x28
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fa81 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	75fb      	strb	r3, [r7, #23]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_H_A, &regDataXH) != HAL_OK);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	461a      	mov	r2, r3
 8004c64:	2129      	movs	r1, #41	; 0x29
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa70 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	75fb      	strb	r3, [r7, #23]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_L_A, &regDataYL) != HAL_OK);
 8004c80:	f107 0313 	add.w	r3, r7, #19
 8004c84:	461a      	mov	r2, r3
 8004c86:	212a      	movs	r1, #42	; 0x2a
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa5f 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	75fb      	strb	r3, [r7, #23]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_H_A, &regDataYH) != HAL_OK);
 8004ca2:	f107 0312 	add.w	r3, r7, #18
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	212b      	movs	r1, #43	; 0x2b
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa4e 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	75fb      	strb	r3, [r7, #23]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_L_A, &regDataZL) != HAL_OK);
 8004cc4:	f107 0311 	add.w	r3, r7, #17
 8004cc8:	461a      	mov	r2, r3
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fa3d 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	75fb      	strb	r3, [r7, #23]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_H_A, &regDataZH) != HAL_OK);
 8004ce6:	f107 0310 	add.w	r3, r7, #16
 8004cea:	461a      	mov	r2, r3
 8004cec:	212d      	movs	r1, #45	; 0x2d
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa2c 	bl	800514c <LSM303AGR_ACC_ReadRegister>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	4413      	add	r3, r2
 8004d06:	75fb      	strb	r3, [r7, #23]


	/* Combining 2x8bit unsigned to 12bit signed */
	int16_t accRawSigned[3];
	uint8_t bitmask = 0xF0;
 8004d08:	23f0      	movs	r3, #240	; 0xf0
 8004d0a:	75bb      	strb	r3, [r7, #22]
	accRawSigned[0] = (((int16_t)((((uint16_t)regDataXH) << 8 ) | ((uint16_t)(regDataXL & bitmask)))) >> 4);
 8004d0c:	7d3b      	ldrb	r3, [r7, #20]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	b21a      	sxth	r2, r3
 8004d12:	7d79      	ldrb	r1, [r7, #21]
 8004d14:	7dbb      	ldrb	r3, [r7, #22]
 8004d16:	400b      	ands	r3, r1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	111b      	asrs	r3, r3, #4
 8004d22:	b21b      	sxth	r3, r3
 8004d24:	813b      	strh	r3, [r7, #8]
	accRawSigned[1] = (((int16_t)((((uint16_t)regDataYH) << 8 ) | ((uint16_t)(regDataYL & bitmask)))) >> 4);
 8004d26:	7cbb      	ldrb	r3, [r7, #18]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	b21a      	sxth	r2, r3
 8004d2c:	7cf9      	ldrb	r1, [r7, #19]
 8004d2e:	7dbb      	ldrb	r3, [r7, #22]
 8004d30:	400b      	ands	r3, r1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	111b      	asrs	r3, r3, #4
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	817b      	strh	r3, [r7, #10]
	accRawSigned[2] = (((int16_t)((((uint16_t)regDataZH) << 8 ) | ((uint16_t)(regDataZL & bitmask)))) >> 4);
 8004d40:	7c3b      	ldrb	r3, [r7, #16]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	7c79      	ldrb	r1, [r7, #17]
 8004d48:	7dbb      	ldrb	r3, [r7, #22]
 8004d4a:	400b      	ands	r3, r1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b21b      	sxth	r3, r3
 8004d54:	111b      	asrs	r3, r3, #4
 8004d56:	b21b      	sxth	r3, r3
 8004d58:	81bb      	strh	r3, [r7, #12]

	/* Converting to g */
	dev->acc_raw[0] = accRawSigned[0];
 8004d5a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	821a      	strh	r2, [r3, #16]
	dev->acc_raw[1] = accRawSigned[1];
 8004d62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	825a      	strh	r2, [r3, #18]
	dev->acc_raw[2] = accRawSigned[2];
 8004d6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	829a      	strh	r2, [r3, #20]

	// measuring range set to +-4g
	 dev->acc[0] = accRawSigned[0] * 0.00195;
 8004d72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fbd4 	bl	8000524 <__aeabi_i2d>
 8004d7c:	a36b      	add	r3, pc, #428	; (adr r3, 8004f2c <LSM303AGR_ReadAcceleration+0x2fc>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb fc39 	bl	80005f8 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fb ff0b 	bl	8000ba8 <__aeabi_d2f>
 8004d92:	4602      	mov	r2, r0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	605a      	str	r2, [r3, #4]
	 dev->acc[1] = accRawSigned[1] * 0.00195;
 8004d98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fbc1 	bl	8000524 <__aeabi_i2d>
 8004da2:	a362      	add	r3, pc, #392	; (adr r3, 8004f2c <LSM303AGR_ReadAcceleration+0x2fc>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fc26 	bl	80005f8 <__aeabi_dmul>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	f7fb fef8 	bl	8000ba8 <__aeabi_d2f>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
	 dev->acc[2] = accRawSigned[2] * 0.00195;
 8004dbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fbae 	bl	8000524 <__aeabi_i2d>
 8004dc8:	a358      	add	r3, pc, #352	; (adr r3, 8004f2c <LSM303AGR_ReadAcceleration+0x2fc>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fc13 	bl	80005f8 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fb fee5 	bl	8000ba8 <__aeabi_d2f>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
	dev->acc[1] = accRawSigned[1] * 0.01172;
	dev->acc[2] = accRawSigned[2] * 0.01172;
	 */

	/* Calculating Pitch/Roll */
	dev->pitch = 180 * atan (dev->acc[0]/sqrt(dev->acc[1]*dev->acc[1]  + dev->acc[2]*dev->acc[2]))/M_PI;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fb fbad 	bl	8000548 <__aeabi_f2d>
 8004dee:	4604      	mov	r4, r0
 8004df0:	460d      	mov	r5, r1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e16:	ee17 0a90 	vmov	r0, s15
 8004e1a:	f7fb fb95 	bl	8000548 <__aeabi_f2d>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	ec43 2b10 	vmov	d0, r2, r3
 8004e26:	f008 f9e2 	bl	800d1ee <sqrt>
 8004e2a:	ec53 2b10 	vmov	r2, r3, d0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fd0b 	bl	800084c <__aeabi_ddiv>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	ec43 2b17 	vmov	d7, r2, r3
 8004e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8004e42:	eef0 0a67 	vmov.f32	s1, s15
 8004e46:	f008 f827 	bl	800ce98 <atan>
 8004e4a:	ec51 0b10 	vmov	r0, r1, d0
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <LSM303AGR_ReadAcceleration+0x2f8>)
 8004e54:	f7fb fbd0 	bl	80005f8 <__aeabi_dmul>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	a32f      	add	r3, pc, #188	; (adr r3, 8004f20 <LSM303AGR_ReadAcceleration+0x2f0>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb fcf1 	bl	800084c <__aeabi_ddiv>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	f7fb fe99 	bl	8000ba8 <__aeabi_d2f>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	619a      	str	r2, [r3, #24]
	dev->roll = 180 * atan (dev->acc[1]/sqrt(dev->acc[0]*dev->acc[0] + dev->acc[2]*dev->acc[2]))/M_PI;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb fb61 	bl	8000548 <__aeabi_f2d>
 8004e86:	4604      	mov	r4, r0
 8004e88:	460d      	mov	r5, r1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eae:	ee17 0a90 	vmov	r0, s15
 8004eb2:	f7fb fb49 	bl	8000548 <__aeabi_f2d>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	ec43 2b10 	vmov	d0, r2, r3
 8004ebe:	f008 f996 	bl	800d1ee <sqrt>
 8004ec2:	ec53 2b10 	vmov	r2, r3, d0
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fcbf 	bl	800084c <__aeabi_ddiv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ec43 2b17 	vmov	d7, r2, r3
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	f007 ffdb 	bl	800ce98 <atan>
 8004ee2:	ec51 0b10 	vmov	r0, r1, d0
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <LSM303AGR_ReadAcceleration+0x2f8>)
 8004eec:	f7fb fb84 	bl	80005f8 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	a309      	add	r3, pc, #36	; (adr r3, 8004f20 <LSM303AGR_ReadAcceleration+0x2f0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb fca5 	bl	800084c <__aeabi_ddiv>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7fb fe4d 	bl	8000ba8 <__aeabi_d2f>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	61da      	str	r2, [r3, #28]
	return errNum;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]

}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	54442d18 	.word	0x54442d18
 8004f24:	400921fb 	.word	0x400921fb
 8004f28:	40668000 	.word	0x40668000
 8004f2c:	8e8a71de 	.word	0x8e8a71de
 8004f30:	3f5ff2e4 	.word	0x3f5ff2e4
 8004f34:	00000000 	.word	0x00000000

08004f38 <LSM303AGR_ReadMagnetometer>:

HAL_StatusTypeDef LSM303AGR_ReadMagnetometer(LSM303AGR *dev){
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

	/* Read raw values from Register (x, y, z -> 16 bits each) */
		uint8_t regData[6];
		HAL_StatusTypeDef status = LSM303AGR_MAG_ReadRegisters(dev, LSM303AGR_OUTX_L_REG_M, regData, 6);
 8004f40:	f107 0214 	add.w	r2, r7, #20
 8004f44:	2306      	movs	r3, #6
 8004f46:	2168      	movs	r1, #104	; 0x68
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8c7 	bl	80050dc <LSM303AGR_MAG_ReadRegisters>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	76fb      	strb	r3, [r7, #27]

		/* Combining 2x8bit to 16bit */
		int32_t magRawSigned[3];
		magRawSigned[0] = (int16_t)(((uint16_t)regData[0]) | ((uint16_t)regData[1] << 8)); /* X-Value */
 8004f52:	7d3b      	ldrb	r3, [r7, #20]
 8004f54:	b21a      	sxth	r2, r3
 8004f56:	7d7b      	ldrb	r3, [r7, #21]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	b21b      	sxth	r3, r3
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	b21b      	sxth	r3, r3
 8004f60:	60bb      	str	r3, [r7, #8]
		magRawSigned[1] = (int16_t)(((uint16_t)regData[2]) | ((uint16_t)regData[3] << 8)); /* Y-Value */
 8004f62:	7dbb      	ldrb	r3, [r7, #22]
 8004f64:	b21a      	sxth	r2, r3
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	60fb      	str	r3, [r7, #12]
		magRawSigned[2] = (int16_t)(((uint16_t)regData[4]) | ((uint16_t)regData[5] << 8)); /* Z-Value */
 8004f72:	7e3b      	ldrb	r3, [r7, #24]
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	7e7b      	ldrb	r3, [r7, #25]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	613b      	str	r3, [r7, #16]

		/* Converting to Gauss */
		dev->mag_raw[0] = magRawSigned[0];
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	b21a      	sxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	859a      	strh	r2, [r3, #44]	; 0x2c
		dev->mag_raw[1] = magRawSigned[1];
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	85da      	strh	r2, [r3, #46]	; 0x2e
		dev->mag_raw[2] = magRawSigned[2];
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	b21a      	sxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	861a      	strh	r2, [r3, #48]	; 0x30

		dev->mag[0] = magRawSigned[0] * 0.0015;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fac1 	bl	8000524 <__aeabi_i2d>
 8004fa2:	a33f      	add	r3, pc, #252	; (adr r3, 80050a0 <LSM303AGR_ReadMagnetometer+0x168>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb fb26 	bl	80005f8 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f7fb fdf8 	bl	8000ba8 <__aeabi_d2f>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]
		dev->mag[1] = magRawSigned[1] * 0.0015;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb faaf 	bl	8000524 <__aeabi_i2d>
 8004fc6:	a336      	add	r3, pc, #216	; (adr r3, 80050a0 <LSM303AGR_ReadMagnetometer+0x168>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fde6 	bl	8000ba8 <__aeabi_d2f>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
		dev->mag[2] = magRawSigned[2] * 0.0015;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fa9d 	bl	8000524 <__aeabi_i2d>
 8004fea:	a32d      	add	r3, pc, #180	; (adr r3, 80050a0 <LSM303AGR_ReadMagnetometer+0x168>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb fb02 	bl	80005f8 <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7fb fdd4 	bl	8000ba8 <__aeabi_d2f>
 8005000:	4602      	mov	r2, r0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28

		/* Calculate alignment*/
		float alignment;
		alignment = (atan2(dev->mag[1], dev->mag[0]) * 180) / M_PI;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fa9c 	bl	8000548 <__aeabi_f2d>
 8005010:	4604      	mov	r4, r0
 8005012:	460d      	mov	r5, r1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fa95 	bl	8000548 <__aeabi_f2d>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	ec43 2b11 	vmov	d1, r2, r3
 8005026:	ec45 4b10 	vmov	d0, r4, r5
 800502a:	f008 f8de 	bl	800d1ea <atan2>
 800502e:	ec51 0b10 	vmov	r0, r1, d0
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <LSM303AGR_ReadMagnetometer+0x160>)
 8005038:	f7fb fade 	bl	80005f8 <__aeabi_dmul>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	a312      	add	r3, pc, #72	; (adr r3, 8005090 <LSM303AGR_ReadMagnetometer+0x158>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb fbff 	bl	800084c <__aeabi_ddiv>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	f7fb fda7 	bl	8000ba8 <__aeabi_d2f>
 800505a:	4603      	mov	r3, r0
 800505c:	61fb      	str	r3, [r7, #28]
		if (alignment < 0) {
 800505e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	d507      	bpl.n	800507c <LSM303AGR_ReadMagnetometer+0x144>
			alignment = 360 + alignment;
 800506c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005070:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800509c <LSM303AGR_ReadMagnetometer+0x164>
 8005074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005078:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		dev->alignment = alignment;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	635a      	str	r2, [r3, #52]	; 0x34

		return status;
 8005082:	7efb      	ldrb	r3, [r7, #27]
	}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bdb0      	pop	{r4, r5, r7, pc}
 800508c:	f3af 8000 	nop.w
 8005090:	54442d18 	.word	0x54442d18
 8005094:	400921fb 	.word	0x400921fb
 8005098:	40668000 	.word	0x40668000
 800509c:	43b40000 	.word	0x43b40000
 80050a0:	bc6a7efa 	.word	0xbc6a7efa
 80050a4:	3f589374 	.word	0x3f589374

080050a8 <LSM303AGR_MAG_ReadRegister>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef LSM303AGR_MAG_ReadRegister(LSM303AGR *dev, uint8_t reg, uint8_t *data){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	460b      	mov	r3, r1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	230a      	movs	r3, #10
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	2301      	movs	r3, #1
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2301      	movs	r3, #1
 80050cc:	213c      	movs	r1, #60	; 0x3c
 80050ce:	f001 f8b9 	bl	8006244 <HAL_I2C_Mem_Read>
 80050d2:	4603      	mov	r3, r0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <LSM303AGR_MAG_ReadRegisters>:

HAL_StatusTypeDef LSM303AGR_MAG_ReadRegisters(LSM303AGR *dev, uint8_t reg, uint8_t *data, uint8_t length){
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	461a      	mov	r2, r3
 80050e8:	460b      	mov	r3, r1
 80050ea:	72fb      	strb	r3, [r7, #11]
 80050ec:	4613      	mov	r3, r2
 80050ee:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, 10);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	7afb      	ldrb	r3, [r7, #11]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	7abb      	ldrb	r3, [r7, #10]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	210a      	movs	r1, #10
 80050fe:	9102      	str	r1, [sp, #8]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2301      	movs	r3, #1
 8005108:	213c      	movs	r1, #60	; 0x3c
 800510a:	f001 f89b 	bl	8006244 <HAL_I2C_Mem_Read>
 800510e:	4603      	mov	r3, r0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <LSM303AGR_MAG_WriteRegister>:

HAL_StatusTypeDef LSM303AGR_MAG_WriteRegister(LSM303AGR *dev, uint8_t reg, uint8_t *data){
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af04      	add	r7, sp, #16
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	460b      	mov	r3, r1
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	7afb      	ldrb	r3, [r7, #11]
 800512c:	b29a      	uxth	r2, r3
 800512e:	230a      	movs	r3, #10
 8005130:	9302      	str	r3, [sp, #8]
 8005132:	2301      	movs	r3, #1
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2301      	movs	r3, #1
 800513c:	213c      	movs	r1, #60	; 0x3c
 800513e:	f000 ff6d 	bl	800601c <HAL_I2C_Mem_Write>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <LSM303AGR_ACC_ReadRegister>:

HAL_StatusTypeDef LSM303AGR_ACC_ReadRegister(LSM303AGR *dev, uint8_t reg, uint8_t *data){
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	460b      	mov	r3, r1
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	b29a      	uxth	r2, r3
 8005162:	230a      	movs	r3, #10
 8005164:	9302      	str	r3, [sp, #8]
 8005166:	2301      	movs	r3, #1
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2301      	movs	r3, #1
 8005170:	2132      	movs	r1, #50	; 0x32
 8005172:	f001 f867 	bl	8006244 <HAL_I2C_Mem_Read>
 8005176:	4603      	mov	r3, r0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <LSM303AGR_ACC_WriteRegister>:

HAL_StatusTypeDef LSM303AGR_ACC_ReadRegisters(LSM303AGR *dev, uint8_t reg, uint8_t *data, uint8_t length){
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, 10);
}

HAL_StatusTypeDef LSM303AGR_ACC_WriteRegister(LSM303AGR *dev, uint8_t reg, uint8_t *data){
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af04      	add	r7, sp, #16
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	460b      	mov	r3, r1
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	7afb      	ldrb	r3, [r7, #11]
 8005194:	b29a      	uxth	r2, r3
 8005196:	230a      	movs	r3, #10
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	2301      	movs	r3, #1
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2301      	movs	r3, #1
 80051a4:	2132      	movs	r1, #50	; 0x32
 80051a6:	f000 ff39 	bl	800601c <HAL_I2C_Mem_Write>
 80051aa:	4603      	mov	r3, r0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <PCA9847_Initialise>:
#include "PCA9847.h"

uint8_t PCA9847_Initialise(PCA9847 *dev, I2C_HandleTypeDef *i2cHandle) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	601a      	str	r2, [r3, #0]

	/* Store number of transaction errors */
	uint8_t regData;
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]

	/* Set to reset default state (all channels disabled) */
	regData = DISABLE_CHANNELS;
 80051c8:	2300      	movs	r3, #0
 80051ca:	737b      	strb	r3, [r7, #13]
	status = PCA9847_Write(dev, &regData);
 80051cc:	f107 030d 	add.w	r3, r7, #13
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f858 	bl	8005288 <PCA9847_Write>
 80051d8:	4603      	mov	r3, r0
 80051da:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4413      	add	r3, r2
 80051ee:	73fb      	strb	r3, [r7, #15]

	return errNum;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <PCA9847_SetChannel>:

void PCA9847_SetChannel(PCA9847 *dev, uint8_t channelNumber) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	switch (channelNumber) {
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	2b07      	cmp	r3, #7
 800520c:	d82a      	bhi.n	8005264 <PCA9847_SetChannel+0x68>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <PCA9847_SetChannel+0x18>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523b 	.word	0x0800523b
 800521c:	08005241 	.word	0x08005241
 8005220:	08005247 	.word	0x08005247
 8005224:	0800524d 	.word	0x0800524d
 8005228:	08005253 	.word	0x08005253
 800522c:	08005259 	.word	0x08005259
 8005230:	0800525f 	.word	0x0800525f
	case 0:
		regData = ENABLE_CHANNEL_0;
 8005234:	2308      	movs	r3, #8
 8005236:	73fb      	strb	r3, [r7, #15]
		break;
 8005238:	e01a      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 1:
		regData = ENABLE_CHANNEL_1;
 800523a:	2309      	movs	r3, #9
 800523c:	73fb      	strb	r3, [r7, #15]
		break;
 800523e:	e017      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 2:
		regData = ENABLE_CHANNEL_2;
 8005240:	230a      	movs	r3, #10
 8005242:	73fb      	strb	r3, [r7, #15]
		break;
 8005244:	e014      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 3:
		regData = ENABLE_CHANNEL_3;
 8005246:	230b      	movs	r3, #11
 8005248:	73fb      	strb	r3, [r7, #15]
		break;
 800524a:	e011      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 4:
		regData = ENABLE_CHANNEL_4;
 800524c:	230c      	movs	r3, #12
 800524e:	73fb      	strb	r3, [r7, #15]
		break;
 8005250:	e00e      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 5:
		regData = ENABLE_CHANNEL_5;
 8005252:	230d      	movs	r3, #13
 8005254:	73fb      	strb	r3, [r7, #15]
		break;
 8005256:	e00b      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 6:
		regData = ENABLE_CHANNEL_6;
 8005258:	230e      	movs	r3, #14
 800525a:	73fb      	strb	r3, [r7, #15]
		break;
 800525c:	e008      	b.n	8005270 <PCA9847_SetChannel+0x74>
	case 7:
		regData = ENABLE_CHANNEL_7;
 800525e:	230f      	movs	r3, #15
 8005260:	73fb      	strb	r3, [r7, #15]
		break;
 8005262:	e005      	b.n	8005270 <PCA9847_SetChannel+0x74>
	default:
		printf("Channelnumber should be 0-7 but is %d \r\n", channelNumber);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	4619      	mov	r1, r3
 8005268:	4806      	ldr	r0, [pc, #24]	; (8005284 <PCA9847_SetChannel+0x88>)
 800526a:	f008 ffa1 	bl	800e1b0 <iprintf>
 800526e:	e005      	b.n	800527c <PCA9847_SetChannel+0x80>
		return;
	}
	PCA9847_Write(dev, &regData);
 8005270:	f107 030f 	add.w	r3, r7, #15
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f806 	bl	8005288 <PCA9847_Write>
}
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	08010b20 	.word	0x08010b20

08005288 <PCA9847_Write>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef PCA9847_Write(PCA9847 *dev, uint8_t *data) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af02      	add	r7, sp, #8
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	230a      	movs	r3, #10
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	2301      	movs	r3, #1
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	21e2      	movs	r1, #226	; 0xe2
 80052a0:	f000 fcd2 	bl	8005c48 <HAL_I2C_Master_Transmit>
 80052a4:	4603      	mov	r3, r0
			10);
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <SHT41_read>:

#include "SHT41.h"
#include <stdbool.h>


bool SHT41_read(SHT41 *dev) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08e      	sub	sp, #56	; 0x38
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
	//PCA9847_SetChannel(dev->multiplexer, dev->Multiplexer_Channel);
	HAL_StatusTypeDef status;
	uint8_t value[6] = { 0 };
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	2300      	movs	r3, #0
 80052be:	823b      	strh	r3, [r7, #16]
	status = HAL_I2C_Master_Transmit(dev->i2cHandle, SHT41_I2C_ADDR, MEASURE_HIGHP, 1, MIN_TIMEOUT);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	230a      	movs	r3, #10
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2301      	movs	r3, #1
 80052ca:	22fd      	movs	r2, #253	; 0xfd
 80052cc:	2188      	movs	r1, #136	; 0x88
 80052ce:	f000 fcbb 	bl	8005c48 <HAL_I2C_Master_Transmit>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (status != HAL_OK) {
 80052d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <SHT41_read+0x34>
		return false;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e073      	b.n	80053cc <SHT41_read+0x11c>
	}
	HAL_Delay(MIN_TIMEOUT);
 80052e4:	200a      	movs	r0, #10
 80052e6:	f000 f8f5 	bl	80054d4 <HAL_Delay>
	//status = HAL_I2C_Master_Receive(dev->i2cHandle, SHT41_I2C_ADDR, value, 6, MIN_TIMEOUT);
	status = HAL_I2C_Master_Receive(dev->i2cHandle, 0x44 << 1, value, 6, 10);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f107 020c 	add.w	r2, r7, #12
 80052f2:	230a      	movs	r3, #10
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2306      	movs	r3, #6
 80052f8:	2188      	movs	r1, #136	; 0x88
 80052fa:	f000 fd99 	bl	8005e30 <HAL_I2C_Master_Receive>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (status != HAL_OK) {
 8005304:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <SHT41_read+0x60>
		return false;
 800530c:	2300      	movs	r3, #0
 800530e:	e05d      	b.n	80053cc <SHT41_read+0x11c>
	}

	float t_ticks = value[0] * 256 + value[1];
 8005310:	7b3b      	ldrb	r3, [r7, #12]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	7b7a      	ldrb	r2, [r7, #13]
 8005316:	4413      	add	r3, r2
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005320:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float checksum_t = value[2];
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	edc7 7a08 	vstr	s15, [r7, #32]
	float rh_ticks = value[3] * 256 + value[4];
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	7c3a      	ldrb	r2, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005342:	edc7 7a07 	vstr	s15, [r7, #28]
	float checksum_rh = value[5];
 8005346:	7c7b      	ldrb	r3, [r7, #17]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005350:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_degC = -45 + 175 * t_ticks / 65535;
 8005354:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005358:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80053d4 <SHT41_read+0x124>
 800535c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005360:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80053d8 <SHT41_read+0x128>
 8005364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005368:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80053dc <SHT41_read+0x12c>
 800536c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005370:	edc7 7a05 	vstr	s15, [r7, #20]
	float rh_pRH = -6 + 125 * rh_ticks / 65535;
 8005374:	edd7 7a07 	vldr	s15, [r7, #28]
 8005378:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80053e0 <SHT41_read+0x130>
 800537c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005380:	eddf 6a15 	vldr	s13, [pc, #84]	; 80053d8 <SHT41_read+0x128>
 8005384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005388:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800538c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005390:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if (rh_pRH > 100) {
 8005394:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005398:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80053e4 <SHT41_read+0x134>
 800539c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a4:	dd01      	ble.n	80053aa <SHT41_read+0xfa>
		rh_pRH = 100;
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <SHT41_read+0x138>)
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (rh_pRH < 0) {
 80053aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	d502      	bpl.n	80053be <SHT41_read+0x10e>
		rh_pRH = 0;
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	dev->t_degC = t_degC;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
	dev->rh_pRH = rh_pRH;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c8:	60da      	str	r2, [r3, #12]
	return true;
 80053ca:	2301      	movs	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	; 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	432f0000 	.word	0x432f0000
 80053d8:	477fff00 	.word	0x477fff00
 80053dc:	42340000 	.word	0x42340000
 80053e0:	42fa0000 	.word	0x42fa0000
 80053e4:	42c80000 	.word	0x42c80000
 80053e8:	42c80000 	.word	0x42c80000

080053ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f6:	2003      	movs	r0, #3
 80053f8:	f000 f960 	bl	80056bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053fc:	200f      	movs	r0, #15
 80053fe:	f000 f80d 	bl	800541c <HAL_InitTick>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	71fb      	strb	r3, [r7, #7]
 800540c:	e001      	b.n	8005412 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800540e:	f7fe fd29 	bl	8003e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005412:	79fb      	ldrb	r3, [r7, #7]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <HAL_InitTick+0x6c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d023      	beq.n	8005478 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005430:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_InitTick+0x70>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <HAL_InitTick+0x6c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4619      	mov	r1, r3
 800543a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f96d 	bl	8005726 <HAL_SYSTICK_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d809      	bhi.n	800546c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005458:	2200      	movs	r2, #0
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	f000 f937 	bl	80056d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <HAL_InitTick+0x74>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e007      	b.n	800547c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e004      	b.n	800547c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	e001      	b.n	800547c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000214 	.word	0x20000214
 800548c:	2000020c 	.word	0x2000020c
 8005490:	20000210 	.word	0x20000210

08005494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_IncTick+0x20>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_IncTick+0x24>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <HAL_IncTick+0x24>)
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000214 	.word	0x20000214
 80054b8:	200007a0 	.word	0x200007a0

080054bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return uwTick;
 80054c0:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <HAL_GetTick+0x14>)
 80054c2:	681b      	ldr	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	200007a0 	.word	0x200007a0

080054d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054dc:	f7ff ffee 	bl	80054bc <HAL_GetTick>
 80054e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d005      	beq.n	80054fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_Delay+0x44>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054fa:	bf00      	nop
 80054fc:	f7ff ffde 	bl	80054bc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	429a      	cmp	r2, r3
 800550a:	d8f7      	bhi.n	80054fc <HAL_Delay+0x28>
  {
  }
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000214 	.word	0x20000214

0800551c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <__NVIC_SetPriorityGrouping+0x44>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554e:	4a04      	ldr	r2, [pc, #16]	; (8005560 <__NVIC_SetPriorityGrouping+0x44>)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	60d3      	str	r3, [r2, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <__NVIC_GetPriorityGrouping+0x18>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0307 	and.w	r3, r3, #7
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db0b      	blt.n	80055aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	f003 021f 	and.w	r2, r3, #31
 8005598:	4907      	ldr	r1, [pc, #28]	; (80055b8 <__NVIC_EnableIRQ+0x38>)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	2001      	movs	r0, #1
 80055a2:	fa00 f202 	lsl.w	r2, r0, r2
 80055a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e100 	.word	0xe000e100

080055bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	6039      	str	r1, [r7, #0]
 80055c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db0a      	blt.n	80055e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <__NVIC_SetPriority+0x4c>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	440b      	add	r3, r1
 80055e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e4:	e00a      	b.n	80055fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4908      	ldr	r1, [pc, #32]	; (800560c <__NVIC_SetPriority+0x50>)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3b04      	subs	r3, #4
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	761a      	strb	r2, [r3, #24]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000e100 	.word	0xe000e100
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f1c3 0307 	rsb	r3, r3, #7
 800562a:	2b04      	cmp	r3, #4
 800562c:	bf28      	it	cs
 800562e:	2304      	movcs	r3, #4
 8005630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3304      	adds	r3, #4
 8005636:	2b06      	cmp	r3, #6
 8005638:	d902      	bls.n	8005640 <NVIC_EncodePriority+0x30>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b03      	subs	r3, #3
 800563e:	e000      	b.n	8005642 <NVIC_EncodePriority+0x32>
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	401a      	ands	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005658:	f04f 31ff 	mov.w	r1, #4294967295
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	43d9      	mvns	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	4313      	orrs	r3, r2
         );
}
 800566a:	4618      	mov	r0, r3
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3b01      	subs	r3, #1
 8005684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005688:	d301      	bcc.n	800568e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800568a:	2301      	movs	r3, #1
 800568c:	e00f      	b.n	80056ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <SysTick_Config+0x40>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3b01      	subs	r3, #1
 8005694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005696:	210f      	movs	r1, #15
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	f7ff ff8e 	bl	80055bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <SysTick_Config+0x40>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056a6:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <SysTick_Config+0x40>)
 80056a8:	2207      	movs	r2, #7
 80056aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	e000e010 	.word	0xe000e010

080056bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff29 	bl	800551c <__NVIC_SetPriorityGrouping>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	4603      	mov	r3, r0
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056e4:	f7ff ff3e 	bl	8005564 <__NVIC_GetPriorityGrouping>
 80056e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	6978      	ldr	r0, [r7, #20]
 80056f0:	f7ff ff8e 	bl	8005610 <NVIC_EncodePriority>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ff5d 	bl	80055bc <__NVIC_SetPriority>
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff31 	bl	8005580 <__NVIC_EnableIRQ>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffa2 	bl	8005678 <SysTick_Config>
 8005734:	4603      	mov	r3, r0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800574e:	e17f      	b.n	8005a50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2101      	movs	r1, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	4013      	ands	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8171 	beq.w	8005a4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d005      	beq.n	8005780 <HAL_GPIO_Init+0x40>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d130      	bne.n	80057e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057b6:	2201      	movs	r2, #1
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43db      	mvns	r3, r3
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4013      	ands	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 0201 	and.w	r2, r3, #1
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d118      	bne.n	8005820 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80057f4:	2201      	movs	r2, #1
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	08db      	lsrs	r3, r3, #3
 800580a:	f003 0201 	and.w	r2, r3, #1
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b03      	cmp	r3, #3
 800582a:	d017      	beq.n	800585c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d123      	bne.n	80058b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	08da      	lsrs	r2, r3, #3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3208      	adds	r2, #8
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	220f      	movs	r2, #15
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	08da      	lsrs	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3208      	adds	r2, #8
 80058aa:	6939      	ldr	r1, [r7, #16]
 80058ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	2203      	movs	r2, #3
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4013      	ands	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0203 	and.w	r2, r3, #3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80ac 	beq.w	8005a4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_GPIO_Init+0x330>)
 80058f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f6:	4a5e      	ldr	r2, [pc, #376]	; (8005a70 <HAL_GPIO_Init+0x330>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6613      	str	r3, [r2, #96]	; 0x60
 80058fe:	4b5c      	ldr	r3, [pc, #368]	; (8005a70 <HAL_GPIO_Init+0x330>)
 8005900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800590a:	4a5a      	ldr	r2, [pc, #360]	; (8005a74 <HAL_GPIO_Init+0x334>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	3302      	adds	r3, #2
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	220f      	movs	r2, #15
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005934:	d025      	beq.n	8005982 <HAL_GPIO_Init+0x242>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4f      	ldr	r2, [pc, #316]	; (8005a78 <HAL_GPIO_Init+0x338>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01f      	beq.n	800597e <HAL_GPIO_Init+0x23e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4e      	ldr	r2, [pc, #312]	; (8005a7c <HAL_GPIO_Init+0x33c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d019      	beq.n	800597a <HAL_GPIO_Init+0x23a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4d      	ldr	r2, [pc, #308]	; (8005a80 <HAL_GPIO_Init+0x340>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_GPIO_Init+0x236>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4c      	ldr	r2, [pc, #304]	; (8005a84 <HAL_GPIO_Init+0x344>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00d      	beq.n	8005972 <HAL_GPIO_Init+0x232>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4b      	ldr	r2, [pc, #300]	; (8005a88 <HAL_GPIO_Init+0x348>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <HAL_GPIO_Init+0x22e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a4a      	ldr	r2, [pc, #296]	; (8005a8c <HAL_GPIO_Init+0x34c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_GPIO_Init+0x22a>
 8005966:	2306      	movs	r3, #6
 8005968:	e00c      	b.n	8005984 <HAL_GPIO_Init+0x244>
 800596a:	2307      	movs	r3, #7
 800596c:	e00a      	b.n	8005984 <HAL_GPIO_Init+0x244>
 800596e:	2305      	movs	r3, #5
 8005970:	e008      	b.n	8005984 <HAL_GPIO_Init+0x244>
 8005972:	2304      	movs	r3, #4
 8005974:	e006      	b.n	8005984 <HAL_GPIO_Init+0x244>
 8005976:	2303      	movs	r3, #3
 8005978:	e004      	b.n	8005984 <HAL_GPIO_Init+0x244>
 800597a:	2302      	movs	r3, #2
 800597c:	e002      	b.n	8005984 <HAL_GPIO_Init+0x244>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <HAL_GPIO_Init+0x244>
 8005982:	2300      	movs	r3, #0
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	f002 0203 	and.w	r2, r2, #3
 800598a:	0092      	lsls	r2, r2, #2
 800598c:	4093      	lsls	r3, r2
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005994:	4937      	ldr	r1, [pc, #220]	; (8005a74 <HAL_GPIO_Init+0x334>)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	3302      	adds	r3, #2
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a2:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_GPIO_Init+0x350>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059c6:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <HAL_GPIO_Init+0x350>)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <HAL_GPIO_Init+0x350>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4013      	ands	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059f0:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <HAL_GPIO_Init+0x350>)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059f6:	4b26      	ldr	r3, [pc, #152]	; (8005a90 <HAL_GPIO_Init+0x350>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_GPIO_Init+0x350>)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <HAL_GPIO_Init+0x350>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a44:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <HAL_GPIO_Init+0x350>)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f ae78 	bne.w	8005750 <HAL_GPIO_Init+0x10>
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40010000 	.word	0x40010000
 8005a78:	48000400 	.word	0x48000400
 8005a7c:	48000800 	.word	0x48000800
 8005a80:	48000c00 	.word	0x48000c00
 8005a84:	48001000 	.word	0x48001000
 8005a88:	48001400 	.word	0x48001400
 8005a8c:	48001800 	.word	0x48001800
 8005a90:	40010400 	.word	0x40010400

08005a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
 8005ab0:	e001      	b.n	8005ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ad4:	787b      	ldrb	r3, [r7, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ae0:	e002      	b.n	8005ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	041a      	lsls	r2, r3, #16
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	43d9      	mvns	r1, r3
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	400b      	ands	r3, r1
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e081      	b.n	8005c3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fe f9ac 	bl	8003eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2224      	movs	r2, #36	; 0x24
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d107      	bne.n	8005ba2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	e006      	b.n	8005bb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d104      	bne.n	8005bc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69d9      	ldr	r1, [r3, #28]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	461a      	mov	r2, r3
 8005c54:	460b      	mov	r3, r1
 8005c56:	817b      	strh	r3, [r7, #10]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	f040 80da 	bne.w	8005e1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x30>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0d3      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c80:	f7ff fc1c 	bl	80054bc <HAL_GetTick>
 8005c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2319      	movs	r3, #25
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fcbc 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0be      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	; 0x21
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	893a      	ldrh	r2, [r7, #8]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2bff      	cmp	r3, #255	; 0xff
 8005cd2:	d90e      	bls.n	8005cf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	22ff      	movs	r2, #255	; 0xff
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	8979      	ldrh	r1, [r7, #10]
 8005ce2:	4b51      	ldr	r3, [pc, #324]	; (8005e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 feb2 	bl	8006a54 <I2C_TransferConfig>
 8005cf0:	e06c      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	8979      	ldrh	r1, [r7, #10]
 8005d04:	4b48      	ldr	r3, [pc, #288]	; (8005e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fea1 	bl	8006a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d12:	e05b      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	6a39      	ldr	r1, [r7, #32]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fcb9 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e07b      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d034      	beq.n	8005dcc <HAL_I2C_Master_Transmit+0x184>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d130      	bne.n	8005dcc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fc4b 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e04d      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2bff      	cmp	r3, #255	; 0xff
 8005d8c:	d90e      	bls.n	8005dac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	22ff      	movs	r2, #255	; 0xff
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	8979      	ldrh	r1, [r7, #10]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fe55 	bl	8006a54 <I2C_TransferConfig>
 8005daa:	e00f      	b.n	8005dcc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	8979      	ldrh	r1, [r7, #10]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fe44 	bl	8006a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d19e      	bne.n	8005d14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fc98 	bl	8006710 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e01a      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2220      	movs	r2, #32
 8005df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_I2C_Master_Transmit+0x1e4>)
 8005dfe:	400b      	ands	r3, r1
 8005e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	80002000 	.word	0x80002000
 8005e2c:	fe00e800 	.word	0xfe00e800

08005e30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	817b      	strh	r3, [r7, #10]
 8005e40:	4613      	mov	r3, r2
 8005e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 80db 	bne.w	8006008 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_I2C_Master_Receive+0x30>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e0d4      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e68:	f7ff fb28 	bl	80054bc <HAL_GetTick>
 8005e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	2319      	movs	r3, #25
 8005e74:	2201      	movs	r2, #1
 8005e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fbc8 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0bf      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2222      	movs	r2, #34	; 0x22
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2210      	movs	r2, #16
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	893a      	ldrh	r2, [r7, #8]
 8005eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2bff      	cmp	r3, #255	; 0xff
 8005eba:	d90e      	bls.n	8005eda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	22ff      	movs	r2, #255	; 0xff
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	8979      	ldrh	r1, [r7, #10]
 8005eca:	4b52      	ldr	r3, [pc, #328]	; (8006014 <HAL_I2C_Master_Receive+0x1e4>)
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fdbe 	bl	8006a54 <I2C_TransferConfig>
 8005ed8:	e06d      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	8979      	ldrh	r1, [r7, #10]
 8005eec:	4b49      	ldr	r3, [pc, #292]	; (8006014 <HAL_I2C_Master_Receive+0x1e4>)
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fdad 	bl	8006a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005efa:	e05c      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	6a39      	ldr	r1, [r7, #32]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fc41 	bl	8006788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e07c      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d034      	beq.n	8005fb6 <HAL_I2C_Master_Receive+0x186>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d130      	bne.n	8005fb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fb56 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e04d      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2bff      	cmp	r3, #255	; 0xff
 8005f76:	d90e      	bls.n	8005f96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	8979      	ldrh	r1, [r7, #10]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fd60 	bl	8006a54 <I2C_TransferConfig>
 8005f94:	e00f      	b.n	8005fb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	8979      	ldrh	r1, [r7, #10]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fd4f 	bl	8006a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d19d      	bne.n	8005efc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	6a39      	ldr	r1, [r7, #32]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fba3 	bl	8006710 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e01a      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <HAL_I2C_Master_Receive+0x1e8>)
 8005fe8:	400b      	ands	r3, r1
 8005fea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	80002400 	.word	0x80002400
 8006018:	fe00e800 	.word	0xfe00e800

0800601c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	817b      	strh	r3, [r7, #10]
 800602e:	460b      	mov	r3, r1
 8006030:	813b      	strh	r3, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b20      	cmp	r3, #32
 8006040:	f040 80f9 	bne.w	8006236 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_I2C_Mem_Write+0x34>
 800604a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0ed      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_I2C_Mem_Write+0x4e>
 8006066:	2302      	movs	r3, #2
 8006068:	e0e6      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006072:	f7ff fa23 	bl	80054bc <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2319      	movs	r3, #25
 800607e:	2201      	movs	r2, #1
 8006080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fac3 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0d1      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2221      	movs	r2, #33	; 0x21
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2240      	movs	r2, #64	; 0x40
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060bc:	88f8      	ldrh	r0, [r7, #6]
 80060be:	893a      	ldrh	r2, [r7, #8]
 80060c0:	8979      	ldrh	r1, [r7, #10]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	4603      	mov	r3, r0
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f9d3 	bl	8006478 <I2C_RequestMemoryWrite>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a9      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2bff      	cmp	r3, #255	; 0xff
 80060ec:	d90e      	bls.n	800610c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	8979      	ldrh	r1, [r7, #10]
 80060fc:	2300      	movs	r3, #0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fca5 	bl	8006a54 <I2C_TransferConfig>
 800610a:	e00f      	b.n	800612c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	b2da      	uxtb	r2, r3
 800611c:	8979      	ldrh	r1, [r7, #10]
 800611e:	2300      	movs	r3, #0
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fc94 	bl	8006a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 faad 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e07b      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d034      	beq.n	80061e4 <HAL_I2C_Mem_Write+0x1c8>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d130      	bne.n	80061e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fa3f 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e04d      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d90e      	bls.n	80061c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	8979      	ldrh	r1, [r7, #10]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fc49 	bl	8006a54 <I2C_TransferConfig>
 80061c2:	e00f      	b.n	80061e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	8979      	ldrh	r1, [r7, #10]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fc38 	bl	8006a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d19e      	bne.n	800612c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa8c 	bl	8006710 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01a      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2220      	movs	r2, #32
 8006208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <HAL_I2C_Mem_Write+0x224>)
 8006216:	400b      	ands	r3, r1
 8006218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	fe00e800 	.word	0xfe00e800

08006244 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	4608      	mov	r0, r1
 800624e:	4611      	mov	r1, r2
 8006250:	461a      	mov	r2, r3
 8006252:	4603      	mov	r3, r0
 8006254:	817b      	strh	r3, [r7, #10]
 8006256:	460b      	mov	r3, r1
 8006258:	813b      	strh	r3, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b20      	cmp	r3, #32
 8006268:	f040 80fd 	bne.w	8006466 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_I2C_Mem_Read+0x34>
 8006272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0f1      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_I2C_Mem_Read+0x4e>
 800628e:	2302      	movs	r3, #2
 8006290:	e0ea      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800629a:	f7ff f90f 	bl	80054bc <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	2319      	movs	r3, #25
 80062a6:	2201      	movs	r2, #1
 80062a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f9af 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0d5      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2222      	movs	r2, #34	; 0x22
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2240      	movs	r2, #64	; 0x40
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062e4:	88f8      	ldrh	r0, [r7, #6]
 80062e6:	893a      	ldrh	r2, [r7, #8]
 80062e8:	8979      	ldrh	r1, [r7, #10]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	4603      	mov	r3, r0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f913 	bl	8006520 <I2C_RequestMemoryRead>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0ad      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2bff      	cmp	r3, #255	; 0xff
 8006314:	d90e      	bls.n	8006334 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	b2da      	uxtb	r2, r3
 8006322:	8979      	ldrh	r1, [r7, #10]
 8006324:	4b52      	ldr	r3, [pc, #328]	; (8006470 <HAL_I2C_Mem_Read+0x22c>)
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fb91 	bl	8006a54 <I2C_TransferConfig>
 8006332:	e00f      	b.n	8006354 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006342:	b2da      	uxtb	r2, r3
 8006344:	8979      	ldrh	r1, [r7, #10]
 8006346:	4b4a      	ldr	r3, [pc, #296]	; (8006470 <HAL_I2C_Mem_Read+0x22c>)
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fb80 	bl	8006a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2200      	movs	r2, #0
 800635c:	2104      	movs	r1, #4
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f956 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07c      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d034      	beq.n	8006414 <HAL_I2C_Mem_Read+0x1d0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d130      	bne.n	8006414 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f927 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e04d      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2bff      	cmp	r3, #255	; 0xff
 80063d4:	d90e      	bls.n	80063f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	8979      	ldrh	r1, [r7, #10]
 80063e4:	2300      	movs	r3, #0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fb31 	bl	8006a54 <I2C_TransferConfig>
 80063f2:	e00f      	b.n	8006414 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006402:	b2da      	uxtb	r2, r3
 8006404:	8979      	ldrh	r1, [r7, #10]
 8006406:	2300      	movs	r3, #0
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fb20 	bl	8006a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d19a      	bne.n	8006354 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f974 	bl	8006710 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e01a      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2220      	movs	r2, #32
 8006438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_I2C_Mem_Read+0x230>)
 8006446:	400b      	ands	r3, r1
 8006448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	80002400 	.word	0x80002400
 8006474:	fe00e800 	.word	0xfe00e800

08006478 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4603      	mov	r3, r0
 8006488:	817b      	strh	r3, [r7, #10]
 800648a:	460b      	mov	r3, r1
 800648c:	813b      	strh	r3, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	4b20      	ldr	r3, [pc, #128]	; (800651c <I2C_RequestMemoryWrite+0xa4>)
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fad7 	bl	8006a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f8f0 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e02c      	b.n	8006514 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064c0:	893b      	ldrh	r3, [r7, #8]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28
 80064ca:	e015      	b.n	80064f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	69b9      	ldr	r1, [r7, #24]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f8d6 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e012      	b.n	8006514 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ee:	893b      	ldrh	r3, [r7, #8]
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2200      	movs	r2, #0
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f884 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	80002000 	.word	0x80002000

08006520 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	4603      	mov	r3, r0
 8006530:	817b      	strh	r3, [r7, #10]
 8006532:	460b      	mov	r3, r1
 8006534:	813b      	strh	r3, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	4b20      	ldr	r3, [pc, #128]	; (80065c4 <I2C_RequestMemoryRead+0xa4>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa84 	bl	8006a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f89d 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e02c      	b.n	80065ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
 8006570:	e015      	b.n	800659e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006572:	893b      	ldrh	r3, [r7, #8]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b29b      	uxth	r3, r3
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f883 	bl	8006690 <I2C_WaitOnTXISFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e012      	b.n	80065ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2140      	movs	r1, #64	; 0x40
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f831 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	80002000 	.word	0x80002000

080065c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d103      	bne.n	80065e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d007      	beq.n	8006604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	619a      	str	r2, [r3, #24]
  }
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006620:	e022      	b.n	8006668 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d01e      	beq.n	8006668 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fe ff47 	bl	80054bc <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d113      	bne.n	8006668 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e00f      	b.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	bf0c      	ite	eq
 8006678:	2301      	moveq	r3, #1
 800667a:	2300      	movne	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	429a      	cmp	r2, r3
 8006684:	d0cd      	beq.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800669c:	e02c      	b.n	80066f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f8ea 	bl	800687c <I2C_IsErrorOccurred>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e02a      	b.n	8006708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d01e      	beq.n	80066f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fe feff 	bl	80054bc <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d113      	bne.n	80066f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e007      	b.n	8006708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b02      	cmp	r3, #2
 8006704:	d1cb      	bne.n	800669e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800671c:	e028      	b.n	8006770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f8aa 	bl	800687c <I2C_IsErrorOccurred>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e026      	b.n	8006780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006732:	f7fe fec3 	bl	80054bc <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d113      	bne.n	8006770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e007      	b.n	8006780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d1cf      	bne.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006794:	e064      	b.n	8006860 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f86e 	bl	800687c <I2C_IsErrorOccurred>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e062      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d138      	bne.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d105      	bne.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e04e      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d107      	bne.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2210      	movs	r2, #16
 80067e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2204      	movs	r2, #4
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
 80067ee:	e002      	b.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2220      	movs	r2, #32
 80067fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800680a:	400b      	ands	r3, r1
 800680c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fe fe47 	bl	80054bc <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10f      	bne.n	8006860 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e007      	b.n	8006870 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d193      	bne.n	8006796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	fe00e800 	.word	0xfe00e800

0800687c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	; 0x28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d075      	beq.n	8006994 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2210      	movs	r2, #16
 80068ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068b0:	e056      	b.n	8006960 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d052      	beq.n	8006960 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fe fdff 	bl	80054bc <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <I2C_IsErrorOccurred+0x54>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d147      	bne.n	8006960 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f2:	d12e      	bne.n	8006952 <I2C_IsErrorOccurred+0xd6>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fa:	d02a      	beq.n	8006952 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d027      	beq.n	8006952 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006910:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006912:	f7fe fdd3 	bl	80054bc <HAL_GetTick>
 8006916:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006918:	e01b      	b.n	8006952 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800691a:	f7fe fdcf 	bl	80054bc <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b19      	cmp	r3, #25
 8006926:	d914      	bls.n	8006952 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b20      	cmp	r3, #32
 800695e:	d1dc      	bne.n	800691a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b20      	cmp	r3, #32
 800696c:	d003      	beq.n	8006976 <I2C_IsErrorOccurred+0xfa>
 800696e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006972:	2b00      	cmp	r3, #0
 8006974:	d09d      	beq.n	80068b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2220      	movs	r2, #32
 8006984:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	f043 0308 	orr.w	r3, r3, #8
 80069ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01c      	beq.n	8006a44 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7ff fddc 	bl	80065c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <I2C_IsErrorOccurred+0x1d4>)
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	; 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	fe00e800 	.word	0xfe00e800

08006a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	4613      	mov	r3, r2
 8006a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a6c:	7a7b      	ldrb	r3, [r7, #9]
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	0d5b      	lsrs	r3, r3, #21
 8006a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <I2C_TransferConfig+0x60>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	43db      	mvns	r3, r3
 8006a98:	ea02 0103 	and.w	r1, r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	03ff63ff 	.word	0x03ff63ff

08006ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d138      	bne.n	8006b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e032      	b.n	8006b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2224      	movs	r2, #36	; 0x24
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6819      	ldr	r1, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d139      	bne.n	8006bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e033      	b.n	8006bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2224      	movs	r2, #36	; 0x24
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40007000 	.word	0x40007000

08006c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c12:	d130      	bne.n	8006c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c14:	4b23      	ldr	r3, [pc, #140]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c20:	d038      	beq.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c22:	4b20      	ldr	r3, [pc, #128]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c32:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2232      	movs	r2, #50	; 0x32
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	; (8006cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	0c9b      	lsrs	r3, r3, #18
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c48:	e002      	b.n	8006c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c50:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5c:	d102      	bne.n	8006c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f2      	bne.n	8006c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c70:	d110      	bne.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e00f      	b.n	8006c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c82:	d007      	beq.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c8c:	4a05      	ldr	r2, [pc, #20]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40007000 	.word	0x40007000
 8006ca8:	2000020c 	.word	0x2000020c
 8006cac:	431bde83 	.word	0x431bde83

08006cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e3ca      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc2:	4b97      	ldr	r3, [pc, #604]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ccc:	4b94      	ldr	r3, [pc, #592]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80e4 	beq.w	8006eac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCC_OscConfig+0x4a>
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b0c      	cmp	r3, #12
 8006cee:	f040 808b 	bne.w	8006e08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 8087 	bne.w	8006e08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cfa:	4b89      	ldr	r3, [pc, #548]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_RCC_OscConfig+0x62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e3a2      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <HAL_RCC_OscConfig+0x7c>
 8006d22:	4b7f      	ldr	r3, [pc, #508]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2a:	e005      	b.n	8006d38 <HAL_RCC_OscConfig+0x88>
 8006d2c:	4b7c      	ldr	r3, [pc, #496]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d223      	bcs.n	8006d84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fd55 	bl	80077f0 <RCC_SetFlashLatencyFromMSIRange>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e383      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d50:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a72      	ldr	r2, [pc, #456]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d56:	f043 0308 	orr.w	r3, r3, #8
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	496d      	ldr	r1, [pc, #436]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d6e:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	4968      	ldr	r1, [pc, #416]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	604b      	str	r3, [r1, #4]
 8006d82:	e025      	b.n	8006dd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d84:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a65      	ldr	r2, [pc, #404]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d8a:	f043 0308 	orr.w	r3, r3, #8
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	4960      	ldr	r1, [pc, #384]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006da2:	4b5f      	ldr	r3, [pc, #380]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	495b      	ldr	r1, [pc, #364]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fd15 	bl	80077f0 <RCC_SetFlashLatencyFromMSIRange>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e343      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dd0:	f000 fc4a 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b52      	ldr	r3, [pc, #328]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	4950      	ldr	r1, [pc, #320]	; (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	4a4e      	ldr	r2, [pc, #312]	; (8006f28 <HAL_RCC_OscConfig+0x278>)
 8006dee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006df0:	4b4e      	ldr	r3, [pc, #312]	; (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fb11 	bl	800541c <HAL_InitTick>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d052      	beq.n	8006eaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	e327      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d032      	beq.n	8006e76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e10:	4b43      	ldr	r3, [pc, #268]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a42      	ldr	r2, [pc, #264]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e1c:	f7fe fb4e 	bl	80054bc <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e24:	f7fe fb4a 	bl	80054bc <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e310      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e36:	4b3a      	ldr	r3, [pc, #232]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f0      	beq.n	8006e24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e42:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a36      	ldr	r2, [pc, #216]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	4931      	ldr	r1, [pc, #196]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e60:	4b2f      	ldr	r3, [pc, #188]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	492c      	ldr	r1, [pc, #176]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	e01a      	b.n	8006eac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e76:	4b2a      	ldr	r3, [pc, #168]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e82:	f7fe fb1b 	bl	80054bc <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e8a:	f7fe fb17 	bl	80054bc <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e2dd      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e9c:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f0      	bne.n	8006e8a <HAL_RCC_OscConfig+0x1da>
 8006ea8:	e000      	b.n	8006eac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d074      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d005      	beq.n	8006eca <HAL_RCC_OscConfig+0x21a>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d10e      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d10b      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d064      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x2f0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d160      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e2ba      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eea:	d106      	bne.n	8006efa <HAL_RCC_OscConfig+0x24a>
 8006eec:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	e026      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f02:	d115      	bne.n	8006f30 <HAL_RCC_OscConfig+0x280>
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a02      	ldr	r2, [pc, #8]	; (8006f20 <HAL_RCC_OscConfig+0x270>)
 8006f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	e014      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
 8006f1e:	bf00      	nop
 8006f20:	40021000 	.word	0x40021000
 8006f24:	08010c1c 	.word	0x08010c1c
 8006f28:	2000020c 	.word	0x2000020c
 8006f2c:	20000210 	.word	0x20000210
 8006f30:	4ba0      	ldr	r3, [pc, #640]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a9f      	ldr	r2, [pc, #636]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4b9d      	ldr	r3, [pc, #628]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a9c      	ldr	r2, [pc, #624]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d013      	beq.n	8006f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f50:	f7fe fab4 	bl	80054bc <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f58:	f7fe fab0 	bl	80054bc <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b64      	cmp	r3, #100	; 0x64
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e276      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f6a:	4b92      	ldr	r3, [pc, #584]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x2a8>
 8006f76:	e014      	b.n	8006fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fe faa0 	bl	80054bc <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f80:	f7fe fa9c 	bl	80054bc <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b64      	cmp	r3, #100	; 0x64
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e262      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f92:	4b88      	ldr	r3, [pc, #544]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x2d0>
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d060      	beq.n	8007070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x310>
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b0c      	cmp	r3, #12
 8006fb8:	d119      	bne.n	8006fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d116      	bne.n	8006fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fc0:	4b7c      	ldr	r3, [pc, #496]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x328>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e23f      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd8:	4b76      	ldr	r3, [pc, #472]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	061b      	lsls	r3, r3, #24
 8006fe6:	4973      	ldr	r1, [pc, #460]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fec:	e040      	b.n	8007070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d023      	beq.n	800703e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff6:	4b6f      	ldr	r3, [pc, #444]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a6e      	ldr	r2, [pc, #440]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007002:	f7fe fa5b 	bl	80054bc <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007008:	e008      	b.n	800701c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700a:	f7fe fa57 	bl	80054bc <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e21d      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800701c:	4b65      	ldr	r3, [pc, #404]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0f0      	beq.n	800700a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007028:	4b62      	ldr	r3, [pc, #392]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	495f      	ldr	r1, [pc, #380]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]
 800703c:	e018      	b.n	8007070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703e:	4b5d      	ldr	r3, [pc, #372]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a5c      	ldr	r2, [pc, #368]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fe fa37 	bl	80054bc <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007052:	f7fe fa33 	bl	80054bc <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e1f9      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007064:	4b53      	ldr	r3, [pc, #332]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f0      	bne.n	8007052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d03c      	beq.n	80070f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01c      	beq.n	80070be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007084:	4b4b      	ldr	r3, [pc, #300]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800708a:	4a4a      	ldr	r2, [pc, #296]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fe fa12 	bl	80054bc <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709c:	f7fe fa0e 	bl	80054bc <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e1d4      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070ae:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80070b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ef      	beq.n	800709c <HAL_RCC_OscConfig+0x3ec>
 80070bc:	e01b      	b.n	80070f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070be:	4b3d      	ldr	r3, [pc, #244]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80070c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c4:	4a3b      	ldr	r2, [pc, #236]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ce:	f7fe f9f5 	bl	80054bc <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d6:	f7fe f9f1 	bl	80054bc <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e1b7      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e8:	4b32      	ldr	r3, [pc, #200]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80070ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1ef      	bne.n	80070d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80a6 	beq.w	8007250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007104:	2300      	movs	r3, #0
 8007106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007108:	4b2a      	ldr	r3, [pc, #168]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800710a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007114:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800711a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711e:	6593      	str	r3, [r2, #88]	; 0x58
 8007120:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800712c:	2301      	movs	r3, #1
 800712e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <HAL_RCC_OscConfig+0x508>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d118      	bne.n	800716e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800713c:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <HAL_RCC_OscConfig+0x508>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_RCC_OscConfig+0x508>)
 8007142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007148:	f7fe f9b8 	bl	80054bc <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007150:	f7fe f9b4 	bl	80054bc <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e17a      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007162:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <HAL_RCC_OscConfig+0x508>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f0      	beq.n	8007150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d108      	bne.n	8007188 <HAL_RCC_OscConfig+0x4d8>
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007186:	e029      	b.n	80071dc <HAL_RCC_OscConfig+0x52c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b05      	cmp	r3, #5
 800718e:	d115      	bne.n	80071bc <HAL_RCC_OscConfig+0x50c>
 8007190:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	4a07      	ldr	r2, [pc, #28]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 8007198:	f043 0304 	orr.w	r3, r3, #4
 800719c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071a0:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	4a03      	ldr	r2, [pc, #12]	; (80071b4 <HAL_RCC_OscConfig+0x504>)
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071b0:	e014      	b.n	80071dc <HAL_RCC_OscConfig+0x52c>
 80071b2:	bf00      	nop
 80071b4:	40021000 	.word	0x40021000
 80071b8:	40007000 	.word	0x40007000
 80071bc:	4b9c      	ldr	r3, [pc, #624]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	4a9b      	ldr	r2, [pc, #620]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071cc:	4b98      	ldr	r3, [pc, #608]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80071ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d2:	4a97      	ldr	r2, [pc, #604]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80071d4:	f023 0304 	bic.w	r3, r3, #4
 80071d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d016      	beq.n	8007212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e4:	f7fe f96a 	bl	80054bc <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ec:	f7fe f966 	bl	80054bc <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e12a      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007202:	4b8b      	ldr	r3, [pc, #556]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0ed      	beq.n	80071ec <HAL_RCC_OscConfig+0x53c>
 8007210:	e015      	b.n	800723e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fe f953 	bl	80054bc <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007218:	e00a      	b.n	8007230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721a:	f7fe f94f 	bl	80054bc <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	f241 3288 	movw	r2, #5000	; 0x1388
 8007228:	4293      	cmp	r3, r2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e113      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007230:	4b7f      	ldr	r3, [pc, #508]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1ed      	bne.n	800721a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800723e:	7ffb      	ldrb	r3, [r7, #31]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d105      	bne.n	8007250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007244:	4b7a      	ldr	r3, [pc, #488]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	4a79      	ldr	r2, [pc, #484]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 800724a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80fe 	beq.w	8007456 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	2b02      	cmp	r3, #2
 8007260:	f040 80d0 	bne.w	8007404 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007264:	4b72      	ldr	r3, [pc, #456]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f003 0203 	and.w	r2, r3, #3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d130      	bne.n	80072da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	3b01      	subs	r3, #1
 8007284:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007286:	429a      	cmp	r2, r3
 8007288:	d127      	bne.n	80072da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007296:	429a      	cmp	r2, r3
 8007298:	d11f      	bne.n	80072da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072a4:	2a07      	cmp	r2, #7
 80072a6:	bf14      	ite	ne
 80072a8:	2201      	movne	r2, #1
 80072aa:	2200      	moveq	r2, #0
 80072ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d113      	bne.n	80072da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	3b01      	subs	r3, #1
 80072c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d109      	bne.n	80072da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	3b01      	subs	r3, #1
 80072d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d06e      	beq.n	80073b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	d069      	beq.n	80073b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072e0:	4b53      	ldr	r3, [pc, #332]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80072ec:	4b50      	ldr	r3, [pc, #320]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0ad      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072fc:	4b4c      	ldr	r3, [pc, #304]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a4b      	ldr	r2, [pc, #300]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007306:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007308:	f7fe f8d8 	bl	80054bc <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fe f8d4 	bl	80054bc <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e09a      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007322:	4b43      	ldr	r3, [pc, #268]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f0      	bne.n	8007310 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800732e:	4b40      	ldr	r3, [pc, #256]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	4b40      	ldr	r3, [pc, #256]	; (8007434 <HAL_RCC_OscConfig+0x784>)
 8007334:	4013      	ands	r3, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800733e:	3a01      	subs	r2, #1
 8007340:	0112      	lsls	r2, r2, #4
 8007342:	4311      	orrs	r1, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007348:	0212      	lsls	r2, r2, #8
 800734a:	4311      	orrs	r1, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007350:	0852      	lsrs	r2, r2, #1
 8007352:	3a01      	subs	r2, #1
 8007354:	0552      	lsls	r2, r2, #21
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800735c:	0852      	lsrs	r2, r2, #1
 800735e:	3a01      	subs	r2, #1
 8007360:	0652      	lsls	r2, r2, #25
 8007362:	4311      	orrs	r1, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007368:	0912      	lsrs	r2, r2, #4
 800736a:	0452      	lsls	r2, r2, #17
 800736c:	430a      	orrs	r2, r1
 800736e:	4930      	ldr	r1, [pc, #192]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007370:	4313      	orrs	r3, r2
 8007372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007374:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2d      	ldr	r2, [pc, #180]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 800737a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800737e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007380:	4b2b      	ldr	r3, [pc, #172]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800738a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800738c:	f7fe f896 	bl	80054bc <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007394:	f7fe f892 	bl	80054bc <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e058      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073a6:	4b22      	ldr	r3, [pc, #136]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073b2:	e050      	b.n	8007456 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e04f      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d148      	bne.n	8007456 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80073c4:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a19      	ldr	r2, [pc, #100]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	4a16      	ldr	r2, [pc, #88]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073dc:	f7fe f86e 	bl	80054bc <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e4:	f7fe f86a 	bl	80054bc <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e030      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x734>
 8007402:	e028      	b.n	8007456 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b0c      	cmp	r3, #12
 8007408:	d023      	beq.n	8007452 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a08      	ldr	r2, [pc, #32]	; (8007430 <HAL_RCC_OscConfig+0x780>)
 8007410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fe f851 	bl	80054bc <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800741c:	e00c      	b.n	8007438 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741e:	f7fe f84d 	bl	80054bc <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d905      	bls.n	8007438 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e013      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
 8007430:	40021000 	.word	0x40021000
 8007434:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007438:	4b09      	ldr	r3, [pc, #36]	; (8007460 <HAL_RCC_OscConfig+0x7b0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ec      	bne.n	800741e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <HAL_RCC_OscConfig+0x7b0>)
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	4905      	ldr	r1, [pc, #20]	; (8007460 <HAL_RCC_OscConfig+0x7b0>)
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_RCC_OscConfig+0x7b4>)
 800744c:	4013      	ands	r3, r2
 800744e:	60cb      	str	r3, [r1, #12]
 8007450:	e001      	b.n	8007456 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40021000 	.word	0x40021000
 8007464:	feeefffc 	.word	0xfeeefffc

08007468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e0e7      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800747c:	4b75      	ldr	r3, [pc, #468]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d910      	bls.n	80074ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800748a:	4b72      	ldr	r3, [pc, #456]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f023 0207 	bic.w	r2, r3, #7
 8007492:	4970      	ldr	r1, [pc, #448]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	4313      	orrs	r3, r2
 8007498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800749a:	4b6e      	ldr	r3, [pc, #440]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d001      	beq.n	80074ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0cf      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	4b66      	ldr	r3, [pc, #408]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d908      	bls.n	80074da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c8:	4b63      	ldr	r3, [pc, #396]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	4960      	ldr	r1, [pc, #384]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d04c      	beq.n	8007580 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d107      	bne.n	80074fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ee:	4b5a      	ldr	r3, [pc, #360]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d121      	bne.n	800753e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e0a6      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007506:	4b54      	ldr	r3, [pc, #336]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d115      	bne.n	800753e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e09a      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d107      	bne.n	800752e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800751e:	4b4e      	ldr	r3, [pc, #312]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e08e      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800752e:	4b4a      	ldr	r3, [pc, #296]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e086      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800753e:	4b46      	ldr	r3, [pc, #280]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f023 0203 	bic.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4943      	ldr	r1, [pc, #268]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007550:	f7fd ffb4 	bl	80054bc <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	e00a      	b.n	800756e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007558:	f7fd ffb0 	bl	80054bc <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	; 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d901      	bls.n	800756e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e06e      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756e:	4b3a      	ldr	r3, [pc, #232]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 020c 	and.w	r2, r3, #12
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	429a      	cmp	r2, r3
 800757e:	d1eb      	bne.n	8007558 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d010      	beq.n	80075ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	4b31      	ldr	r3, [pc, #196]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007598:	429a      	cmp	r2, r3
 800759a:	d208      	bcs.n	80075ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800759c:	4b2e      	ldr	r3, [pc, #184]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	492b      	ldr	r1, [pc, #172]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075ae:	4b29      	ldr	r3, [pc, #164]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d210      	bcs.n	80075de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075bc:	4b25      	ldr	r3, [pc, #148]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f023 0207 	bic.w	r2, r3, #7
 80075c4:	4923      	ldr	r1, [pc, #140]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075cc:	4b21      	ldr	r3, [pc, #132]	; (8007654 <HAL_RCC_ClockConfig+0x1ec>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d001      	beq.n	80075de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e036      	b.n	800764c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	4918      	ldr	r1, [pc, #96]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d009      	beq.n	800761c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4910      	ldr	r1, [pc, #64]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800761c:	f000 f824 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <HAL_RCC_ClockConfig+0x1f0>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	091b      	lsrs	r3, r3, #4
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	490b      	ldr	r1, [pc, #44]	; (800765c <HAL_RCC_ClockConfig+0x1f4>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <HAL_RCC_ClockConfig+0x1f8>)
 800763a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <HAL_RCC_ClockConfig+0x1fc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f7fd feeb 	bl	800541c <HAL_InitTick>
 8007646:	4603      	mov	r3, r0
 8007648:	72fb      	strb	r3, [r7, #11]

  return status;
 800764a:	7afb      	ldrb	r3, [r7, #11]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40022000 	.word	0x40022000
 8007658:	40021000 	.word	0x40021000
 800765c:	08010c1c 	.word	0x08010c1c
 8007660:	2000020c 	.word	0x2000020c
 8007664:	20000210 	.word	0x20000210

08007668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007668:	b480      	push	{r7}
 800766a:	b089      	sub	sp, #36	; 0x24
 800766c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x34>
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b0c      	cmp	r3, #12
 8007694:	d121      	bne.n	80076da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d11e      	bne.n	80076da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800769c:	4b34      	ldr	r3, [pc, #208]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d107      	bne.n	80076b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076a8:	4b31      	ldr	r3, [pc, #196]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 80076aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	e005      	b.n	80076c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	091b      	lsrs	r3, r3, #4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80076c4:	4a2b      	ldr	r2, [pc, #172]	; (8007774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80076d8:	e00a      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d102      	bne.n	80076e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076e0:	4b25      	ldr	r3, [pc, #148]	; (8007778 <HAL_RCC_GetSysClockFreq+0x110>)
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	e004      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d101      	bne.n	80076f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <HAL_RCC_GetSysClockFreq+0x114>)
 80076ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b0c      	cmp	r3, #12
 80076f4:	d134      	bne.n	8007760 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076f6:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d003      	beq.n	800770e <HAL_RCC_GetSysClockFreq+0xa6>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d003      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0xac>
 800770c:	e005      	b.n	800771a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <HAL_RCC_GetSysClockFreq+0x110>)
 8007710:	617b      	str	r3, [r7, #20]
      break;
 8007712:	e005      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007714:	4b19      	ldr	r3, [pc, #100]	; (800777c <HAL_RCC_GetSysClockFreq+0x114>)
 8007716:	617b      	str	r3, [r7, #20]
      break;
 8007718:	e002      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	617b      	str	r3, [r7, #20]
      break;
 800771e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007720:	4b13      	ldr	r3, [pc, #76]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	3301      	adds	r3, #1
 800772c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800772e:	4b10      	ldr	r3, [pc, #64]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	fb03 f202 	mul.w	r2, r3, r2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007746:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <HAL_RCC_GetSysClockFreq+0x108>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	0e5b      	lsrs	r3, r3, #25
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	3301      	adds	r3, #1
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	fbb2 f3f3 	udiv	r3, r2, r3
 800775e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007760:	69bb      	ldr	r3, [r7, #24]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3724      	adds	r7, #36	; 0x24
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40021000 	.word	0x40021000
 8007774:	08010c34 	.word	0x08010c34
 8007778:	00f42400 	.word	0x00f42400
 800777c:	007a1200 	.word	0x007a1200

08007780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <HAL_RCC_GetHCLKFreq+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	2000020c 	.word	0x2000020c

08007798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800779c:	f7ff fff0 	bl	8007780 <HAL_RCC_GetHCLKFreq>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	4904      	ldr	r1, [pc, #16]	; (80077c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ae:	5ccb      	ldrb	r3, [r1, r3]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000
 80077c0:	08010c2c 	.word	0x08010c2c

080077c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80077c8:	f7ff ffda 	bl	8007780 <HAL_RCC_GetHCLKFreq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	0adb      	lsrs	r3, r3, #11
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80077da:	5ccb      	ldrb	r3, [r1, r3]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	08010c2c 	.word	0x08010c2c

080077f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007808:	f7ff f9ee 	bl	8006be8 <HAL_PWREx_GetVoltageRange>
 800780c:	6178      	str	r0, [r7, #20]
 800780e:	e014      	b.n	800783a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007810:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	4a24      	ldr	r2, [pc, #144]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800781a:	6593      	str	r3, [r2, #88]	; 0x58
 800781c:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007828:	f7ff f9de 	bl	8006be8 <HAL_PWREx_GetVoltageRange>
 800782c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007840:	d10b      	bne.n	800785a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d919      	bls.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2ba0      	cmp	r3, #160	; 0xa0
 800784c:	d902      	bls.n	8007854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800784e:	2302      	movs	r3, #2
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	e013      	b.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007854:	2301      	movs	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	e010      	b.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d902      	bls.n	8007866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007860:	2303      	movs	r3, #3
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	e00a      	b.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b80      	cmp	r3, #128	; 0x80
 800786a:	d102      	bne.n	8007872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800786c:	2302      	movs	r3, #2
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	e004      	b.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b70      	cmp	r3, #112	; 0x70
 8007876:	d101      	bne.n	800787c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007878:	2301      	movs	r3, #1
 800787a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f023 0207 	bic.w	r2, r3, #7
 8007884:	4909      	ldr	r1, [pc, #36]	; (80078ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800788c:	4b07      	ldr	r3, [pc, #28]	; (80078ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	d001      	beq.n	800789e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40021000 	.word	0x40021000
 80078ac:	40022000 	.word	0x40022000

080078b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078b8:	2300      	movs	r3, #0
 80078ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078bc:	2300      	movs	r3, #0
 80078be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d041      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078d4:	d02a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80078d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078da:	d824      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80078dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e0:	d008      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80078e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e6:	d81e      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80078ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f0:	d010      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078f2:	e018      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078f4:	4b86      	ldr	r3, [pc, #536]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4a85      	ldr	r2, [pc, #532]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007900:	e015      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fa8b 	bl	8007e24 <RCCEx_PLLSAI1_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007912:	e00c      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3320      	adds	r3, #32
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fb76 	bl	800800c <RCCEx_PLLSAI2_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007924:	e003      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	74fb      	strb	r3, [r7, #19]
      break;
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800792c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800792e:	7cfb      	ldrb	r3, [r7, #19]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007934:	4b76      	ldr	r3, [pc, #472]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007942:	4973      	ldr	r1, [pc, #460]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800794a:	e001      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	7cfb      	ldrb	r3, [r7, #19]
 800794e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d041      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007964:	d02a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800796a:	d824      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800796c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007970:	d008      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007976:	d81e      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800797c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007980:	d010      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007982:	e018      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007984:	4b62      	ldr	r3, [pc, #392]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4a61      	ldr	r2, [pc, #388]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800798a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007990:	e015      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3304      	adds	r3, #4
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fa43 	bl	8007e24 <RCCEx_PLLSAI1_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079a2:	e00c      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3320      	adds	r3, #32
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fb2e 	bl	800800c <RCCEx_PLLSAI2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079b4:	e003      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	74fb      	strb	r3, [r7, #19]
      break;
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80079bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10b      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079c4:	4b52      	ldr	r3, [pc, #328]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d2:	494f      	ldr	r1, [pc, #316]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079da:	e001      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079dc:	7cfb      	ldrb	r3, [r7, #19]
 80079de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80a0 	beq.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ee:	2300      	movs	r3, #0
 80079f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079f2:	4b47      	ldr	r3, [pc, #284]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a08:	4b41      	ldr	r3, [pc, #260]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	4a40      	ldr	r2, [pc, #256]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	6593      	str	r3, [r2, #88]	; 0x58
 8007a14:	4b3e      	ldr	r3, [pc, #248]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a20:	2301      	movs	r3, #1
 8007a22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a24:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a3a      	ldr	r2, [pc, #232]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a30:	f7fd fd44 	bl	80054bc <HAL_GetTick>
 8007a34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a36:	e009      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a38:	f7fd fd40 	bl	80054bc <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d902      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	74fb      	strb	r3, [r7, #19]
        break;
 8007a4a:	e005      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a4c:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0ef      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007a58:	7cfb      	ldrb	r3, [r7, #19]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d15c      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a5e:	4b2c      	ldr	r3, [pc, #176]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d019      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a7c:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a88:	4b21      	ldr	r3, [pc, #132]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8e:	4a20      	ldr	r2, [pc, #128]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a98:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9e:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007aa8:	4a19      	ldr	r2, [pc, #100]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aba:	f7fd fcff 	bl	80054bc <HAL_GetTick>
 8007abe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac0:	e00b      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac2:	f7fd fcfb 	bl	80054bc <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d902      	bls.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0ec      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007ae8:	7cfb      	ldrb	r3, [r7, #19]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afe:	4904      	ldr	r1, [pc, #16]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b06:	e009      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	74bb      	strb	r3, [r7, #18]
 8007b0c:	e006      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007b0e:	bf00      	nop
 8007b10:	40021000 	.word	0x40021000
 8007b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	7cfb      	ldrb	r3, [r7, #19]
 8007b1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b1c:	7c7b      	ldrb	r3, [r7, #17]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b22:	4ba1      	ldr	r3, [pc, #644]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	4aa0      	ldr	r2, [pc, #640]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b3a:	4b9b      	ldr	r3, [pc, #620]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b40:	f023 0203 	bic.w	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	4997      	ldr	r1, [pc, #604]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b5c:	4b92      	ldr	r3, [pc, #584]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f023 020c 	bic.w	r2, r3, #12
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	498f      	ldr	r1, [pc, #572]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b7e:	4b8a      	ldr	r3, [pc, #552]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	4986      	ldr	r1, [pc, #536]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ba0:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	497e      	ldr	r1, [pc, #504]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bc2:	4b79      	ldr	r3, [pc, #484]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd0:	4975      	ldr	r1, [pc, #468]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007be4:	4b70      	ldr	r3, [pc, #448]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf2:	496d      	ldr	r1, [pc, #436]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c06:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c14:	4964      	ldr	r1, [pc, #400]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c28:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	495c      	ldr	r1, [pc, #368]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c4a:	4b57      	ldr	r3, [pc, #348]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	4953      	ldr	r1, [pc, #332]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c6c:	4b4e      	ldr	r3, [pc, #312]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	494b      	ldr	r1, [pc, #300]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c8e:	4b46      	ldr	r3, [pc, #280]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9c:	4942      	ldr	r1, [pc, #264]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d028      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cb0:	4b3d      	ldr	r3, [pc, #244]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbe:	493a      	ldr	r1, [pc, #232]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cce:	d106      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cd0:	4b35      	ldr	r3, [pc, #212]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4a34      	ldr	r2, [pc, #208]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cda:	60d3      	str	r3, [r2, #12]
 8007cdc:	e011      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce6:	d10c      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f898 	bl	8007e24 <RCCEx_PLLSAI1_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cf8:	7cfb      	ldrb	r3, [r7, #19]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8007cfe:	7cfb      	ldrb	r3, [r7, #19]
 8007d00:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d028      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	4922      	ldr	r1, [pc, #136]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d2c:	d106      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2e:	4b1e      	ldr	r3, [pc, #120]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	4a1d      	ldr	r2, [pc, #116]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d38:	60d3      	str	r3, [r2, #12]
 8007d3a:	e011      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 f869 	bl	8007e24 <RCCEx_PLLSAI1_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d56:	7cfb      	ldrb	r3, [r7, #19]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007d5c:	7cfb      	ldrb	r3, [r7, #19]
 8007d5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d031      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7a:	490b      	ldr	r1, [pc, #44]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d8a:	d10f      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f846 	bl	8007e24 <RCCEx_PLLSAI1_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d9c:	7cfb      	ldrb	r3, [r7, #19]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8007da2:	7cfb      	ldrb	r3, [r7, #19]
 8007da4:	74bb      	strb	r3, [r7, #18]
 8007da6:	e013      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007da8:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3320      	adds	r3, #32
 8007dba:	2102      	movs	r1, #2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f925 	bl	800800c <RCCEx_PLLSAI2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dc6:	7cfb      	ldrb	r3, [r7, #19]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8007dcc:	7cfb      	ldrb	r3, [r7, #19]
 8007dce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dea:	490d      	ldr	r1, [pc, #52]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0c:	4904      	ldr	r1, [pc, #16]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40021000 	.word	0x40021000

08007e24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e32:	4b75      	ldr	r3, [pc, #468]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e3e:	4b72      	ldr	r3, [pc, #456]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0203 	and.w	r2, r3, #3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10d      	bne.n	8007e6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
       ||
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007e56:	4b6c      	ldr	r3, [pc, #432]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	091b      	lsrs	r3, r3, #4
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
       ||
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d047      	beq.n	8007efa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e044      	b.n	8007efa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d018      	beq.n	8007eaa <RCCEx_PLLSAI1_Config+0x86>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d825      	bhi.n	8007ec8 <RCCEx_PLLSAI1_Config+0xa4>
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d002      	beq.n	8007e86 <RCCEx_PLLSAI1_Config+0x62>
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d009      	beq.n	8007e98 <RCCEx_PLLSAI1_Config+0x74>
 8007e84:	e020      	b.n	8007ec8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e86:	4b60      	ldr	r3, [pc, #384]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d11d      	bne.n	8007ece <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e96:	e01a      	b.n	8007ece <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e98:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d116      	bne.n	8007ed2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ea8:	e013      	b.n	8007ed2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007eaa:	4b57      	ldr	r3, [pc, #348]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10f      	bne.n	8007ed6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007eb6:	4b54      	ldr	r3, [pc, #336]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ec6:	e006      	b.n	8007ed6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ecc:	e004      	b.n	8007ed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ed6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ede:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6819      	ldr	r1, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	4944      	ldr	r1, [pc, #272]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d17d      	bne.n	8007ffc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f00:	4b41      	ldr	r3, [pc, #260]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a40      	ldr	r2, [pc, #256]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f0c:	f7fd fad6 	bl	80054bc <HAL_GetTick>
 8007f10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f12:	e009      	b.n	8007f28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f14:	f7fd fad2 	bl	80054bc <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d902      	bls.n	8007f28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	73fb      	strb	r3, [r7, #15]
        break;
 8007f26:	e005      	b.n	8007f34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f28:	4b37      	ldr	r3, [pc, #220]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1ef      	bne.n	8007f14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d160      	bne.n	8007ffc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d111      	bne.n	8007f64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f40:	4b31      	ldr	r3, [pc, #196]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6892      	ldr	r2, [r2, #8]
 8007f50:	0211      	lsls	r1, r2, #8
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68d2      	ldr	r2, [r2, #12]
 8007f56:	0912      	lsrs	r2, r2, #4
 8007f58:	0452      	lsls	r2, r2, #17
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	492a      	ldr	r1, [pc, #168]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	610b      	str	r3, [r1, #16]
 8007f62:	e027      	b.n	8007fb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d112      	bne.n	8007f90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007f72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6892      	ldr	r2, [r2, #8]
 8007f7a:	0211      	lsls	r1, r2, #8
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6912      	ldr	r2, [r2, #16]
 8007f80:	0852      	lsrs	r2, r2, #1
 8007f82:	3a01      	subs	r2, #1
 8007f84:	0552      	lsls	r2, r2, #21
 8007f86:	430a      	orrs	r2, r1
 8007f88:	491f      	ldr	r1, [pc, #124]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	610b      	str	r3, [r1, #16]
 8007f8e:	e011      	b.n	8007fb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f90:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6892      	ldr	r2, [r2, #8]
 8007fa0:	0211      	lsls	r1, r2, #8
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6952      	ldr	r2, [r2, #20]
 8007fa6:	0852      	lsrs	r2, r2, #1
 8007fa8:	3a01      	subs	r2, #1
 8007faa:	0652      	lsls	r2, r2, #25
 8007fac:	430a      	orrs	r2, r1
 8007fae:	4916      	ldr	r1, [pc, #88]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007fb4:	4b14      	ldr	r3, [pc, #80]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc0:	f7fd fa7c 	bl	80054bc <HAL_GetTick>
 8007fc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fc6:	e009      	b.n	8007fdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fc8:	f7fd fa78 	bl	80054bc <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d902      	bls.n	8007fdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	73fb      	strb	r3, [r7, #15]
          break;
 8007fda:	e005      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0ef      	beq.n	8007fc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007fee:	4b06      	ldr	r3, [pc, #24]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	4904      	ldr	r1, [pc, #16]	; (8008008 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	40021000 	.word	0x40021000

0800800c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800801a:	4b6a      	ldr	r3, [pc, #424]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008026:	4b67      	ldr	r3, [pc, #412]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0203 	and.w	r2, r3, #3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d10d      	bne.n	8008052 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
       ||
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800803e:	4b61      	ldr	r3, [pc, #388]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	091b      	lsrs	r3, r3, #4
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
       ||
 800804e:	429a      	cmp	r2, r3
 8008050:	d047      	beq.n	80080e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
 8008056:	e044      	b.n	80080e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d018      	beq.n	8008092 <RCCEx_PLLSAI2_Config+0x86>
 8008060:	2b03      	cmp	r3, #3
 8008062:	d825      	bhi.n	80080b0 <RCCEx_PLLSAI2_Config+0xa4>
 8008064:	2b01      	cmp	r3, #1
 8008066:	d002      	beq.n	800806e <RCCEx_PLLSAI2_Config+0x62>
 8008068:	2b02      	cmp	r3, #2
 800806a:	d009      	beq.n	8008080 <RCCEx_PLLSAI2_Config+0x74>
 800806c:	e020      	b.n	80080b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800806e:	4b55      	ldr	r3, [pc, #340]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11d      	bne.n	80080b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800807e:	e01a      	b.n	80080b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008080:	4b50      	ldr	r3, [pc, #320]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008088:	2b00      	cmp	r3, #0
 800808a:	d116      	bne.n	80080ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008090:	e013      	b.n	80080ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008092:	4b4c      	ldr	r3, [pc, #304]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10f      	bne.n	80080be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800809e:	4b49      	ldr	r3, [pc, #292]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080ae:	e006      	b.n	80080be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e004      	b.n	80080c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080ba:	bf00      	nop
 80080bc:	e000      	b.n	80080c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080be:	bf00      	nop
    }

    if(status == HAL_OK)
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80080c6:	4b3f      	ldr	r3, [pc, #252]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	430b      	orrs	r3, r1
 80080dc:	4939      	ldr	r1, [pc, #228]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d167      	bne.n	80081b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80080e8:	4b36      	ldr	r3, [pc, #216]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a35      	ldr	r2, [pc, #212]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f4:	f7fd f9e2 	bl	80054bc <HAL_GetTick>
 80080f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80080fa:	e009      	b.n	8008110 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80080fc:	f7fd f9de 	bl	80054bc <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d902      	bls.n	8008110 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
        break;
 800810e:	e005      	b.n	800811c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008110:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ef      	bne.n	80080fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d14a      	bne.n	80081b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d111      	bne.n	800814c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008128:	4b26      	ldr	r3, [pc, #152]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6892      	ldr	r2, [r2, #8]
 8008138:	0211      	lsls	r1, r2, #8
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68d2      	ldr	r2, [r2, #12]
 800813e:	0912      	lsrs	r2, r2, #4
 8008140:	0452      	lsls	r2, r2, #17
 8008142:	430a      	orrs	r2, r1
 8008144:	491f      	ldr	r1, [pc, #124]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008146:	4313      	orrs	r3, r2
 8008148:	614b      	str	r3, [r1, #20]
 800814a:	e011      	b.n	8008170 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800814c:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6892      	ldr	r2, [r2, #8]
 800815c:	0211      	lsls	r1, r2, #8
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6912      	ldr	r2, [r2, #16]
 8008162:	0852      	lsrs	r2, r2, #1
 8008164:	3a01      	subs	r2, #1
 8008166:	0652      	lsls	r2, r2, #25
 8008168:	430a      	orrs	r2, r1
 800816a:	4916      	ldr	r1, [pc, #88]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800816c:	4313      	orrs	r3, r2
 800816e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008170:	4b14      	ldr	r3, [pc, #80]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817c:	f7fd f99e 	bl	80054bc <HAL_GetTick>
 8008180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008182:	e009      	b.n	8008198 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008184:	f7fd f99a 	bl	80054bc <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d902      	bls.n	8008198 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	73fb      	strb	r3, [r7, #15]
          break;
 8008196:	e005      	b.n	80081a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ef      	beq.n	8008184 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	4904      	ldr	r1, [pc, #16]	; (80081c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40021000 	.word	0x40021000

080081c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e095      	b.n	8008306 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d108      	bne.n	80081f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ea:	d009      	beq.n	8008200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	61da      	str	r2, [r3, #28]
 80081f2:	e005      	b.n	8008200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fb fea4 	bl	8003f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008236:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008240:	d902      	bls.n	8008248 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e002      	b.n	800824e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800824c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008256:	d007      	beq.n	8008268 <HAL_SPI_Init+0xa0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008260:	d002      	beq.n	8008268 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008278:	431a      	orrs	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	ea42 0103 	orr.w	r1, r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	f003 0204 	and.w	r2, r3, #4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80082e4:	ea42 0103 	orr.w	r1, r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b088      	sub	sp, #32
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_SPI_Transmit+0x22>
 800832c:	2302      	movs	r3, #2
 800832e:	e158      	b.n	80085e2 <HAL_SPI_Transmit+0x2d4>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008338:	f7fd f8c0 	bl	80054bc <HAL_GetTick>
 800833c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d002      	beq.n	8008354 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800834e:	2302      	movs	r3, #2
 8008350:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008352:	e13d      	b.n	80085d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_SPI_Transmit+0x52>
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008364:	e134      	b.n	80085d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2203      	movs	r2, #3
 800836a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b0:	d10f      	bne.n	80083d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d007      	beq.n	80083f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083f8:	d94b      	bls.n	8008492 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_SPI_Transmit+0xfa>
 8008402:	8afb      	ldrh	r3, [r7, #22]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d13e      	bne.n	8008486 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800842c:	e02b      	b.n	8008486 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b02      	cmp	r3, #2
 800843a:	d112      	bne.n	8008462 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	881a      	ldrh	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	1c9a      	adds	r2, r3, #2
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008460:	e011      	b.n	8008486 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008462:	f7fd f82b 	bl	80054bc <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d803      	bhi.n	800847a <HAL_SPI_Transmit+0x16c>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d102      	bne.n	8008480 <HAL_SPI_Transmit+0x172>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008484:	e0a4      	b.n	80085d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1ce      	bne.n	800842e <HAL_SPI_Transmit+0x120>
 8008490:	e07c      	b.n	800858c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_SPI_Transmit+0x192>
 800849a:	8afb      	ldrh	r3, [r7, #22]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d170      	bne.n	8008582 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d912      	bls.n	80084d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	881a      	ldrh	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	1c9a      	adds	r2, r3, #2
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b02      	subs	r3, #2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084ce:	e058      	b.n	8008582 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084f6:	e044      	b.n	8008582 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b02      	cmp	r3, #2
 8008504:	d12b      	bne.n	800855e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b01      	cmp	r3, #1
 800850e:	d912      	bls.n	8008536 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b02      	subs	r3, #2
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008534:	e025      	b.n	8008582 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	330c      	adds	r3, #12
 8008540:	7812      	ldrb	r2, [r2, #0]
 8008542:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800855c:	e011      	b.n	8008582 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800855e:	f7fc ffad 	bl	80054bc <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d803      	bhi.n	8008576 <HAL_SPI_Transmit+0x268>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008574:	d102      	bne.n	800857c <HAL_SPI_Transmit+0x26e>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008580:	e026      	b.n	80085d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1b5      	bne.n	80084f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fce3 	bl	8008f5c <SPI_EndRxTxTransaction>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	e000      	b.n	80085d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80085ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80085e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af02      	add	r7, sp, #8
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008606:	d112      	bne.n	800862e <HAL_SPI_Receive+0x44>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10e      	bne.n	800862e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2204      	movs	r2, #4
 8008614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008618:	88fa      	ldrh	r2, [r7, #6]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f910 	bl	800884a <HAL_SPI_TransmitReceive>
 800862a:	4603      	mov	r3, r0
 800862c:	e109      	b.n	8008842 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_SPI_Receive+0x52>
 8008638:	2302      	movs	r3, #2
 800863a:	e102      	b.n	8008842 <HAL_SPI_Receive+0x258>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008644:	f7fc ff3a 	bl	80054bc <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d002      	beq.n	800865c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008656:	2302      	movs	r3, #2
 8008658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800865a:	e0e9      	b.n	8008830 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_SPI_Receive+0x7e>
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800866c:	e0e0      	b.n	8008830 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2204      	movs	r2, #4
 8008672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	88fa      	ldrh	r2, [r7, #6]
 8008686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	88fa      	ldrh	r2, [r7, #6]
 800868e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086b8:	d908      	bls.n	80086cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	e007      	b.n	80086dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086e4:	d10f      	bne.n	8008706 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008704:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d007      	beq.n	8008724 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008722:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800872c:	d867      	bhi.n	80087fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800872e:	e030      	b.n	8008792 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	d117      	bne.n	800876e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f103 020c 	add.w	r2, r3, #12
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008760:	b29b      	uxth	r3, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800876c:	e011      	b.n	8008792 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800876e:	f7fc fea5 	bl	80054bc <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d803      	bhi.n	8008786 <HAL_SPI_Receive+0x19c>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008784:	d102      	bne.n	800878c <HAL_SPI_Receive+0x1a2>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008790:	e04e      	b.n	8008830 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008798:	b29b      	uxth	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1c8      	bne.n	8008730 <HAL_SPI_Receive+0x146>
 800879e:	e034      	b.n	800880a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d115      	bne.n	80087da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	b292      	uxth	r2, r2
 80087ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	1c9a      	adds	r2, r3, #2
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80087d8:	e011      	b.n	80087fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087da:	f7fc fe6f 	bl	80054bc <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d803      	bhi.n	80087f2 <HAL_SPI_Receive+0x208>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d102      	bne.n	80087f8 <HAL_SPI_Receive+0x20e>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087fc:	e018      	b.n	8008830 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ca      	bne.n	80087a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fb4c 	bl	8008eac <SPI_EndRxTransaction>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2220      	movs	r2, #32
 800881e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
 800882c:	e000      	b.n	8008830 <HAL_SPI_Receive+0x246>
  }

error :
 800882e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b08a      	sub	sp, #40	; 0x28
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008858:	2301      	movs	r3, #1
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_SPI_TransmitReceive+0x26>
 800886c:	2302      	movs	r3, #2
 800886e:	e1fb      	b.n	8008c68 <HAL_SPI_TransmitReceive+0x41e>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008878:	f7fc fe20 	bl	80054bc <HAL_GetTick>
 800887c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008884:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800888c:	887b      	ldrh	r3, [r7, #2]
 800888e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008894:	7efb      	ldrb	r3, [r7, #27]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d00e      	beq.n	80088b8 <HAL_SPI_TransmitReceive+0x6e>
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a0:	d106      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x66>
 80088aa:	7efb      	ldrb	r3, [r7, #27]
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d003      	beq.n	80088b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80088b0:	2302      	movs	r3, #2
 80088b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80088b6:	e1cd      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x80>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x80>
 80088c4:	887b      	ldrh	r3, [r7, #2]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80088d0:	e1c0      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d003      	beq.n	80088e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2205      	movs	r2, #5
 80088e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	887a      	ldrh	r2, [r7, #2]
 80088f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	887a      	ldrh	r2, [r7, #2]
 800890c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	887a      	ldrh	r2, [r7, #2]
 8008912:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008928:	d802      	bhi.n	8008930 <HAL_SPI_TransmitReceive+0xe6>
 800892a:	8a3b      	ldrh	r3, [r7, #16]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d908      	bls.n	8008942 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	e007      	b.n	8008952 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008950:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b40      	cmp	r3, #64	; 0x40
 800895e:	d007      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008978:	d97c      	bls.n	8008a74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_SPI_TransmitReceive+0x13e>
 8008982:	8a7b      	ldrh	r3, [r7, #18]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d169      	bne.n	8008a5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	881a      	ldrh	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	1c9a      	adds	r2, r3, #2
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ac:	e056      	b.n	8008a5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d11b      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x1aa>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d016      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0x1aa>
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d113      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	881a      	ldrh	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	1c9a      	adds	r2, r3, #2
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d11c      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x1f2>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d016      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a3c:	f7fc fd3e 	bl	80054bc <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d807      	bhi.n	8008a5c <HAL_SPI_TransmitReceive+0x212>
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d003      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008a5a:	e0fb      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1a3      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x164>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d19d      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x164>
 8008a72:	e0df      	b.n	8008c34 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_SPI_TransmitReceive+0x23a>
 8008a7c:	8a7b      	ldrh	r3, [r7, #18]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	f040 80cb 	bne.w	8008c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d912      	bls.n	8008ab4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	881a      	ldrh	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	1c9a      	adds	r2, r3, #2
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3b02      	subs	r3, #2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ab2:	e0b2      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ada:	e09e      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d134      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x30a>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02f      	beq.n	8008b54 <HAL_SPI_TransmitReceive+0x30a>
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d12c      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d912      	bls.n	8008b2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	1c9a      	adds	r2, r3, #2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b02      	subs	r3, #2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b28:	e012      	b.n	8008b50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d148      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x3aa>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d042      	beq.n	8008bf4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d923      	bls.n	8008bc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	b292      	uxth	r2, r2
 8008b86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	1c9a      	adds	r2, r3, #2
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b02      	subs	r3, #2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d81f      	bhi.n	8008bf0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bbe:	605a      	str	r2, [r3, #4]
 8008bc0:	e016      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f103 020c 	add.w	r2, r3, #12
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	7812      	ldrb	r2, [r2, #0]
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bf4:	f7fc fc62 	bl	80054bc <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d803      	bhi.n	8008c0c <HAL_SPI_TransmitReceive+0x3c2>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d102      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x3c8>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c18:	e01c      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f47f af5b 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x292>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f47f af54 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f98f 	bl	8008f5c <SPI_EndRxTxTransaction>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	661a      	str	r2, [r3, #96]	; 0x60
 8008c50:	e000      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3728      	adds	r7, #40	; 0x28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c80:	f7fc fc1c 	bl	80054bc <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	1a9b      	subs	r3, r3, r2
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c90:	f7fc fc14 	bl	80054bc <HAL_GetTick>
 8008c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c96:	4b39      	ldr	r3, [pc, #228]	; (8008d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	015b      	lsls	r3, r3, #5
 8008c9c:	0d1b      	lsrs	r3, r3, #20
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ca6:	e054      	b.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d050      	beq.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cb0:	f7fc fc04 	bl	80054bc <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d902      	bls.n	8008cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d13d      	bne.n	8008d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cde:	d111      	bne.n	8008d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce8:	d004      	beq.n	8008cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf2:	d107      	bne.n	8008d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0c:	d10f      	bne.n	8008d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e017      	b.n	8008d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	bf0c      	ite	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	2300      	movne	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d19b      	bne.n	8008ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000020c 	.word	0x2000020c

08008d80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d92:	f7fc fb93 	bl	80054bc <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	4413      	add	r3, r2
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008da2:	f7fc fb8b 	bl	80054bc <HAL_GetTick>
 8008da6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	330c      	adds	r3, #12
 8008dae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008db0:	4b3d      	ldr	r3, [pc, #244]	; (8008ea8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	00da      	lsls	r2, r3, #3
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	0d1b      	lsrs	r3, r3, #20
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	fb02 f303 	mul.w	r3, r2, r3
 8008dc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008dc8:	e060      	b.n	8008e8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008dd0:	d107      	bne.n	8008de2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d104      	bne.n	8008de2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d050      	beq.n	8008e8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dea:	f7fc fb67 	bl	80054bc <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d902      	bls.n	8008e00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d13d      	bne.n	8008e7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e18:	d111      	bne.n	8008e3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e22:	d004      	beq.n	8008e2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e2c:	d107      	bne.n	8008e3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e46:	d10f      	bne.n	8008e68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e010      	b.n	8008e9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4013      	ands	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d196      	bne.n	8008dca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3728      	adds	r7, #40	; 0x28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	2000020c 	.word	0x2000020c

08008eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ec0:	d111      	bne.n	8008ee6 <SPI_EndRxTransaction+0x3a>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eca:	d004      	beq.n	8008ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed4:	d107      	bne.n	8008ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2180      	movs	r1, #128	; 0x80
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7ff febd 	bl	8008c70 <SPI_WaitFlagStateUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f00:	f043 0220 	orr.w	r2, r3, #32
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e023      	b.n	8008f54 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f14:	d11d      	bne.n	8008f52 <SPI_EndRxTransaction+0xa6>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f1e:	d004      	beq.n	8008f2a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f28:	d113      	bne.n	8008f52 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f7ff ff22 	bl	8008d80 <SPI_WaitFifoStateUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f46:	f043 0220 	orr.w	r2, r3, #32
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e000      	b.n	8008f54 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff ff03 	bl	8008d80 <SPI_WaitFifoStateUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f84:	f043 0220 	orr.w	r2, r3, #32
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e027      	b.n	8008fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fe68 	bl	8008c70 <SPI_WaitFlagStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e014      	b.n	8008fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fedc 	bl	8008d80 <SPI_WaitFifoStateUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd2:	f043 0220 	orr.w	r2, r3, #32
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e000      	b.n	8008fe0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e049      	b.n	800908e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fb f820 	bl	8004054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f000 f9ee 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d001      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e04f      	b.n	8009150 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a23      	ldr	r2, [pc, #140]	; (800915c <HAL_TIM_Base_Start_IT+0xc4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01d      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090da:	d018      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <HAL_TIM_Base_Start_IT+0xc8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <HAL_TIM_Base_Start_IT+0xcc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1c      	ldr	r2, [pc, #112]	; (8009168 <HAL_TIM_Base_Start_IT+0xd0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1b      	ldr	r2, [pc, #108]	; (800916c <HAL_TIM_Base_Start_IT+0xd4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIM_Base_Start_IT+0x76>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a19      	ldr	r2, [pc, #100]	; (8009170 <HAL_TIM_Base_Start_IT+0xd8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d115      	bne.n	800913a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	4b17      	ldr	r3, [pc, #92]	; (8009174 <HAL_TIM_Base_Start_IT+0xdc>)
 8009116:	4013      	ands	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d015      	beq.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009126:	d011      	beq.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	e008      	b.n	800914c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e000      	b.n	800914e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40013400 	.word	0x40013400
 8009170:	40014000 	.word	0x40014000
 8009174:	00010007 	.word	0x00010007

08009178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b02      	cmp	r3, #2
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0202 	mvn.w	r2, #2
 80091a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f905 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8f7 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f908 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d122      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d11b      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0204 	mvn.w	r2, #4
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8db 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8cd 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8de 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b08      	cmp	r3, #8
 8009234:	d122      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b08      	cmp	r3, #8
 8009242:	d11b      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0208 	mvn.w	r2, #8
 800924c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2204      	movs	r2, #4
 8009252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f8b1 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009268:	e005      	b.n	8009276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f8a3 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8b4 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0310 	and.w	r3, r3, #16
 8009286:	2b10      	cmp	r3, #16
 8009288:	d122      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b10      	cmp	r3, #16
 8009296:	d11b      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0210 	mvn.w	r2, #16
 80092a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2208      	movs	r2, #8
 80092a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f887 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80092bc:	e005      	b.n	80092ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f879 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f88a 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d10e      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d107      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0201 	mvn.w	r2, #1
 80092f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7f9 fed0 	bl	800309c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f914 	bl	8009550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009336:	d10e      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d107      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f907 	bl	8009564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d10e      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d107      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f838 	bl	80093f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b20      	cmp	r3, #32
 800938e:	d10e      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b20      	cmp	r3, #32
 800939c:	d107      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f06f 0220 	mvn.w	r2, #32
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8c7 	bl	800953c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a40      	ldr	r2, [pc, #256]	; (800951c <TIM_Base_SetConfig+0x114>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d00f      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a3d      	ldr	r2, [pc, #244]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3c      	ldr	r2, [pc, #240]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a3b      	ldr	r2, [pc, #236]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3a      	ldr	r2, [pc, #232]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d108      	bne.n	800945a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a2f      	ldr	r2, [pc, #188]	; (800951c <TIM_Base_SetConfig+0x114>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d01f      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009468:	d01b      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2c      	ldr	r2, [pc, #176]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d017      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2b      	ldr	r2, [pc, #172]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d013      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2a      	ldr	r2, [pc, #168]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00f      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00b      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a28      	ldr	r2, [pc, #160]	; (8009530 <TIM_Base_SetConfig+0x128>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d007      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a27      	ldr	r2, [pc, #156]	; (8009534 <TIM_Base_SetConfig+0x12c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d003      	beq.n	80094a2 <TIM_Base_SetConfig+0x9a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a26      	ldr	r2, [pc, #152]	; (8009538 <TIM_Base_SetConfig+0x130>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d108      	bne.n	80094b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <TIM_Base_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a12      	ldr	r2, [pc, #72]	; (800952c <TIM_Base_SetConfig+0x124>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a11      	ldr	r2, [pc, #68]	; (8009530 <TIM_Base_SetConfig+0x128>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a10      	ldr	r2, [pc, #64]	; (8009534 <TIM_Base_SetConfig+0x12c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a0f      	ldr	r2, [pc, #60]	; (8009538 <TIM_Base_SetConfig+0x130>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40012c00 	.word	0x40012c00
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40013400 	.word	0x40013400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800

0800953c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e040      	b.n	800960c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fa fd80 	bl	80040a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2224      	movs	r2, #36	; 0x24
 80095a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f8fe 	bl	80097b8 <UART_SetConfig>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e022      	b.n	800960c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fbaa 	bl	8009d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0201 	orr.w	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fc31 	bl	8009e6c <UART_CheckIdleState>
 800960a:	4603      	mov	r3, r0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af02      	add	r7, sp, #8
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009628:	2b20      	cmp	r3, #32
 800962a:	f040 80bf 	bne.w	80097ac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_UART_Receive+0x26>
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e0b7      	b.n	80097ae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_UART_Receive+0x38>
 8009648:	2302      	movs	r3, #2
 800964a:	e0b0      	b.n	80097ae <HAL_UART_Receive+0x19a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2222      	movs	r2, #34	; 0x22
 8009660:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009668:	f7fb ff28 	bl	80054bc <HAL_GetTick>
 800966c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009686:	d10e      	bne.n	80096a6 <HAL_UART_Receive+0x92>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <HAL_UART_Receive+0x88>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800969a:	e02d      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	22ff      	movs	r2, #255	; 0xff
 80096a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096a4:	e028      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <HAL_UART_Receive+0xb6>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <HAL_UART_Receive+0xac>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	22ff      	movs	r2, #255	; 0xff
 80096ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096be:	e01b      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	227f      	movs	r2, #127	; 0x7f
 80096c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096c8:	e016      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d2:	d10d      	bne.n	80096f0 <HAL_UART_Receive+0xdc>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <HAL_UART_Receive+0xd2>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	227f      	movs	r2, #127	; 0x7f
 80096e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096e4:	e008      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	223f      	movs	r2, #63	; 0x3f
 80096ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096ee:	e003      	b.n	80096f8 <HAL_UART_Receive+0xe4>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009708:	d108      	bne.n	800971c <HAL_UART_Receive+0x108>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	e003      	b.n	8009724 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800972c:	e033      	b.n	8009796 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2200      	movs	r2, #0
 8009736:	2120      	movs	r1, #32
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 fbe0 	bl	8009efe <UART_WaitOnFlagUntilTimeout>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e032      	b.n	80097ae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10c      	bne.n	8009768 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009754:	b29a      	uxth	r2, r3
 8009756:	8a7b      	ldrh	r3, [r7, #18]
 8009758:	4013      	ands	r3, r2
 800975a:	b29a      	uxth	r2, r3
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	3302      	adds	r3, #2
 8009764:	61bb      	str	r3, [r7, #24]
 8009766:	e00d      	b.n	8009784 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800976e:	b29b      	uxth	r3, r3
 8009770:	b2da      	uxtb	r2, r3
 8009772:	8a7b      	ldrh	r3, [r7, #18]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	4013      	ands	r3, r2
 8009778:	b2da      	uxtb	r2, r3
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	3301      	adds	r3, #1
 8009782:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800979c:	b29b      	uxth	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1c5      	bne.n	800972e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2220      	movs	r2, #32
 80097a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	e000      	b.n	80097ae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80097ac:	2302      	movs	r3, #2
  }
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097bc:	b08a      	sub	sp, #40	; 0x28
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	4313      	orrs	r3, r2
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	4ba4      	ldr	r3, [pc, #656]	; (8009a78 <UART_SetConfig+0x2c0>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f0:	430b      	orrs	r3, r1
 80097f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a99      	ldr	r2, [pc, #612]	; (8009a7c <UART_SetConfig+0x2c4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d004      	beq.n	8009824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009820:	4313      	orrs	r3, r2
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009834:	430a      	orrs	r2, r1
 8009836:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a90      	ldr	r2, [pc, #576]	; (8009a80 <UART_SetConfig+0x2c8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d126      	bne.n	8009890 <UART_SetConfig+0xd8>
 8009842:	4b90      	ldr	r3, [pc, #576]	; (8009a84 <UART_SetConfig+0x2cc>)
 8009844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	2b03      	cmp	r3, #3
 800984e:	d81b      	bhi.n	8009888 <UART_SetConfig+0xd0>
 8009850:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0xa0>)
 8009852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009856:	bf00      	nop
 8009858:	08009869 	.word	0x08009869
 800985c:	08009879 	.word	0x08009879
 8009860:	08009871 	.word	0x08009871
 8009864:	08009881 	.word	0x08009881
 8009868:	2301      	movs	r3, #1
 800986a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800986e:	e116      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009870:	2302      	movs	r3, #2
 8009872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009876:	e112      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800987e:	e10e      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009886:	e10a      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800988e:	e106      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a7c      	ldr	r2, [pc, #496]	; (8009a88 <UART_SetConfig+0x2d0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d138      	bne.n	800990c <UART_SetConfig+0x154>
 800989a:	4b7a      	ldr	r3, [pc, #488]	; (8009a84 <UART_SetConfig+0x2cc>)
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a0:	f003 030c 	and.w	r3, r3, #12
 80098a4:	2b0c      	cmp	r3, #12
 80098a6:	d82d      	bhi.n	8009904 <UART_SetConfig+0x14c>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <UART_SetConfig+0xf8>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	080098e5 	.word	0x080098e5
 80098b4:	08009905 	.word	0x08009905
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009905 	.word	0x08009905
 80098c0:	080098f5 	.word	0x080098f5
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	080098ed 	.word	0x080098ed
 80098d4:	08009905 	.word	0x08009905
 80098d8:	08009905 	.word	0x08009905
 80098dc:	08009905 	.word	0x08009905
 80098e0:	080098fd 	.word	0x080098fd
 80098e4:	2300      	movs	r3, #0
 80098e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ea:	e0d8      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80098ec:	2302      	movs	r3, #2
 80098ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098f2:	e0d4      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80098f4:	2304      	movs	r3, #4
 80098f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098fa:	e0d0      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80098fc:	2308      	movs	r3, #8
 80098fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009902:	e0cc      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009904:	2310      	movs	r3, #16
 8009906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800990a:	e0c8      	b.n	8009a9e <UART_SetConfig+0x2e6>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a5e      	ldr	r2, [pc, #376]	; (8009a8c <UART_SetConfig+0x2d4>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d125      	bne.n	8009962 <UART_SetConfig+0x1aa>
 8009916:	4b5b      	ldr	r3, [pc, #364]	; (8009a84 <UART_SetConfig+0x2cc>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009920:	2b30      	cmp	r3, #48	; 0x30
 8009922:	d016      	beq.n	8009952 <UART_SetConfig+0x19a>
 8009924:	2b30      	cmp	r3, #48	; 0x30
 8009926:	d818      	bhi.n	800995a <UART_SetConfig+0x1a2>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d00a      	beq.n	8009942 <UART_SetConfig+0x18a>
 800992c:	2b20      	cmp	r3, #32
 800992e:	d814      	bhi.n	800995a <UART_SetConfig+0x1a2>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <UART_SetConfig+0x182>
 8009934:	2b10      	cmp	r3, #16
 8009936:	d008      	beq.n	800994a <UART_SetConfig+0x192>
 8009938:	e00f      	b.n	800995a <UART_SetConfig+0x1a2>
 800993a:	2300      	movs	r3, #0
 800993c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009940:	e0ad      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009942:	2302      	movs	r3, #2
 8009944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009948:	e0a9      	b.n	8009a9e <UART_SetConfig+0x2e6>
 800994a:	2304      	movs	r3, #4
 800994c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009950:	e0a5      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009952:	2308      	movs	r3, #8
 8009954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009958:	e0a1      	b.n	8009a9e <UART_SetConfig+0x2e6>
 800995a:	2310      	movs	r3, #16
 800995c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009960:	e09d      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a4a      	ldr	r2, [pc, #296]	; (8009a90 <UART_SetConfig+0x2d8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d125      	bne.n	80099b8 <UART_SetConfig+0x200>
 800996c:	4b45      	ldr	r3, [pc, #276]	; (8009a84 <UART_SetConfig+0x2cc>)
 800996e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009976:	2bc0      	cmp	r3, #192	; 0xc0
 8009978:	d016      	beq.n	80099a8 <UART_SetConfig+0x1f0>
 800997a:	2bc0      	cmp	r3, #192	; 0xc0
 800997c:	d818      	bhi.n	80099b0 <UART_SetConfig+0x1f8>
 800997e:	2b80      	cmp	r3, #128	; 0x80
 8009980:	d00a      	beq.n	8009998 <UART_SetConfig+0x1e0>
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d814      	bhi.n	80099b0 <UART_SetConfig+0x1f8>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <UART_SetConfig+0x1d8>
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	d008      	beq.n	80099a0 <UART_SetConfig+0x1e8>
 800998e:	e00f      	b.n	80099b0 <UART_SetConfig+0x1f8>
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009996:	e082      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009998:	2302      	movs	r3, #2
 800999a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800999e:	e07e      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a6:	e07a      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ae:	e076      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099b6:	e072      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a35      	ldr	r2, [pc, #212]	; (8009a94 <UART_SetConfig+0x2dc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d12a      	bne.n	8009a18 <UART_SetConfig+0x260>
 80099c2:	4b30      	ldr	r3, [pc, #192]	; (8009a84 <UART_SetConfig+0x2cc>)
 80099c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d0:	d01a      	beq.n	8009a08 <UART_SetConfig+0x250>
 80099d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d6:	d81b      	bhi.n	8009a10 <UART_SetConfig+0x258>
 80099d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099dc:	d00c      	beq.n	80099f8 <UART_SetConfig+0x240>
 80099de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e2:	d815      	bhi.n	8009a10 <UART_SetConfig+0x258>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <UART_SetConfig+0x238>
 80099e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ec:	d008      	beq.n	8009a00 <UART_SetConfig+0x248>
 80099ee:	e00f      	b.n	8009a10 <UART_SetConfig+0x258>
 80099f0:	2300      	movs	r3, #0
 80099f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099f6:	e052      	b.n	8009a9e <UART_SetConfig+0x2e6>
 80099f8:	2302      	movs	r3, #2
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099fe:	e04e      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a00:	2304      	movs	r3, #4
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a06:	e04a      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a08:	2308      	movs	r3, #8
 8009a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a0e:	e046      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a10:	2310      	movs	r3, #16
 8009a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a16:	e042      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <UART_SetConfig+0x2c4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d13a      	bne.n	8009a98 <UART_SetConfig+0x2e0>
 8009a22:	4b18      	ldr	r3, [pc, #96]	; (8009a84 <UART_SetConfig+0x2cc>)
 8009a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a30:	d01a      	beq.n	8009a68 <UART_SetConfig+0x2b0>
 8009a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a36:	d81b      	bhi.n	8009a70 <UART_SetConfig+0x2b8>
 8009a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a3c:	d00c      	beq.n	8009a58 <UART_SetConfig+0x2a0>
 8009a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a42:	d815      	bhi.n	8009a70 <UART_SetConfig+0x2b8>
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <UART_SetConfig+0x298>
 8009a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a4c:	d008      	beq.n	8009a60 <UART_SetConfig+0x2a8>
 8009a4e:	e00f      	b.n	8009a70 <UART_SetConfig+0x2b8>
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a56:	e022      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a5e:	e01e      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a60:	2304      	movs	r3, #4
 8009a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a66:	e01a      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a68:	2308      	movs	r3, #8
 8009a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a6e:	e016      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a70:	2310      	movs	r3, #16
 8009a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a76:	e012      	b.n	8009a9e <UART_SetConfig+0x2e6>
 8009a78:	efff69f3 	.word	0xefff69f3
 8009a7c:	40008000 	.word	0x40008000
 8009a80:	40013800 	.word	0x40013800
 8009a84:	40021000 	.word	0x40021000
 8009a88:	40004400 	.word	0x40004400
 8009a8c:	40004800 	.word	0x40004800
 8009a90:	40004c00 	.word	0x40004c00
 8009a94:	40005000 	.word	0x40005000
 8009a98:	2310      	movs	r3, #16
 8009a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a9f      	ldr	r2, [pc, #636]	; (8009d20 <UART_SetConfig+0x568>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d17a      	bne.n	8009b9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d824      	bhi.n	8009afa <UART_SetConfig+0x342>
 8009ab0:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <UART_SetConfig+0x300>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009add 	.word	0x08009add
 8009abc:	08009afb 	.word	0x08009afb
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009afb 	.word	0x08009afb
 8009ac8:	08009aeb 	.word	0x08009aeb
 8009acc:	08009afb 	.word	0x08009afb
 8009ad0:	08009afb 	.word	0x08009afb
 8009ad4:	08009afb 	.word	0x08009afb
 8009ad8:	08009af3 	.word	0x08009af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009adc:	f7fd fe5c 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 8009ae0:	61f8      	str	r0, [r7, #28]
        break;
 8009ae2:	e010      	b.n	8009b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ae4:	4b8f      	ldr	r3, [pc, #572]	; (8009d24 <UART_SetConfig+0x56c>)
 8009ae6:	61fb      	str	r3, [r7, #28]
        break;
 8009ae8:	e00d      	b.n	8009b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aea:	f7fd fdbd 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8009aee:	61f8      	str	r0, [r7, #28]
        break;
 8009af0:	e009      	b.n	8009b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009af6:	61fb      	str	r3, [r7, #28]
        break;
 8009af8:	e005      	b.n	8009b06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 80fb 	beq.w	8009d04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	4613      	mov	r3, r2
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	4413      	add	r3, r2
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d305      	bcc.n	8009b2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d903      	bls.n	8009b32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b30:	e0e8      	b.n	8009d04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2200      	movs	r2, #0
 8009b36:	461c      	mov	r4, r3
 8009b38:	4615      	mov	r5, r2
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	f04f 0300 	mov.w	r3, #0
 8009b42:	022b      	lsls	r3, r5, #8
 8009b44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b48:	0222      	lsls	r2, r4, #8
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	6849      	ldr	r1, [r1, #4]
 8009b4e:	0849      	lsrs	r1, r1, #1
 8009b50:	2000      	movs	r0, #0
 8009b52:	4688      	mov	r8, r1
 8009b54:	4681      	mov	r9, r0
 8009b56:	eb12 0a08 	adds.w	sl, r2, r8
 8009b5a:	eb43 0b09 	adc.w	fp, r3, r9
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	4659      	mov	r1, fp
 8009b70:	f7f7 f86a 	bl	8000c48 <__aeabi_uldivmod>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4613      	mov	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b82:	d308      	bcc.n	8009b96 <UART_SetConfig+0x3de>
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b8a:	d204      	bcs.n	8009b96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	60da      	str	r2, [r3, #12]
 8009b94:	e0b6      	b.n	8009d04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b9c:	e0b2      	b.n	8009d04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba6:	d15e      	bne.n	8009c66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d828      	bhi.n	8009c02 <UART_SetConfig+0x44a>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x400>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009be5 	.word	0x08009be5
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	08009c03 	.word	0x08009c03
 8009bc8:	08009bf3 	.word	0x08009bf3
 8009bcc:	08009c03 	.word	0x08009c03
 8009bd0:	08009c03 	.word	0x08009c03
 8009bd4:	08009c03 	.word	0x08009c03
 8009bd8:	08009bfb 	.word	0x08009bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bdc:	f7fd fddc 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 8009be0:	61f8      	str	r0, [r7, #28]
        break;
 8009be2:	e014      	b.n	8009c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be4:	f7fd fdee 	bl	80077c4 <HAL_RCC_GetPCLK2Freq>
 8009be8:	61f8      	str	r0, [r7, #28]
        break;
 8009bea:	e010      	b.n	8009c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bec:	4b4d      	ldr	r3, [pc, #308]	; (8009d24 <UART_SetConfig+0x56c>)
 8009bee:	61fb      	str	r3, [r7, #28]
        break;
 8009bf0:	e00d      	b.n	8009c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf2:	f7fd fd39 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8009bf6:	61f8      	str	r0, [r7, #28]
        break;
 8009bf8:	e009      	b.n	8009c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfe:	61fb      	str	r3, [r7, #28]
        break;
 8009c00:	e005      	b.n	8009c0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d077      	beq.n	8009d04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	005a      	lsls	r2, r3, #1
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	441a      	add	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b0f      	cmp	r3, #15
 8009c2e:	d916      	bls.n	8009c5e <UART_SetConfig+0x4a6>
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c36:	d212      	bcs.n	8009c5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	f023 030f 	bic.w	r3, r3, #15
 8009c40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	085b      	lsrs	r3, r3, #1
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	8afb      	ldrh	r3, [r7, #22]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	8afa      	ldrh	r2, [r7, #22]
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	e052      	b.n	8009d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c64:	e04e      	b.n	8009d04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d827      	bhi.n	8009cbe <UART_SetConfig+0x506>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x4bc>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca9 	.word	0x08009ca9
 8009c80:	08009cbf 	.word	0x08009cbf
 8009c84:	08009caf 	.word	0x08009caf
 8009c88:	08009cbf 	.word	0x08009cbf
 8009c8c:	08009cbf 	.word	0x08009cbf
 8009c90:	08009cbf 	.word	0x08009cbf
 8009c94:	08009cb7 	.word	0x08009cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7fd fd7e 	bl	8007798 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	61f8      	str	r0, [r7, #28]
        break;
 8009c9e:	e014      	b.n	8009cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ca0:	f7fd fd90 	bl	80077c4 <HAL_RCC_GetPCLK2Freq>
 8009ca4:	61f8      	str	r0, [r7, #28]
        break;
 8009ca6:	e010      	b.n	8009cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca8:	4b1e      	ldr	r3, [pc, #120]	; (8009d24 <UART_SetConfig+0x56c>)
 8009caa:	61fb      	str	r3, [r7, #28]
        break;
 8009cac:	e00d      	b.n	8009cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cae:	f7fd fcdb 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8009cb2:	61f8      	str	r0, [r7, #28]
        break;
 8009cb4:	e009      	b.n	8009cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cba:	61fb      	str	r3, [r7, #28]
        break;
 8009cbc:	e005      	b.n	8009cca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d019      	beq.n	8009d04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	085a      	lsrs	r2, r3, #1
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	441a      	add	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d909      	bls.n	8009cfe <UART_SetConfig+0x546>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf0:	d205      	bcs.n	8009cfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	e002      	b.n	8009d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3728      	adds	r7, #40	; 0x28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d1e:	bf00      	nop
 8009d20:	40008000 	.word	0x40008000
 8009d24:	00f42400 	.word	0x00f42400

08009d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01a      	beq.n	8009e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e26:	d10a      	bne.n	8009e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e7c:	f7fb fb1e 	bl	80054bc <HAL_GetTick>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d10e      	bne.n	8009eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f82d 	bl	8009efe <UART_WaitOnFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e023      	b.n	8009ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d10e      	bne.n	8009eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f817 	bl	8009efe <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e00d      	b.n	8009ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b09c      	sub	sp, #112	; 0x70
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0e:	e0a5      	b.n	800a05c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f16:	f000 80a1 	beq.w	800a05c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f1a:	f7fb facf 	bl	80054bc <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d302      	bcc.n	8009f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d13e      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f44:	667b      	str	r3, [r7, #100]	; 0x64
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e6      	bne.n	8009f30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	f023 0301 	bic.w	r3, r3, #1
 8009f78:	663b      	str	r3, [r7, #96]	; 0x60
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e5      	bne.n	8009f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e067      	b.n	800a07e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d04f      	beq.n	800a05c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fca:	d147      	bne.n	800a05c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e6      	bne.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	613b      	str	r3, [r7, #16]
   return(result);
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f023 0301 	bic.w	r3, r3, #1
 800a01e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3308      	adds	r3, #8
 800a026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a028:	623a      	str	r2, [r7, #32]
 800a02a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	69f9      	ldr	r1, [r7, #28]
 800a02e:	6a3a      	ldr	r2, [r7, #32]
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	61bb      	str	r3, [r7, #24]
   return(result);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e5      	bne.n	800a008 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2220      	movs	r2, #32
 800a040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e010      	b.n	800a07e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69da      	ldr	r2, [r3, #28]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	4013      	ands	r3, r2
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	429a      	cmp	r2, r3
 800a06a:	bf0c      	ite	eq
 800a06c:	2301      	moveq	r3, #1
 800a06e:	2300      	movne	r3, #0
 800a070:	b2db      	uxtb	r3, r3
 800a072:	461a      	mov	r2, r3
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	429a      	cmp	r2, r3
 800a078:	f43f af4a 	beq.w	8009f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3770      	adds	r7, #112	; 0x70
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a08c:	4904      	ldr	r1, [pc, #16]	; (800a0a0 <MX_FATFS_Init+0x18>)
 800a08e:	4805      	ldr	r0, [pc, #20]	; (800a0a4 <MX_FATFS_Init+0x1c>)
 800a090:	f002 fef2 	bl	800ce78 <FATFS_LinkDriver>
 800a094:	4603      	mov	r3, r0
 800a096:	461a      	mov	r2, r3
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <MX_FATFS_Init+0x20>)
 800a09a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a09c:	bf00      	nop
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200007a8 	.word	0x200007a8
 800a0a4:	20000218 	.word	0x20000218
 800a0a8:	200007a4 	.word	0x200007a4

0800a0ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 f9d7 	bl	800a47c <USER_SPI_initialize>
 800a0ce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fab3 	bl	800a650 <USER_SPI_status>
 800a0ea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a104:	7bf8      	ldrb	r0, [r7, #15]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	f000 fab6 	bl	800a67c <USER_SPI_read>
 800a110:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a12a:	7bf8      	ldrb	r0, [r7, #15]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	f000 fb09 	bl	800a748 <USER_SPI_write>
 800a136:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	603a      	str	r2, [r7, #0]
 800a14a:	71fb      	strb	r3, [r7, #7]
 800a14c:	460b      	mov	r3, r1
 800a14e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a150:	79b9      	ldrb	r1, [r7, #6]
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	4618      	mov	r0, r3
 800a158:	f000 fb72 	bl	800a840 <USER_SPI_ioctl>
 800a15c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a170:	f7fb f9a4 	bl	80054bc <HAL_GetTick>
 800a174:	4603      	mov	r3, r0
 800a176:	4a04      	ldr	r2, [pc, #16]	; (800a188 <SPI_Timer_On+0x20>)
 800a178:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a17a:	4a04      	ldr	r2, [pc, #16]	; (800a18c <SPI_Timer_On+0x24>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6013      	str	r3, [r2, #0]
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	200007b0 	.word	0x200007b0
 800a18c:	200007b4 	.word	0x200007b4

0800a190 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a194:	f7fb f992 	bl	80054bc <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <SPI_Timer_Status+0x24>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <SPI_Timer_Status+0x28>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	bf34      	ite	cc
 800a1a8:	2301      	movcc	r3, #1
 800a1aa:	2300      	movcs	r3, #0
 800a1ac:	b2db      	uxtb	r3, r3
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200007b0 	.word	0x200007b0
 800a1b8:	200007b4 	.word	0x200007b4

0800a1bc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a1c6:	f107 020f 	add.w	r2, r7, #15
 800a1ca:	1df9      	adds	r1, r7, #7
 800a1cc:	2332      	movs	r3, #50	; 0x32
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4804      	ldr	r0, [pc, #16]	; (800a1e4 <xchg_spi+0x28>)
 800a1d4:	f7fe fb39 	bl	800884a <HAL_SPI_TransmitReceive>
    return rxDat;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200004a8 	.word	0x200004a8

0800a1e8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e00a      	b.n	800a20e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	18d4      	adds	r4, r2, r3
 800a1fe:	20ff      	movs	r0, #255	; 0xff
 800a200:	f7ff ffdc 	bl	800a1bc <xchg_spi>
 800a204:	4603      	mov	r3, r0
 800a206:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d3f0      	bcc.n	800a1f8 <rcvr_spi_multi+0x10>
	}
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd90      	pop	{r4, r7, pc}

0800a220 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e009      	b.n	800a244 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff ffbf 	bl	800a1bc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d3f1      	bcc.n	800a230 <xmit_spi_multi+0x10>
	}
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b086      	sub	sp, #24
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a25e:	f7fb f92d 	bl	80054bc <HAL_GetTick>
 800a262:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a268:	20ff      	movs	r0, #255	; 0xff
 800a26a:	f7ff ffa7 	bl	800a1bc <xchg_spi>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	2bff      	cmp	r3, #255	; 0xff
 800a276:	d007      	beq.n	800a288 <wait_ready+0x32>
 800a278:	f7fb f920 	bl	80054bc <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	429a      	cmp	r2, r3
 800a286:	d8ef      	bhi.n	800a268 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2bff      	cmp	r3, #255	; 0xff
 800a28c:	bf0c      	ite	eq
 800a28e:	2301      	moveq	r3, #1
 800a290:	2300      	movne	r3, #0
 800a292:	b2db      	uxtb	r3, r3
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	2110      	movs	r1, #16
 800a2a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2a8:	f7fb fc0c 	bl	8005ac4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a2ac:	20ff      	movs	r0, #255	; 0xff
 800a2ae:	f7ff ff85 	bl	800a1bc <xchg_spi>

}
 800a2b2:	bf00      	nop
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2110      	movs	r1, #16
 800a2be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2c2:	f7fb fbff 	bl	8005ac4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a2c6:	20ff      	movs	r0, #255	; 0xff
 800a2c8:	f7ff ff78 	bl	800a1bc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a2cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2d0:	f7ff ffc1 	bl	800a256 <wait_ready>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <spiselect+0x28>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e002      	b.n	800a2e4 <spiselect+0x2e>

	despiselect();
 800a2de:	f7ff ffdd 	bl	800a29c <despiselect>
	return 0;	/* Timeout */
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a2f2:	20c8      	movs	r0, #200	; 0xc8
 800a2f4:	f7ff ff38 	bl	800a168 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a2f8:	20ff      	movs	r0, #255	; 0xff
 800a2fa:	f7ff ff5f 	bl	800a1bc <xchg_spi>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2bff      	cmp	r3, #255	; 0xff
 800a306:	d104      	bne.n	800a312 <rcvr_datablock+0x2a>
 800a308:	f7ff ff42 	bl	800a190 <SPI_Timer_Status>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f2      	bne.n	800a2f8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	2bfe      	cmp	r3, #254	; 0xfe
 800a316:	d001      	beq.n	800a31c <rcvr_datablock+0x34>
 800a318:	2300      	movs	r3, #0
 800a31a:	e00a      	b.n	800a332 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff ff62 	bl	800a1e8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a324:	20ff      	movs	r0, #255	; 0xff
 800a326:	f7ff ff49 	bl	800a1bc <xchg_spi>
 800a32a:	20ff      	movs	r0, #255	; 0xff
 800a32c:	f7ff ff46 	bl	800a1bc <xchg_spi>

	return 1;						/* Function succeeded */
 800a330:	2301      	movs	r3, #1
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a34a:	f7ff ff84 	bl	800a256 <wait_ready>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <xmit_datablock+0x1e>
 800a354:	2300      	movs	r3, #0
 800a356:	e01e      	b.n	800a396 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff ff2e 	bl	800a1bc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2bfd      	cmp	r3, #253	; 0xfd
 800a364:	d016      	beq.n	800a394 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff ff58 	bl	800a220 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a370:	20ff      	movs	r0, #255	; 0xff
 800a372:	f7ff ff23 	bl	800a1bc <xchg_spi>
 800a376:	20ff      	movs	r0, #255	; 0xff
 800a378:	f7ff ff20 	bl	800a1bc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a37c:	20ff      	movs	r0, #255	; 0xff
 800a37e:	f7ff ff1d 	bl	800a1bc <xchg_spi>
 800a382:	4603      	mov	r3, r0
 800a384:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	f003 031f 	and.w	r3, r3, #31
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	d001      	beq.n	800a394 <xmit_datablock+0x5a>
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <xmit_datablock+0x5c>
	}
	return 1;
 800a394:	2301      	movs	r3, #1
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	6039      	str	r1, [r7, #0]
 800a3a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da0e      	bge.n	800a3d0 <send_cmd+0x32>
		cmd &= 0x7F;
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	2037      	movs	r0, #55	; 0x37
 800a3be:	f7ff ffee 	bl	800a39e <send_cmd>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d901      	bls.n	800a3d0 <send_cmd+0x32>
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	e051      	b.n	800a474 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	2b0c      	cmp	r3, #12
 800a3d4:	d008      	beq.n	800a3e8 <send_cmd+0x4a>
		despiselect();
 800a3d6:	f7ff ff61 	bl	800a29c <despiselect>
		if (!spiselect()) return 0xFF;
 800a3da:	f7ff ff6c 	bl	800a2b6 <spiselect>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <send_cmd+0x4a>
 800a3e4:	23ff      	movs	r3, #255	; 0xff
 800a3e6:	e045      	b.n	800a474 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff fee3 	bl	800a1bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	0e1b      	lsrs	r3, r3, #24
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fedd 	bl	800a1bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	b2db      	uxtb	r3, r3
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fed7 	bl	800a1bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	0a1b      	lsrs	r3, r3, #8
 800a412:	b2db      	uxtb	r3, r3
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff fed1 	bl	800a1bc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fecc 	bl	800a1bc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <send_cmd+0x94>
 800a42e:	2395      	movs	r3, #149	; 0x95
 800a430:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	2b08      	cmp	r3, #8
 800a436:	d101      	bne.n	800a43c <send_cmd+0x9e>
 800a438:	2387      	movs	r3, #135	; 0x87
 800a43a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff febc 	bl	800a1bc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b0c      	cmp	r3, #12
 800a448:	d102      	bne.n	800a450 <send_cmd+0xb2>
 800a44a:	20ff      	movs	r0, #255	; 0xff
 800a44c:	f7ff feb6 	bl	800a1bc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a450:	230a      	movs	r3, #10
 800a452:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a454:	20ff      	movs	r0, #255	; 0xff
 800a456:	f7ff feb1 	bl	800a1bc <xchg_spi>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a45e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a462:	2b00      	cmp	r3, #0
 800a464:	da05      	bge.n	800a472 <send_cmd+0xd4>
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	3b01      	subs	r3, #1
 800a46a:	73fb      	strb	r3, [r7, #15]
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f0      	bne.n	800a454 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USER_SPI_initialize+0x14>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0d4      	b.n	800a63a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a490:	4b6c      	ldr	r3, [pc, #432]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <USER_SPI_initialize+0x2a>
 800a49e:	4b69      	ldr	r3, [pc, #420]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	e0c9      	b.n	800a63a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800a4a6:	4b68      	ldr	r3, [pc, #416]	; (800a648 <USER_SPI_initialize+0x1cc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a4b0:	4b65      	ldr	r3, [pc, #404]	; (800a648 <USER_SPI_initialize+0x1cc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0218 	orr.w	r2, r2, #24
 800a4b8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a4ba:	230a      	movs	r3, #10
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	e005      	b.n	800a4cc <USER_SPI_initialize+0x50>
 800a4c0:	20ff      	movs	r0, #255	; 0xff
 800a4c2:	f7ff fe7b 	bl	800a1bc <xchg_spi>
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1f6      	bne.n	800a4c0 <USER_SPI_initialize+0x44>

	ty = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	2000      	movs	r0, #0
 800a4da:	f7ff ff60 	bl	800a39e <send_cmd>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	f040 808b 	bne.w	800a5fc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a4e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4ea:	f7ff fe3d 	bl	800a168 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a4ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4f2:	2008      	movs	r0, #8
 800a4f4:	f7ff ff53 	bl	800a39e <send_cmd>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d151      	bne.n	800a5a2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
 800a502:	e00d      	b.n	800a520 <USER_SPI_initialize+0xa4>
 800a504:	7bfc      	ldrb	r4, [r7, #15]
 800a506:	20ff      	movs	r0, #255	; 0xff
 800a508:	f7ff fe58 	bl	800a1bc <xchg_spi>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	f104 0310 	add.w	r3, r4, #16
 800a514:	443b      	add	r3, r7
 800a516:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	3301      	adds	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b03      	cmp	r3, #3
 800a524:	d9ee      	bls.n	800a504 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a526:	7abb      	ldrb	r3, [r7, #10]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d167      	bne.n	800a5fc <USER_SPI_initialize+0x180>
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	2baa      	cmp	r3, #170	; 0xaa
 800a530:	d164      	bne.n	800a5fc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a532:	bf00      	nop
 800a534:	f7ff fe2c 	bl	800a190 <SPI_Timer_Status>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <USER_SPI_initialize+0xd2>
 800a53e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a542:	20a9      	movs	r0, #169	; 0xa9
 800a544:	f7ff ff2b 	bl	800a39e <send_cmd>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1f2      	bne.n	800a534 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a54e:	f7ff fe1f 	bl	800a190 <SPI_Timer_Status>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d051      	beq.n	800a5fc <USER_SPI_initialize+0x180>
 800a558:	2100      	movs	r1, #0
 800a55a:	203a      	movs	r0, #58	; 0x3a
 800a55c:	f7ff ff1f 	bl	800a39e <send_cmd>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d14a      	bne.n	800a5fc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
 800a56a:	e00d      	b.n	800a588 <USER_SPI_initialize+0x10c>
 800a56c:	7bfc      	ldrb	r4, [r7, #15]
 800a56e:	20ff      	movs	r0, #255	; 0xff
 800a570:	f7ff fe24 	bl	800a1bc <xchg_spi>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	f104 0310 	add.w	r3, r4, #16
 800a57c:	443b      	add	r3, r7
 800a57e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	3301      	adds	r3, #1
 800a586:	73fb      	strb	r3, [r7, #15]
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d9ee      	bls.n	800a56c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a58e:	7a3b      	ldrb	r3, [r7, #8]
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <USER_SPI_initialize+0x120>
 800a598:	230c      	movs	r3, #12
 800a59a:	e000      	b.n	800a59e <USER_SPI_initialize+0x122>
 800a59c:	2304      	movs	r3, #4
 800a59e:	737b      	strb	r3, [r7, #13]
 800a5a0:	e02c      	b.n	800a5fc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	20a9      	movs	r0, #169	; 0xa9
 800a5a6:	f7ff fefa 	bl	800a39e <send_cmd>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d804      	bhi.n	800a5ba <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	737b      	strb	r3, [r7, #13]
 800a5b4:	23a9      	movs	r3, #169	; 0xa9
 800a5b6:	73bb      	strb	r3, [r7, #14]
 800a5b8:	e003      	b.n	800a5c2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	737b      	strb	r3, [r7, #13]
 800a5be:	2301      	movs	r3, #1
 800a5c0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a5c2:	bf00      	nop
 800a5c4:	f7ff fde4 	bl	800a190 <SPI_Timer_Status>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <USER_SPI_initialize+0x162>
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff fee3 	bl	800a39e <send_cmd>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1f2      	bne.n	800a5c4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a5de:	f7ff fdd7 	bl	800a190 <SPI_Timer_Status>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d007      	beq.n	800a5f8 <USER_SPI_initialize+0x17c>
 800a5e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5ec:	2010      	movs	r0, #16
 800a5ee:	f7ff fed6 	bl	800a39e <send_cmd>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <USER_SPI_initialize+0x180>
				ty = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <USER_SPI_initialize+0x1d0>)
 800a5fe:	7b7b      	ldrb	r3, [r7, #13]
 800a600:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a602:	f7ff fe4b 	bl	800a29c <despiselect>

	if (ty) {			/* OK */
 800a606:	7b7b      	ldrb	r3, [r7, #13]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d010      	beq.n	800a62e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <USER_SPI_initialize+0x1cc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <USER_SPI_initialize+0x1cc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800a61a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f023 0301 	bic.w	r3, r3, #1
 800a626:	b2da      	uxtb	r2, r3
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a62a:	701a      	strb	r2, [r3, #0]
 800a62c:	e002      	b.n	800a634 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a62e:	4b05      	ldr	r3, [pc, #20]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a630:	2201      	movs	r2, #1
 800a632:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a634:	4b03      	ldr	r3, [pc, #12]	; (800a644 <USER_SPI_initialize+0x1c8>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b2db      	uxtb	r3, r3
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}
 800a642:	bf00      	nop
 800a644:	2000022c 	.word	0x2000022c
 800a648:	200004a8 	.word	0x200004a8
 800a64c:	200007ac 	.word	0x200007ac

0800a650 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <USER_SPI_status+0x14>
 800a660:	2301      	movs	r3, #1
 800a662:	e002      	b.n	800a66a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <USER_SPI_status+0x28>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	b2db      	uxtb	r3, r3
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	2000022c 	.word	0x2000022c

0800a67c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <USER_SPI_read+0x1c>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USER_SPI_read+0x20>
 800a698:	2304      	movs	r3, #4
 800a69a:	e04d      	b.n	800a738 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a69c:	4b28      	ldr	r3, [pc, #160]	; (800a740 <USER_SPI_read+0xc4>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <USER_SPI_read+0x32>
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e044      	b.n	800a738 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a6ae:	4b25      	ldr	r3, [pc, #148]	; (800a744 <USER_SPI_read+0xc8>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <USER_SPI_read+0x44>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	025b      	lsls	r3, r3, #9
 800a6be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d111      	bne.n	800a6ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	2011      	movs	r0, #17
 800a6ca:	f7ff fe68 	bl	800a39e <send_cmd>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d129      	bne.n	800a728 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a6d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6d8:	68b8      	ldr	r0, [r7, #8]
 800a6da:	f7ff fe05 	bl	800a2e8 <rcvr_datablock>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d021      	beq.n	800a728 <USER_SPI_read+0xac>
			count = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	e01e      	b.n	800a728 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	2012      	movs	r0, #18
 800a6ee:	f7ff fe56 	bl	800a39e <send_cmd>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d117      	bne.n	800a728 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a6f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6fc:	68b8      	ldr	r0, [r7, #8]
 800a6fe:	f7ff fdf3 	bl	800a2e8 <rcvr_datablock>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <USER_SPI_read+0xa2>
				buff += 512;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a70e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	3b01      	subs	r3, #1
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ed      	bne.n	800a6f8 <USER_SPI_read+0x7c>
 800a71c:	e000      	b.n	800a720 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a71e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a720:	2100      	movs	r1, #0
 800a722:	200c      	movs	r0, #12
 800a724:	f7ff fe3b 	bl	800a39e <send_cmd>
		}
	}
	despiselect();
 800a728:	f7ff fdb8 	bl	800a29c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bf14      	ite	ne
 800a732:	2301      	movne	r3, #1
 800a734:	2300      	moveq	r3, #0
 800a736:	b2db      	uxtb	r3, r3
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	2000022c 	.word	0x2000022c
 800a744:	200007ac 	.word	0x200007ac

0800a748 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d102      	bne.n	800a764 <USER_SPI_write+0x1c>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <USER_SPI_write+0x20>
 800a764:	2304      	movs	r3, #4
 800a766:	e063      	b.n	800a830 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a768:	4b33      	ldr	r3, [pc, #204]	; (800a838 <USER_SPI_write+0xf0>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <USER_SPI_write+0x32>
 800a776:	2303      	movs	r3, #3
 800a778:	e05a      	b.n	800a830 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a77a:	4b2f      	ldr	r3, [pc, #188]	; (800a838 <USER_SPI_write+0xf0>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <USER_SPI_write+0x44>
 800a788:	2302      	movs	r3, #2
 800a78a:	e051      	b.n	800a830 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <USER_SPI_write+0xf4>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 0308 	and.w	r3, r3, #8
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <USER_SPI_write+0x56>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	025b      	lsls	r3, r3, #9
 800a79c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d110      	bne.n	800a7c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	2018      	movs	r0, #24
 800a7a8:	f7ff fdf9 	bl	800a39e <send_cmd>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d136      	bne.n	800a820 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a7b2:	21fe      	movs	r1, #254	; 0xfe
 800a7b4:	68b8      	ldr	r0, [r7, #8]
 800a7b6:	f7ff fdc0 	bl	800a33a <xmit_datablock>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d02f      	beq.n	800a820 <USER_SPI_write+0xd8>
			count = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	e02c      	b.n	800a820 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a7c6:	4b1d      	ldr	r3, [pc, #116]	; (800a83c <USER_SPI_write+0xf4>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	f003 0306 	and.w	r3, r3, #6
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <USER_SPI_write+0x92>
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	2097      	movs	r0, #151	; 0x97
 800a7d6:	f7ff fde2 	bl	800a39e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	2019      	movs	r0, #25
 800a7de:	f7ff fdde 	bl	800a39e <send_cmd>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11b      	bne.n	800a820 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a7e8:	21fc      	movs	r1, #252	; 0xfc
 800a7ea:	68b8      	ldr	r0, [r7, #8]
 800a7ec:	f7ff fda5 	bl	800a33a <xmit_datablock>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <USER_SPI_write+0xc4>
				buff += 512;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a7fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	3b01      	subs	r3, #1
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1ee      	bne.n	800a7e8 <USER_SPI_write+0xa0>
 800a80a:	e000      	b.n	800a80e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a80c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a80e:	21fd      	movs	r1, #253	; 0xfd
 800a810:	2000      	movs	r0, #0
 800a812:	f7ff fd92 	bl	800a33a <xmit_datablock>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <USER_SPI_write+0xd8>
 800a81c:	2301      	movs	r3, #1
 800a81e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a820:	f7ff fd3c 	bl	800a29c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	bf14      	ite	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	2300      	moveq	r3, #0
 800a82e:	b2db      	uxtb	r3, r3
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	2000022c 	.word	0x2000022c
 800a83c:	200007ac 	.word	0x200007ac

0800a840 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08c      	sub	sp, #48	; 0x30
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	603a      	str	r2, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
 800a84c:	460b      	mov	r3, r1
 800a84e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <USER_SPI_ioctl+0x1a>
 800a856:	2304      	movs	r3, #4
 800a858:	e15a      	b.n	800ab10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a85a:	4baf      	ldr	r3, [pc, #700]	; (800ab18 <USER_SPI_ioctl+0x2d8>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <USER_SPI_ioctl+0x2c>
 800a868:	2303      	movs	r3, #3
 800a86a:	e151      	b.n	800ab10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a872:	79bb      	ldrb	r3, [r7, #6]
 800a874:	2b04      	cmp	r3, #4
 800a876:	f200 8136 	bhi.w	800aae6 <USER_SPI_ioctl+0x2a6>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <USER_SPI_ioctl+0x40>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a895 	.word	0x0800a895
 800a884:	0800a8a9 	.word	0x0800a8a9
 800a888:	0800aae7 	.word	0x0800aae7
 800a88c:	0800a955 	.word	0x0800a955
 800a890:	0800aa4b 	.word	0x0800aa4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a894:	f7ff fd0f 	bl	800a2b6 <spiselect>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 8127 	beq.w	800aaee <USER_SPI_ioctl+0x2ae>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a8a6:	e122      	b.n	800aaee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	2009      	movs	r0, #9
 800a8ac:	f7ff fd77 	bl	800a39e <send_cmd>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 811d 	bne.w	800aaf2 <USER_SPI_ioctl+0x2b2>
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	2110      	movs	r1, #16
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fd12 	bl	800a2e8 <rcvr_datablock>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8113 	beq.w	800aaf2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a8cc:	7b3b      	ldrb	r3, [r7, #12]
 800a8ce:	099b      	lsrs	r3, r3, #6
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d111      	bne.n	800a8fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a8d6:	7d7b      	ldrb	r3, [r7, #21]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	7d3b      	ldrb	r3, [r7, #20]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	4413      	add	r3, r2
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	7cfb      	ldrb	r3, [r7, #19]
 800a8e4:	041b      	lsls	r3, r3, #16
 800a8e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a8ea:	4413      	add	r3, r2
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	029a      	lsls	r2, r3, #10
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e028      	b.n	800a94c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a8fa:	7c7b      	ldrb	r3, [r7, #17]
 800a8fc:	f003 030f 	and.w	r3, r3, #15
 800a900:	b2da      	uxtb	r2, r3
 800a902:	7dbb      	ldrb	r3, [r7, #22]
 800a904:	09db      	lsrs	r3, r3, #7
 800a906:	b2db      	uxtb	r3, r3
 800a908:	4413      	add	r3, r2
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	7d7b      	ldrb	r3, [r7, #21]
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 0306 	and.w	r3, r3, #6
 800a916:	b2db      	uxtb	r3, r3
 800a918:	4413      	add	r3, r2
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	3302      	adds	r3, #2
 800a91e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a922:	7d3b      	ldrb	r3, [r7, #20]
 800a924:	099b      	lsrs	r3, r3, #6
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	7cfb      	ldrb	r3, [r7, #19]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	441a      	add	r2, r3
 800a930:	7cbb      	ldrb	r3, [r7, #18]
 800a932:	029b      	lsls	r3, r3, #10
 800a934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a938:	4413      	add	r3, r2
 800a93a:	3301      	adds	r3, #1
 800a93c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a93e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a942:	3b09      	subs	r3, #9
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	409a      	lsls	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a952:	e0ce      	b.n	800aaf2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a954:	4b71      	ldr	r3, [pc, #452]	; (800ab1c <USER_SPI_ioctl+0x2dc>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d031      	beq.n	800a9c4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a960:	2100      	movs	r1, #0
 800a962:	208d      	movs	r0, #141	; 0x8d
 800a964:	f7ff fd1b 	bl	800a39e <send_cmd>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f040 80c3 	bne.w	800aaf6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a970:	20ff      	movs	r0, #255	; 0xff
 800a972:	f7ff fc23 	bl	800a1bc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a976:	f107 030c 	add.w	r3, r7, #12
 800a97a:	2110      	movs	r1, #16
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fcb3 	bl	800a2e8 <rcvr_datablock>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80b6 	beq.w	800aaf6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a98a:	2330      	movs	r3, #48	; 0x30
 800a98c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a990:	e007      	b.n	800a9a2 <USER_SPI_ioctl+0x162>
 800a992:	20ff      	movs	r0, #255	; 0xff
 800a994:	f7ff fc12 	bl	800a1bc <xchg_spi>
 800a998:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a99c:	3b01      	subs	r3, #1
 800a99e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a9a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1f3      	bne.n	800a992 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a9aa:	7dbb      	ldrb	r3, [r7, #22]
 800a9ac:	091b      	lsrs	r3, r3, #4
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	fa03 f202 	lsl.w	r2, r3, r2
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a9c2:	e098      	b.n	800aaf6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2009      	movs	r0, #9
 800a9c8:	f7ff fce9 	bl	800a39e <send_cmd>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f040 8091 	bne.w	800aaf6 <USER_SPI_ioctl+0x2b6>
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	2110      	movs	r1, #16
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fc84 	bl	800a2e8 <rcvr_datablock>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8087 	beq.w	800aaf6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a9e8:	4b4c      	ldr	r3, [pc, #304]	; (800ab1c <USER_SPI_ioctl+0x2dc>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d012      	beq.n	800aa1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a9f4:	7dbb      	ldrb	r3, [r7, #22]
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a9fc:	7dfa      	ldrb	r2, [r7, #23]
 800a9fe:	09d2      	lsrs	r2, r2, #7
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	4413      	add	r3, r2
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	7e7b      	ldrb	r3, [r7, #25]
 800aa08:	099b      	lsrs	r3, r3, #6
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	e013      	b.n	800aa42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800aa1a:	7dbb      	ldrb	r3, [r7, #22]
 800aa1c:	109b      	asrs	r3, r3, #2
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	3301      	adds	r3, #1
 800aa26:	7dfa      	ldrb	r2, [r7, #23]
 800aa28:	00d2      	lsls	r2, r2, #3
 800aa2a:	f002 0218 	and.w	r2, r2, #24
 800aa2e:	7df9      	ldrb	r1, [r7, #23]
 800aa30:	0949      	lsrs	r1, r1, #5
 800aa32:	b2c9      	uxtb	r1, r1
 800aa34:	440a      	add	r2, r1
 800aa36:	3201      	adds	r2, #1
 800aa38:	fb02 f303 	mul.w	r3, r2, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800aa48:	e055      	b.n	800aaf6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800aa4a:	4b34      	ldr	r3, [pc, #208]	; (800ab1c <USER_SPI_ioctl+0x2dc>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 0306 	and.w	r3, r3, #6
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d051      	beq.n	800aafa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800aa56:	f107 020c 	add.w	r2, r7, #12
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	210b      	movs	r1, #11
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff feee 	bl	800a840 <USER_SPI_ioctl>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d149      	bne.n	800aafe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800aa6a:	7b3b      	ldrb	r3, [r7, #12]
 800aa6c:	099b      	lsrs	r3, r3, #6
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <USER_SPI_ioctl+0x23e>
 800aa74:	7dbb      	ldrb	r3, [r7, #22]
 800aa76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d041      	beq.n	800ab02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800aa8e:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <USER_SPI_ioctl+0x2dc>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 0308 	and.w	r3, r3, #8
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d105      	bne.n	800aaa6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	025b      	lsls	r3, r3, #9
 800aa9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	025b      	lsls	r3, r3, #9
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800aaa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaa8:	2020      	movs	r0, #32
 800aaaa:	f7ff fc78 	bl	800a39e <send_cmd>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d128      	bne.n	800ab06 <USER_SPI_ioctl+0x2c6>
 800aab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aab6:	2021      	movs	r0, #33	; 0x21
 800aab8:	f7ff fc71 	bl	800a39e <send_cmd>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d121      	bne.n	800ab06 <USER_SPI_ioctl+0x2c6>
 800aac2:	2100      	movs	r1, #0
 800aac4:	2026      	movs	r0, #38	; 0x26
 800aac6:	f7ff fc6a 	bl	800a39e <send_cmd>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d11a      	bne.n	800ab06 <USER_SPI_ioctl+0x2c6>
 800aad0:	f247 5030 	movw	r0, #30000	; 0x7530
 800aad4:	f7ff fbbf 	bl	800a256 <wait_ready>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d013      	beq.n	800ab06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800aade:	2300      	movs	r3, #0
 800aae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800aae4:	e00f      	b.n	800ab06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800aae6:	2304      	movs	r3, #4
 800aae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aaec:	e00c      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		break;
 800aaee:	bf00      	nop
 800aaf0:	e00a      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		break;
 800aaf2:	bf00      	nop
 800aaf4:	e008      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		break;
 800aaf6:	bf00      	nop
 800aaf8:	e006      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800aafa:	bf00      	nop
 800aafc:	e004      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800aafe:	bf00      	nop
 800ab00:	e002      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <USER_SPI_ioctl+0x2c8>
		break;
 800ab06:	bf00      	nop
	}

	despiselect();
 800ab08:	f7ff fbc8 	bl	800a29c <despiselect>

	return res;
 800ab0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3730      	adds	r7, #48	; 0x30
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	2000022c 	.word	0x2000022c
 800ab1c:	200007ac 	.word	0x200007ac

0800ab20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <disk_status+0x30>)
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	79fa      	ldrb	r2, [r7, #7]
 800ab38:	4905      	ldr	r1, [pc, #20]	; (800ab50 <disk_status+0x30>)
 800ab3a:	440a      	add	r2, r1
 800ab3c:	7a12      	ldrb	r2, [r2, #8]
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4798      	blx	r3
 800ab42:	4603      	mov	r3, r0
 800ab44:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	200007e0 	.word	0x200007e0

0800ab54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	4a0d      	ldr	r2, [pc, #52]	; (800ab9c <disk_initialize+0x48>)
 800ab66:	5cd3      	ldrb	r3, [r2, r3]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d111      	bne.n	800ab90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <disk_initialize+0x48>)
 800ab70:	2101      	movs	r1, #1
 800ab72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	4a09      	ldr	r2, [pc, #36]	; (800ab9c <disk_initialize+0x48>)
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	79fa      	ldrb	r2, [r7, #7]
 800ab82:	4906      	ldr	r1, [pc, #24]	; (800ab9c <disk_initialize+0x48>)
 800ab84:	440a      	add	r2, r1
 800ab86:	7a12      	ldrb	r2, [r2, #8]
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200007e0 	.word	0x200007e0

0800aba0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aba0:	b590      	push	{r4, r7, lr}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	607a      	str	r2, [r7, #4]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	4a0a      	ldr	r2, [pc, #40]	; (800abdc <disk_read+0x3c>)
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	689c      	ldr	r4, [r3, #8]
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	4a07      	ldr	r2, [pc, #28]	; (800abdc <disk_read+0x3c>)
 800abc0:	4413      	add	r3, r2
 800abc2:	7a18      	ldrb	r0, [r3, #8]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	47a0      	blx	r4
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]
  return res;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd90      	pop	{r4, r7, pc}
 800abda:	bf00      	nop
 800abdc:	200007e0 	.word	0x200007e0

0800abe0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <disk_write+0x3c>)
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	68dc      	ldr	r4, [r3, #12]
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4a07      	ldr	r2, [pc, #28]	; (800ac1c <disk_write+0x3c>)
 800ac00:	4413      	add	r3, r2
 800ac02:	7a18      	ldrb	r0, [r3, #8]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	47a0      	blx	r4
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd90      	pop	{r4, r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200007e0 	.word	0x200007e0

0800ac20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	603a      	str	r2, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	4a09      	ldr	r2, [pc, #36]	; (800ac58 <disk_ioctl+0x38>)
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	79fa      	ldrb	r2, [r7, #7]
 800ac3e:	4906      	ldr	r1, [pc, #24]	; (800ac58 <disk_ioctl+0x38>)
 800ac40:	440a      	add	r2, r1
 800ac42:	7a10      	ldrb	r0, [r2, #8]
 800ac44:	79b9      	ldrb	r1, [r7, #6]
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4798      	blx	r3
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	200007e0 	.word	0x200007e0

0800ac5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3301      	adds	r3, #1
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac6c:	89fb      	ldrh	r3, [r7, #14]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	b21a      	sxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	b21b      	sxth	r3, r3
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b21b      	sxth	r3, r3
 800ac7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac7e:	89fb      	ldrh	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3303      	adds	r3, #3
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	021b      	lsls	r3, r3, #8
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	3202      	adds	r2, #2
 800aca4:	7812      	ldrb	r2, [r2, #0]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	3201      	adds	r2, #1
 800acb2:	7812      	ldrb	r2, [r2, #0]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7812      	ldrb	r2, [r2, #0]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
	return rv;
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	887a      	ldrh	r2, [r7, #2]
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	887b      	ldrh	r3, [r7, #2]
 800acec:	0a1b      	lsrs	r3, r3, #8
 800acee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	607a      	str	r2, [r7, #4]
 800acf6:	887a      	ldrh	r2, [r7, #2]
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	0a1b      	lsrs	r3, r3, #8
 800ad22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	607a      	str	r2, [r7, #4]
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	0a1b      	lsrs	r3, r3, #8
 800ad46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	607a      	str	r2, [r7, #4]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	701a      	strb	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00d      	beq.n	800ad96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	1c53      	adds	r3, r2, #1
 800ad7e:	613b      	str	r3, [r7, #16]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	1c59      	adds	r1, r3, #1
 800ad84:	6179      	str	r1, [r7, #20]
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f1      	bne.n	800ad7a <mem_cpy+0x1a>
	}
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ada2:	b480      	push	{r7}
 800ada4:	b087      	sub	sp, #28
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	617a      	str	r2, [r7, #20]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1f3      	bne.n	800adb2 <mem_set+0x10>
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800add8:	b480      	push	{r7}
 800adda:	b089      	sub	sp, #36	; 0x24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	61fa      	str	r2, [r7, #28]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	4619      	mov	r1, r3
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	61ba      	str	r2, [r7, #24]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	1acb      	subs	r3, r1, r3
 800ae04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <mem_cmp+0x40>
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0eb      	beq.n	800adf0 <mem_cmp+0x18>

	return r;
 800ae18:	697b      	ldr	r3, [r7, #20]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3724      	adds	r7, #36	; 0x24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae30:	e002      	b.n	800ae38 <chk_chr+0x12>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3301      	adds	r3, #1
 800ae36:	607b      	str	r3, [r7, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <chk_chr+0x26>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d1f2      	bne.n	800ae32 <chk_chr+0xc>
	return *str;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	e029      	b.n	800aec4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae70:	4a27      	ldr	r2, [pc, #156]	; (800af10 <chk_lock+0xb4>)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	011b      	lsls	r3, r3, #4
 800ae76:	4413      	add	r3, r2
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d01d      	beq.n	800aeba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae7e:	4a24      	ldr	r2, [pc, #144]	; (800af10 <chk_lock+0xb4>)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	011b      	lsls	r3, r3, #4
 800ae84:	4413      	add	r3, r2
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d116      	bne.n	800aebe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ae90:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <chk_lock+0xb4>)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	4413      	add	r3, r2
 800ae98:	3304      	adds	r3, #4
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d10c      	bne.n	800aebe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aea4:	4a1a      	ldr	r2, [pc, #104]	; (800af10 <chk_lock+0xb4>)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	4413      	add	r3, r2
 800aeac:	3308      	adds	r3, #8
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d102      	bne.n	800aebe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aeb8:	e007      	b.n	800aeca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aeba:	2301      	movs	r3, #1
 800aebc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d9d2      	bls.n	800ae70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d109      	bne.n	800aee4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <chk_lock+0x80>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d101      	bne.n	800aee0 <chk_lock+0x84>
 800aedc:	2300      	movs	r3, #0
 800aede:	e010      	b.n	800af02 <chk_lock+0xa6>
 800aee0:	2312      	movs	r3, #18
 800aee2:	e00e      	b.n	800af02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d108      	bne.n	800aefc <chk_lock+0xa0>
 800aeea:	4a09      	ldr	r2, [pc, #36]	; (800af10 <chk_lock+0xb4>)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	4413      	add	r3, r2
 800aef2:	330c      	adds	r3, #12
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aefa:	d101      	bne.n	800af00 <chk_lock+0xa4>
 800aefc:	2310      	movs	r3, #16
 800aefe:	e000      	b.n	800af02 <chk_lock+0xa6>
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	200007c0 	.word	0x200007c0

0800af14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	e002      	b.n	800af26 <enq_lock+0x12>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3301      	adds	r3, #1
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d806      	bhi.n	800af3a <enq_lock+0x26>
 800af2c:	4a09      	ldr	r2, [pc, #36]	; (800af54 <enq_lock+0x40>)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	4413      	add	r3, r2
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f2      	bne.n	800af20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	bf14      	ite	ne
 800af40:	2301      	movne	r3, #1
 800af42:	2300      	moveq	r3, #0
 800af44:	b2db      	uxtb	r3, r3
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	200007c0 	.word	0x200007c0

0800af58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e01f      	b.n	800afa8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af68:	4a41      	ldr	r2, [pc, #260]	; (800b070 <inc_lock+0x118>)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	4413      	add	r3, r2
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d113      	bne.n	800afa2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af7a:	4a3d      	ldr	r2, [pc, #244]	; (800b070 <inc_lock+0x118>)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	011b      	lsls	r3, r3, #4
 800af80:	4413      	add	r3, r2
 800af82:	3304      	adds	r3, #4
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d109      	bne.n	800afa2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af8e:	4a38      	ldr	r2, [pc, #224]	; (800b070 <inc_lock+0x118>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	4413      	add	r3, r2
 800af96:	3308      	adds	r3, #8
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d006      	beq.n	800afb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d9dc      	bls.n	800af68 <inc_lock+0x10>
 800afae:	e000      	b.n	800afb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d132      	bne.n	800b01e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afb8:	2300      	movs	r3, #0
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	e002      	b.n	800afc4 <inc_lock+0x6c>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3301      	adds	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d806      	bhi.n	800afd8 <inc_lock+0x80>
 800afca:	4a29      	ldr	r2, [pc, #164]	; (800b070 <inc_lock+0x118>)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	4413      	add	r3, r2
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1f2      	bne.n	800afbe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d101      	bne.n	800afe2 <inc_lock+0x8a>
 800afde:	2300      	movs	r3, #0
 800afe0:	e040      	b.n	800b064 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	4922      	ldr	r1, [pc, #136]	; (800b070 <inc_lock+0x118>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	440b      	add	r3, r1
 800afee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	491e      	ldr	r1, [pc, #120]	; (800b070 <inc_lock+0x118>)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	440b      	add	r3, r1
 800affc:	3304      	adds	r3, #4
 800affe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	695a      	ldr	r2, [r3, #20]
 800b004:	491a      	ldr	r1, [pc, #104]	; (800b070 <inc_lock+0x118>)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	011b      	lsls	r3, r3, #4
 800b00a:	440b      	add	r3, r1
 800b00c:	3308      	adds	r3, #8
 800b00e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b010:	4a17      	ldr	r2, [pc, #92]	; (800b070 <inc_lock+0x118>)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	4413      	add	r3, r2
 800b018:	330c      	adds	r3, #12
 800b01a:	2200      	movs	r2, #0
 800b01c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <inc_lock+0xe0>
 800b024:	4a12      	ldr	r2, [pc, #72]	; (800b070 <inc_lock+0x118>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	4413      	add	r3, r2
 800b02c:	330c      	adds	r3, #12
 800b02e:	881b      	ldrh	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <inc_lock+0xe0>
 800b034:	2300      	movs	r3, #0
 800b036:	e015      	b.n	800b064 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d108      	bne.n	800b050 <inc_lock+0xf8>
 800b03e:	4a0c      	ldr	r2, [pc, #48]	; (800b070 <inc_lock+0x118>)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	011b      	lsls	r3, r3, #4
 800b044:	4413      	add	r3, r2
 800b046:	330c      	adds	r3, #12
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	3301      	adds	r3, #1
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	e001      	b.n	800b054 <inc_lock+0xfc>
 800b050:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b054:	4906      	ldr	r1, [pc, #24]	; (800b070 <inc_lock+0x118>)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	011b      	lsls	r3, r3, #4
 800b05a:	440b      	add	r3, r1
 800b05c:	330c      	adds	r3, #12
 800b05e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	200007c0 	.word	0x200007c0

0800b074 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3b01      	subs	r3, #1
 800b080:	607b      	str	r3, [r7, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d825      	bhi.n	800b0d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800b088:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <dec_lock+0x74>)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	4413      	add	r3, r2
 800b090:	330c      	adds	r3, #12
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b096:	89fb      	ldrh	r3, [r7, #14]
 800b098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b09c:	d101      	bne.n	800b0a2 <dec_lock+0x2e>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0a2:	89fb      	ldrh	r3, [r7, #14]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <dec_lock+0x3a>
 800b0a8:	89fb      	ldrh	r3, [r7, #14]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0ae:	4a0e      	ldr	r2, [pc, #56]	; (800b0e8 <dec_lock+0x74>)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	330c      	adds	r3, #12
 800b0b8:	89fa      	ldrh	r2, [r7, #14]
 800b0ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0bc:	89fb      	ldrh	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <dec_lock+0x5a>
 800b0c2:	4a09      	ldr	r2, [pc, #36]	; (800b0e8 <dec_lock+0x74>)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	4413      	add	r3, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	737b      	strb	r3, [r7, #13]
 800b0d2:	e001      	b.n	800b0d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	200007c0 	.word	0x200007c0

0800b0ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e010      	b.n	800b11c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0fa:	4a0d      	ldr	r2, [pc, #52]	; (800b130 <clear_lock+0x44>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	4413      	add	r3, r2
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d105      	bne.n	800b116 <clear_lock+0x2a>
 800b10a:	4a09      	ldr	r2, [pc, #36]	; (800b130 <clear_lock+0x44>)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	4413      	add	r3, r2
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3301      	adds	r3, #1
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d9eb      	bls.n	800b0fa <clear_lock+0xe>
	}
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	200007c0 	.word	0x200007c0

0800b134 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	78db      	ldrb	r3, [r3, #3]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d034      	beq.n	800b1b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7858      	ldrb	r0, [r3, #1]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b158:	2301      	movs	r3, #1
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	f7ff fd40 	bl	800abe0 <disk_write>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b166:	2301      	movs	r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]
 800b16a:	e022      	b.n	800b1b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d217      	bcs.n	800b1b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	789b      	ldrb	r3, [r3, #2]
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	e010      	b.n	800b1ac <sync_window+0x78>
					wsect += fs->fsize;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7858      	ldrb	r0, [r3, #1]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b19e:	2301      	movs	r3, #1
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	f7ff fd1d 	bl	800abe0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d8eb      	bhi.n	800b18a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d01b      	beq.n	800b20c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff ffad 	bl	800b134 <sync_window>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d113      	bne.n	800b20c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	7858      	ldrb	r0, [r3, #1]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	f7ff fcd5 	bl	800aba0 <disk_read>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b200:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b202:	2301      	movs	r3, #1
 800b204:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ff87 	bl	800b134 <sync_window>
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d158      	bne.n	800b2e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b03      	cmp	r3, #3
 800b236:	d148      	bne.n	800b2ca <sync_fs+0xb2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	791b      	ldrb	r3, [r3, #4]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d144      	bne.n	800b2ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3330      	adds	r3, #48	; 0x30
 800b244:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff fda9 	bl	800ada2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3330      	adds	r3, #48	; 0x30
 800b254:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b258:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff fd38 	bl	800acd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3330      	adds	r3, #48	; 0x30
 800b266:	4921      	ldr	r1, [pc, #132]	; (800b2ec <sync_fs+0xd4>)
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fd4d 	bl	800ad08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	3330      	adds	r3, #48	; 0x30
 800b272:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b276:	491e      	ldr	r1, [pc, #120]	; (800b2f0 <sync_fs+0xd8>)
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fd45 	bl	800ad08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3330      	adds	r3, #48	; 0x30
 800b282:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f7ff fd3b 	bl	800ad08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3330      	adds	r3, #48	; 0x30
 800b296:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f7ff fd31 	bl	800ad08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7858      	ldrb	r0, [r3, #1]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f7ff fc8e 	bl	800abe0 <disk_write>
			fs->fsi_flag = 0;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7ff fca4 	bl	800ac20 <disk_ioctl>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <sync_fs+0xca>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	41615252 	.word	0x41615252
 800b2f0:	61417272 	.word	0x61417272

0800b2f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	3b02      	subs	r3, #2
 800b302:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	3b02      	subs	r3, #2
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d301      	bcc.n	800b314 <clust2sect+0x20>
 800b310:	2300      	movs	r3, #0
 800b312:	e008      	b.n	800b326 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	895b      	ldrh	r3, [r3, #10]
 800b318:	461a      	mov	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	fb03 f202 	mul.w	r2, r3, r2
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b324:	4413      	add	r3, r2
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b086      	sub	sp, #24
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d904      	bls.n	800b352 <get_fat+0x20>
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d302      	bcc.n	800b358 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b352:	2301      	movs	r3, #1
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	e08f      	b.n	800b478 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b358:	f04f 33ff 	mov.w	r3, #4294967295
 800b35c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b03      	cmp	r3, #3
 800b364:	d062      	beq.n	800b42c <get_fat+0xfa>
 800b366:	2b03      	cmp	r3, #3
 800b368:	dc7c      	bgt.n	800b464 <get_fat+0x132>
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d002      	beq.n	800b374 <get_fat+0x42>
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d042      	beq.n	800b3f8 <get_fat+0xc6>
 800b372:	e077      	b.n	800b464 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	085b      	lsrs	r3, r3, #1
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	6a1a      	ldr	r2, [r3, #32]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	0a5b      	lsrs	r3, r3, #9
 800b38a:	4413      	add	r3, r2
 800b38c:	4619      	mov	r1, r3
 800b38e:	6938      	ldr	r0, [r7, #16]
 800b390:	f7ff ff14 	bl	800b1bc <move_window>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d167      	bne.n	800b46a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	60fa      	str	r2, [r7, #12]
 800b3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	6a1a      	ldr	r2, [r3, #32]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	0a5b      	lsrs	r3, r3, #9
 800b3b6:	4413      	add	r3, r2
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6938      	ldr	r0, [r7, #16]
 800b3bc:	f7ff fefe 	bl	800b1bc <move_window>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d153      	bne.n	800b46e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3d4:	021b      	lsls	r3, r3, #8
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <get_fat+0xbc>
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	091b      	lsrs	r3, r3, #4
 800b3ec:	e002      	b.n	800b3f4 <get_fat+0xc2>
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3f4:	617b      	str	r3, [r7, #20]
			break;
 800b3f6:	e03f      	b.n	800b478 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	6a1a      	ldr	r2, [r3, #32]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	0a1b      	lsrs	r3, r3, #8
 800b400:	4413      	add	r3, r2
 800b402:	4619      	mov	r1, r3
 800b404:	6938      	ldr	r0, [r7, #16]
 800b406:	f7ff fed9 	bl	800b1bc <move_window>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d130      	bne.n	800b472 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b41e:	4413      	add	r3, r2
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff fc1b 	bl	800ac5c <ld_word>
 800b426:	4603      	mov	r3, r0
 800b428:	617b      	str	r3, [r7, #20]
			break;
 800b42a:	e025      	b.n	800b478 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6a1a      	ldr	r2, [r3, #32]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	09db      	lsrs	r3, r3, #7
 800b434:	4413      	add	r3, r2
 800b436:	4619      	mov	r1, r3
 800b438:	6938      	ldr	r0, [r7, #16]
 800b43a:	f7ff febf 	bl	800b1bc <move_window>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d118      	bne.n	800b476 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b452:	4413      	add	r3, r2
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff fc19 	bl	800ac8c <ld_dword>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b460:	617b      	str	r3, [r7, #20]
			break;
 800b462:	e009      	b.n	800b478 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e006      	b.n	800b478 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b46a:	bf00      	nop
 800b46c:	e004      	b.n	800b478 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b46e:	bf00      	nop
 800b470:	e002      	b.n	800b478 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b476:	bf00      	nop
		}
	}

	return val;
 800b478:	697b      	ldr	r3, [r7, #20]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b482:	b590      	push	{r4, r7, lr}
 800b484:	b089      	sub	sp, #36	; 0x24
 800b486:	af00      	add	r7, sp, #0
 800b488:	60f8      	str	r0, [r7, #12]
 800b48a:	60b9      	str	r1, [r7, #8]
 800b48c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b48e:	2302      	movs	r3, #2
 800b490:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2b01      	cmp	r3, #1
 800b496:	f240 80d2 	bls.w	800b63e <put_fat+0x1bc>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	f080 80cc 	bcs.w	800b63e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	f000 8096 	beq.w	800b5dc <put_fat+0x15a>
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	f300 80cd 	bgt.w	800b650 <put_fat+0x1ce>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d002      	beq.n	800b4c0 <put_fat+0x3e>
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d06e      	beq.n	800b59c <put_fat+0x11a>
 800b4be:	e0c7      	b.n	800b650 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	085b      	lsrs	r3, r3, #1
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6a1a      	ldr	r2, [r3, #32]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	0a5b      	lsrs	r3, r3, #9
 800b4d6:	4413      	add	r3, r2
 800b4d8:	4619      	mov	r1, r3
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff fe6e 	bl	800b1bc <move_window>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4e4:	7ffb      	ldrb	r3, [r7, #31]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f040 80ab 	bne.w	800b642 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	1c59      	adds	r1, r3, #1
 800b4f6:	61b9      	str	r1, [r7, #24]
 800b4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fc:	4413      	add	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00d      	beq.n	800b526 <put_fat+0xa4>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	f003 030f 	and.w	r3, r3, #15
 800b514:	b25a      	sxtb	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	011b      	lsls	r3, r3, #4
 800b51c:	b25b      	sxtb	r3, r3
 800b51e:	4313      	orrs	r3, r2
 800b520:	b25b      	sxtb	r3, r3
 800b522:	b2db      	uxtb	r3, r3
 800b524:	e001      	b.n	800b52a <put_fat+0xa8>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6a1a      	ldr	r2, [r3, #32]
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	0a5b      	lsrs	r3, r3, #9
 800b53c:	4413      	add	r3, r2
 800b53e:	4619      	mov	r1, r3
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f7ff fe3b 	bl	800b1bc <move_window>
 800b546:	4603      	mov	r3, r0
 800b548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b54a:	7ffb      	ldrb	r3, [r7, #31]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d17a      	bne.n	800b646 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55c:	4413      	add	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <put_fat+0xf0>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	091b      	lsrs	r3, r3, #4
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	e00e      	b.n	800b590 <put_fat+0x10e>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b25b      	sxtb	r3, r3
 800b578:	f023 030f 	bic.w	r3, r3, #15
 800b57c:	b25a      	sxtb	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	b25b      	sxtb	r3, r3
 800b584:	f003 030f 	and.w	r3, r3, #15
 800b588:	b25b      	sxtb	r3, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b25b      	sxtb	r3, r3
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2201      	movs	r2, #1
 800b598:	70da      	strb	r2, [r3, #3]
			break;
 800b59a:	e059      	b.n	800b650 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a1a      	ldr	r2, [r3, #32]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	0a1b      	lsrs	r3, r3, #8
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f7ff fe07 	bl	800b1bc <move_window>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5b2:	7ffb      	ldrb	r3, [r7, #31]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d148      	bne.n	800b64a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5c6:	4413      	add	r3, r2
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	b292      	uxth	r2, r2
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff fb7f 	bl	800acd2 <st_word>
			fs->wflag = 1;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	70da      	strb	r2, [r3, #3]
			break;
 800b5da:	e039      	b.n	800b650 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a1a      	ldr	r2, [r3, #32]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	09db      	lsrs	r3, r3, #7
 800b5e4:	4413      	add	r3, r2
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7ff fde7 	bl	800b1bc <move_window>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5f2:	7ffb      	ldrb	r3, [r7, #31]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d12a      	bne.n	800b64e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b60c:	4413      	add	r3, r2
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fb3c 	bl	800ac8c <ld_dword>
 800b614:	4603      	mov	r3, r0
 800b616:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b61a:	4323      	orrs	r3, r4
 800b61c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b62c:	4413      	add	r3, r2
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff fb69 	bl	800ad08 <st_dword>
			fs->wflag = 1;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	70da      	strb	r2, [r3, #3]
			break;
 800b63c:	e008      	b.n	800b650 <put_fat+0x1ce>
		}
	}
 800b63e:	bf00      	nop
 800b640:	e006      	b.n	800b650 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b642:	bf00      	nop
 800b644:	e004      	b.n	800b650 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b646:	bf00      	nop
 800b648:	e002      	b.n	800b650 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b64a:	bf00      	nop
 800b64c:	e000      	b.n	800b650 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b64e:	bf00      	nop
	return res;
 800b650:	7ffb      	ldrb	r3, [r7, #31]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3724      	adds	r7, #36	; 0x24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd90      	pop	{r4, r7, pc}

0800b65a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b088      	sub	sp, #32
 800b65e:	af00      	add	r7, sp, #0
 800b660:	60f8      	str	r0, [r7, #12]
 800b662:	60b9      	str	r1, [r7, #8]
 800b664:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d904      	bls.n	800b680 <remove_chain+0x26>
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d301      	bcc.n	800b684 <remove_chain+0x2a>
 800b680:	2302      	movs	r3, #2
 800b682:	e04b      	b.n	800b71c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	69b8      	ldr	r0, [r7, #24]
 800b692:	f7ff fef6 	bl	800b482 <put_fat>
 800b696:	4603      	mov	r3, r0
 800b698:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b69a:	7ffb      	ldrb	r3, [r7, #31]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <remove_chain+0x4a>
 800b6a0:	7ffb      	ldrb	r3, [r7, #31]
 800b6a2:	e03b      	b.n	800b71c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6a4:	68b9      	ldr	r1, [r7, #8]
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fe43 	bl	800b332 <get_fat>
 800b6ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d031      	beq.n	800b718 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d101      	bne.n	800b6be <remove_chain+0x64>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e02e      	b.n	800b71c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c4:	d101      	bne.n	800b6ca <remove_chain+0x70>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e028      	b.n	800b71c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	69b8      	ldr	r0, [r7, #24]
 800b6d0:	f7ff fed7 	bl	800b482 <put_fat>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b6d8:	7ffb      	ldrb	r3, [r7, #31]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <remove_chain+0x88>
 800b6de:	7ffb      	ldrb	r3, [r7, #31]
 800b6e0:	e01c      	b.n	800b71c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	691a      	ldr	r2, [r3, #16]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	3b02      	subs	r3, #2
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d20b      	bcs.n	800b708 <remove_chain+0xae>
			fs->free_clst++;
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	791b      	ldrb	r3, [r3, #4]
 800b6fe:	f043 0301 	orr.w	r3, r3, #1
 800b702:	b2da      	uxtb	r2, r3
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	429a      	cmp	r2, r3
 800b714:	d3c6      	bcc.n	800b6a4 <remove_chain+0x4a>
 800b716:	e000      	b.n	800b71a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b718:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10d      	bne.n	800b756 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <create_chain+0x2c>
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d31b      	bcc.n	800b788 <create_chain+0x64>
 800b750:	2301      	movs	r3, #1
 800b752:	61bb      	str	r3, [r7, #24]
 800b754:	e018      	b.n	800b788 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff fdea 	bl	800b332 <get_fat>
 800b75e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d801      	bhi.n	800b76a <create_chain+0x46>
 800b766:	2301      	movs	r3, #1
 800b768:	e070      	b.n	800b84c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b770:	d101      	bne.n	800b776 <create_chain+0x52>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	e06a      	b.n	800b84c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d201      	bcs.n	800b784 <create_chain+0x60>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	e063      	b.n	800b84c <create_chain+0x128>
		scl = clst;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	3301      	adds	r3, #1
 800b790:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d307      	bcc.n	800b7ac <create_chain+0x88>
				ncl = 2;
 800b79c:	2302      	movs	r3, #2
 800b79e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7a0:	69fa      	ldr	r2, [r7, #28]
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d901      	bls.n	800b7ac <create_chain+0x88>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e04f      	b.n	800b84c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7ac:	69f9      	ldr	r1, [r7, #28]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff fdbf 	bl	800b332 <get_fat>
 800b7b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00e      	beq.n	800b7da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d003      	beq.n	800b7ca <create_chain+0xa6>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c8:	d101      	bne.n	800b7ce <create_chain+0xaa>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	e03e      	b.n	800b84c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d1da      	bne.n	800b78c <create_chain+0x68>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e038      	b.n	800b84c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b7da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	69f9      	ldr	r1, [r7, #28]
 800b7e2:	6938      	ldr	r0, [r7, #16]
 800b7e4:	f7ff fe4d 	bl	800b482 <put_fat>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <create_chain+0xe2>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b7f8:	69fa      	ldr	r2, [r7, #28]
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6938      	ldr	r0, [r7, #16]
 800b7fe:	f7ff fe40 	bl	800b482 <put_fat>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b806:	7dfb      	ldrb	r3, [r7, #23]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d116      	bne.n	800b83a <create_chain+0x116>
		fs->last_clst = ncl;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	691a      	ldr	r2, [r3, #16]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	3b02      	subs	r3, #2
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d804      	bhi.n	800b82a <create_chain+0x106>
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	1e5a      	subs	r2, r3, #1
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	791b      	ldrb	r3, [r3, #4]
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	b2da      	uxtb	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	711a      	strb	r2, [r3, #4]
 800b838:	e007      	b.n	800b84a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d102      	bne.n	800b846 <create_chain+0x122>
 800b840:	f04f 33ff 	mov.w	r3, #4294967295
 800b844:	e000      	b.n	800b848 <create_chain+0x124>
 800b846:	2301      	movs	r3, #1
 800b848:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b84a:	69fb      	ldr	r3, [r7, #28]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	3304      	adds	r3, #4
 800b86a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	0a5b      	lsrs	r3, r3, #9
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	8952      	ldrh	r2, [r2, #10]
 800b874:	fbb3 f3f2 	udiv	r3, r3, r2
 800b878:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	613a      	str	r2, [r7, #16]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <clmt_clust+0x3a>
 800b88a:	2300      	movs	r3, #0
 800b88c:	e010      	b.n	800b8b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	429a      	cmp	r2, r3
 800b894:	d307      	bcc.n	800b8a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8a4:	e7e9      	b.n	800b87a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	4413      	add	r3, r2
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8d2:	d204      	bcs.n	800b8de <dir_sdi+0x22>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f003 031f 	and.w	r3, r3, #31
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e063      	b.n	800b9aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <dir_sdi+0x46>
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d902      	bls.n	800b902 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10c      	bne.n	800b922 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	095b      	lsrs	r3, r3, #5
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	8912      	ldrh	r2, [r2, #8]
 800b910:	4293      	cmp	r3, r2
 800b912:	d301      	bcc.n	800b918 <dir_sdi+0x5c>
 800b914:	2302      	movs	r3, #2
 800b916:	e048      	b.n	800b9aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	61da      	str	r2, [r3, #28]
 800b920:	e029      	b.n	800b976 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	895b      	ldrh	r3, [r3, #10]
 800b926:	025b      	lsls	r3, r3, #9
 800b928:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b92a:	e019      	b.n	800b960 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fcfe 	bl	800b332 <get_fat>
 800b936:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93e:	d101      	bne.n	800b944 <dir_sdi+0x88>
 800b940:	2301      	movs	r3, #1
 800b942:	e032      	b.n	800b9aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d904      	bls.n	800b954 <dir_sdi+0x98>
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	429a      	cmp	r2, r3
 800b952:	d301      	bcc.n	800b958 <dir_sdi+0x9c>
 800b954:	2302      	movs	r3, #2
 800b956:	e028      	b.n	800b9aa <dir_sdi+0xee>
			ofs -= csz;
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	429a      	cmp	r2, r3
 800b966:	d2e1      	bcs.n	800b92c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b968:	6979      	ldr	r1, [r7, #20]
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f7ff fcc2 	bl	800b2f4 <clust2sect>
 800b970:	4602      	mov	r2, r0
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	69db      	ldr	r3, [r3, #28]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <dir_sdi+0xcc>
 800b984:	2302      	movs	r3, #2
 800b986:	e010      	b.n	800b9aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	69da      	ldr	r2, [r3, #28]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	0a5b      	lsrs	r3, r3, #9
 800b990:	441a      	add	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a2:	441a      	add	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	3320      	adds	r3, #32
 800b9c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <dir_next+0x28>
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9d8:	d301      	bcc.n	800b9de <dir_next+0x2c>
 800b9da:	2304      	movs	r3, #4
 800b9dc:	e0aa      	b.n	800bb34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 8098 	bne.w	800bb1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	095b      	lsrs	r3, r3, #5
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	8912      	ldrh	r2, [r2, #8]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	f0c0 8088 	bcc.w	800bb1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	61da      	str	r2, [r3, #28]
 800ba10:	2304      	movs	r3, #4
 800ba12:	e08f      	b.n	800bb34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	0a5b      	lsrs	r3, r3, #9
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	8952      	ldrh	r2, [r2, #10]
 800ba1c:	3a01      	subs	r2, #1
 800ba1e:	4013      	ands	r3, r2
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d17a      	bne.n	800bb1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f7ff fc80 	bl	800b332 <get_fat>
 800ba32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d801      	bhi.n	800ba3e <dir_next+0x8c>
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	e07a      	b.n	800bb34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba44:	d101      	bne.n	800ba4a <dir_next+0x98>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e074      	b.n	800bb34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d358      	bcc.n	800bb06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d104      	bne.n	800ba64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	61da      	str	r2, [r3, #28]
 800ba60:	2304      	movs	r3, #4
 800ba62:	e067      	b.n	800bb34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f7ff fe59 	bl	800b724 <create_chain>
 800ba72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <dir_next+0xcc>
 800ba7a:	2307      	movs	r3, #7
 800ba7c:	e05a      	b.n	800bb34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <dir_next+0xd6>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e055      	b.n	800bb34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d101      	bne.n	800ba94 <dir_next+0xe2>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e04f      	b.n	800bb34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7ff fb4d 	bl	800b134 <sync_window>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <dir_next+0xf2>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e047      	b.n	800bb34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3330      	adds	r3, #48	; 0x30
 800baa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baac:	2100      	movs	r1, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff f977 	bl	800ada2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bab4:	2300      	movs	r3, #0
 800bab6:	613b      	str	r3, [r7, #16]
 800bab8:	6979      	ldr	r1, [r7, #20]
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7ff fc1a 	bl	800b2f4 <clust2sect>
 800bac0:	4602      	mov	r2, r0
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	62da      	str	r2, [r3, #44]	; 0x2c
 800bac6:	e012      	b.n	800baee <dir_next+0x13c>
						fs->wflag = 1;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7ff fb30 	bl	800b134 <sync_window>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <dir_next+0x12c>
 800bada:	2301      	movs	r3, #1
 800badc:	e02a      	b.n	800bb34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	3301      	adds	r3, #1
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	62da      	str	r2, [r3, #44]	; 0x2c
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	895b      	ldrh	r3, [r3, #10]
 800baf2:	461a      	mov	r2, r3
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d3e6      	bcc.n	800bac8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	1ad2      	subs	r2, r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb0c:	6979      	ldr	r1, [r7, #20]
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff fbf0 	bl	800b2f4 <clust2sect>
 800bb14:	4602      	mov	r2, r0
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2c:	441a      	add	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7ff feb4 	bl	800b8bc <dir_sdi>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d12b      	bne.n	800bbb6 <dir_alloc+0x7a>
		n = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	4619      	mov	r1, r3
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f7ff fb27 	bl	800b1bc <move_window>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d11d      	bne.n	800bbb4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2be5      	cmp	r3, #229	; 0xe5
 800bb80:	d004      	beq.n	800bb8c <dir_alloc+0x50>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d107      	bne.n	800bb9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d102      	bne.n	800bba0 <dir_alloc+0x64>
 800bb9a:	e00c      	b.n	800bbb6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bba0:	2101      	movs	r1, #1
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff ff05 	bl	800b9b2 <dir_next>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0d7      	beq.n	800bb62 <dir_alloc+0x26>
 800bbb2:	e000      	b.n	800bbb6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbb4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d101      	bne.n	800bbc0 <dir_alloc+0x84>
 800bbbc:	2307      	movs	r3, #7
 800bbbe:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	331a      	adds	r3, #26
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff f83f 	bl	800ac5c <ld_word>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d109      	bne.n	800bbfe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	3314      	adds	r3, #20
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff f834 	bl	800ac5c <ld_word>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	041b      	lsls	r3, r3, #16
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	331a      	adds	r3, #26
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff f857 	bl	800acd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d109      	bne.n	800bc40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f103 0214 	add.w	r2, r3, #20
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	0c1b      	lsrs	r3, r3, #16
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f7ff f849 	bl	800acd2 <st_word>
	}
}
 800bc40:	bf00      	nop
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc56:	2100      	movs	r1, #0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fe2f 	bl	800b8bc <dir_sdi>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <dir_find+0x24>
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	e03e      	b.n	800bcea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6938      	ldr	r0, [r7, #16]
 800bc74:	f7ff faa2 	bl	800b1bc <move_window>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc7c:	7dfb      	ldrb	r3, [r7, #23]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d12f      	bne.n	800bce2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <dir_find+0x4e>
 800bc90:	2304      	movs	r3, #4
 800bc92:	75fb      	strb	r3, [r7, #23]
 800bc94:	e028      	b.n	800bce8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	330b      	adds	r3, #11
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	330b      	adds	r3, #11
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f003 0308 	and.w	r3, r3, #8
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <dir_find+0x86>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a18      	ldr	r0, [r3, #32]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3324      	adds	r3, #36	; 0x24
 800bcc0:	220b      	movs	r2, #11
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f7ff f888 	bl	800add8 <mem_cmp>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00b      	beq.n	800bce6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcce:	2100      	movs	r1, #0
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff fe6e 	bl	800b9b2 <dir_next>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c5      	beq.n	800bc6c <dir_find+0x24>
 800bce0:	e002      	b.n	800bce8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bce2:	bf00      	nop
 800bce4:	e000      	b.n	800bce8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bce6:	bf00      	nop

	return res;
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bd00:	2101      	movs	r1, #1
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff ff1a 	bl	800bb3c <dir_alloc>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d11c      	bne.n	800bd4c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	4619      	mov	r1, r3
 800bd18:	68b8      	ldr	r0, [r7, #8]
 800bd1a:	f7ff fa4f 	bl	800b1bc <move_window>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d111      	bne.n	800bd4c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	2220      	movs	r2, #32
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff f836 	bl	800ada2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a18      	ldr	r0, [r3, #32]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3324      	adds	r3, #36	; 0x24
 800bd3e:	220b      	movs	r2, #11
 800bd40:	4619      	mov	r1, r3
 800bd42:	f7ff f80d 	bl	800ad60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3324      	adds	r3, #36	; 0x24
 800bd6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd6e:	220b      	movs	r2, #11
 800bd70:	2120      	movs	r1, #32
 800bd72:	68b8      	ldr	r0, [r7, #8]
 800bd74:	f7ff f815 	bl	800ada2 <mem_set>
	si = i = 0; ni = 8;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	613b      	str	r3, [r7, #16]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	61fb      	str	r3, [r7, #28]
 800bd80:	2308      	movs	r3, #8
 800bd82:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	61fa      	str	r2, [r7, #28]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bd92:	7efb      	ldrb	r3, [r7, #27]
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d94e      	bls.n	800be36 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bd98:	7efb      	ldrb	r3, [r7, #27]
 800bd9a:	2b2f      	cmp	r3, #47	; 0x2f
 800bd9c:	d006      	beq.n	800bdac <create_name+0x54>
 800bd9e:	7efb      	ldrb	r3, [r7, #27]
 800bda0:	2b5c      	cmp	r3, #92	; 0x5c
 800bda2:	d110      	bne.n	800bdc6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bda4:	e002      	b.n	800bdac <create_name+0x54>
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	61fb      	str	r3, [r7, #28]
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b2f      	cmp	r3, #47	; 0x2f
 800bdb6:	d0f6      	beq.n	800bda6 <create_name+0x4e>
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdc2:	d0f0      	beq.n	800bda6 <create_name+0x4e>
			break;
 800bdc4:	e038      	b.n	800be38 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdc6:	7efb      	ldrb	r3, [r7, #27]
 800bdc8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdca:	d003      	beq.n	800bdd4 <create_name+0x7c>
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d30c      	bcc.n	800bdee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2b0b      	cmp	r3, #11
 800bdd8:	d002      	beq.n	800bde0 <create_name+0x88>
 800bdda:	7efb      	ldrb	r3, [r7, #27]
 800bddc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdde:	d001      	beq.n	800bde4 <create_name+0x8c>
 800bde0:	2306      	movs	r3, #6
 800bde2:	e044      	b.n	800be6e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bde4:	2308      	movs	r3, #8
 800bde6:	613b      	str	r3, [r7, #16]
 800bde8:	230b      	movs	r3, #11
 800bdea:	617b      	str	r3, [r7, #20]
			continue;
 800bdec:	e022      	b.n	800be34 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bdee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	da04      	bge.n	800be00 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bdf6:	7efb      	ldrb	r3, [r7, #27]
 800bdf8:	3b80      	subs	r3, #128	; 0x80
 800bdfa:	4a1f      	ldr	r2, [pc, #124]	; (800be78 <create_name+0x120>)
 800bdfc:	5cd3      	ldrb	r3, [r2, r3]
 800bdfe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be00:	7efb      	ldrb	r3, [r7, #27]
 800be02:	4619      	mov	r1, r3
 800be04:	481d      	ldr	r0, [pc, #116]	; (800be7c <create_name+0x124>)
 800be06:	f7ff f80e 	bl	800ae26 <chk_chr>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <create_name+0xbc>
 800be10:	2306      	movs	r3, #6
 800be12:	e02c      	b.n	800be6e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be14:	7efb      	ldrb	r3, [r7, #27]
 800be16:	2b60      	cmp	r3, #96	; 0x60
 800be18:	d905      	bls.n	800be26 <create_name+0xce>
 800be1a:	7efb      	ldrb	r3, [r7, #27]
 800be1c:	2b7a      	cmp	r3, #122	; 0x7a
 800be1e:	d802      	bhi.n	800be26 <create_name+0xce>
 800be20:	7efb      	ldrb	r3, [r7, #27]
 800be22:	3b20      	subs	r3, #32
 800be24:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	613a      	str	r2, [r7, #16]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	4413      	add	r3, r2
 800be30:	7efa      	ldrb	r2, [r7, #27]
 800be32:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be34:	e7a6      	b.n	800bd84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be36:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	441a      	add	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <create_name+0xf4>
 800be48:	2306      	movs	r3, #6
 800be4a:	e010      	b.n	800be6e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2be5      	cmp	r3, #229	; 0xe5
 800be52:	d102      	bne.n	800be5a <create_name+0x102>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2205      	movs	r2, #5
 800be58:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be5a:	7efb      	ldrb	r3, [r7, #27]
 800be5c:	2b20      	cmp	r3, #32
 800be5e:	d801      	bhi.n	800be64 <create_name+0x10c>
 800be60:	2204      	movs	r2, #4
 800be62:	e000      	b.n	800be66 <create_name+0x10e>
 800be64:	2200      	movs	r2, #0
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	330b      	adds	r3, #11
 800be6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be6c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3720      	adds	r7, #32
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	08010c64 	.word	0x08010c64
 800be7c:	08010b7c 	.word	0x08010b7c

0800be80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be94:	e002      	b.n	800be9c <follow_path+0x1c>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	3301      	adds	r3, #1
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b2f      	cmp	r3, #47	; 0x2f
 800bea2:	d0f8      	beq.n	800be96 <follow_path+0x16>
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b5c      	cmp	r3, #92	; 0x5c
 800beaa:	d0f4      	beq.n	800be96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2200      	movs	r2, #0
 800beb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2b1f      	cmp	r3, #31
 800beb8:	d80a      	bhi.n	800bed0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2280      	movs	r2, #128	; 0x80
 800bebe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bec2:	2100      	movs	r1, #0
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff fcf9 	bl	800b8bc <dir_sdi>
 800beca:	4603      	mov	r3, r0
 800becc:	75fb      	strb	r3, [r7, #23]
 800bece:	e043      	b.n	800bf58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bed0:	463b      	mov	r3, r7
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ff3f 	bl	800bd58 <create_name>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d134      	bne.n	800bf4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff feaf 	bl	800bc48 <dir_find>
 800beea:	4603      	mov	r3, r0
 800beec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bef4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d127      	bne.n	800bf52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d122      	bne.n	800bf52 <follow_path+0xd2>
 800bf0c:	2305      	movs	r3, #5
 800bf0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf10:	e01f      	b.n	800bf52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf12:	7afb      	ldrb	r3, [r7, #11]
 800bf14:	f003 0304 	and.w	r3, r3, #4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11c      	bne.n	800bf56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	799b      	ldrb	r3, [r3, #6]
 800bf20:	f003 0310 	and.w	r3, r3, #16
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf28:	2305      	movs	r3, #5
 800bf2a:	75fb      	strb	r3, [r7, #23]
 800bf2c:	e014      	b.n	800bf58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3c:	4413      	add	r3, r2
 800bf3e:	4619      	mov	r1, r3
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff fe42 	bl	800bbca <ld_clust>
 800bf46:	4602      	mov	r2, r0
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf4c:	e7c0      	b.n	800bed0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf4e:	bf00      	nop
 800bf50:	e002      	b.n	800bf58 <follow_path+0xd8>
				break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf56:	bf00      	nop
			}
		}
	}

	return res;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b087      	sub	sp, #28
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d031      	beq.n	800bfdc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	617b      	str	r3, [r7, #20]
 800bf7e:	e002      	b.n	800bf86 <get_ldnumber+0x24>
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	3301      	adds	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b20      	cmp	r3, #32
 800bf8c:	d903      	bls.n	800bf96 <get_ldnumber+0x34>
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b3a      	cmp	r3, #58	; 0x3a
 800bf94:	d1f4      	bne.n	800bf80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b3a      	cmp	r3, #58	; 0x3a
 800bf9c:	d11c      	bne.n	800bfd8 <get_ldnumber+0x76>
			tp = *path;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	60fa      	str	r2, [r7, #12]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	3b30      	subs	r3, #48	; 0x30
 800bfae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d80e      	bhi.n	800bfd4 <get_ldnumber+0x72>
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d10a      	bne.n	800bfd4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d107      	bne.n	800bfd4 <get_ldnumber+0x72>
					vol = (int)i;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	617b      	str	r3, [r7, #20]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	e002      	b.n	800bfde <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bfd8:	2300      	movs	r3, #0
 800bfda:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bfdc:	693b      	ldr	r3, [r7, #16]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
	...

0800bfec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	70da      	strb	r2, [r3, #3]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f04f 32ff 	mov.w	r2, #4294967295
 800c002:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff f8d8 	bl	800b1bc <move_window>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <check_fs+0x2a>
 800c012:	2304      	movs	r3, #4
 800c014:	e038      	b.n	800c088 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3330      	adds	r3, #48	; 0x30
 800c01a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fe1c 	bl	800ac5c <ld_word>
 800c024:	4603      	mov	r3, r0
 800c026:	461a      	mov	r2, r3
 800c028:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d001      	beq.n	800c034 <check_fs+0x48>
 800c030:	2303      	movs	r3, #3
 800c032:	e029      	b.n	800c088 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c03a:	2be9      	cmp	r3, #233	; 0xe9
 800c03c:	d009      	beq.n	800c052 <check_fs+0x66>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c044:	2beb      	cmp	r3, #235	; 0xeb
 800c046:	d11e      	bne.n	800c086 <check_fs+0x9a>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c04e:	2b90      	cmp	r3, #144	; 0x90
 800c050:	d119      	bne.n	800c086 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3330      	adds	r3, #48	; 0x30
 800c056:	3336      	adds	r3, #54	; 0x36
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fe17 	bl	800ac8c <ld_dword>
 800c05e:	4603      	mov	r3, r0
 800c060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c064:	4a0a      	ldr	r2, [pc, #40]	; (800c090 <check_fs+0xa4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d101      	bne.n	800c06e <check_fs+0x82>
 800c06a:	2300      	movs	r3, #0
 800c06c:	e00c      	b.n	800c088 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3330      	adds	r3, #48	; 0x30
 800c072:	3352      	adds	r3, #82	; 0x52
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fe09 	bl	800ac8c <ld_dword>
 800c07a:	4603      	mov	r3, r0
 800c07c:	4a05      	ldr	r2, [pc, #20]	; (800c094 <check_fs+0xa8>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d101      	bne.n	800c086 <check_fs+0x9a>
 800c082:	2300      	movs	r3, #0
 800c084:	e000      	b.n	800c088 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c086:	2302      	movs	r3, #2
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	00544146 	.word	0x00544146
 800c094:	33544146 	.word	0x33544146

0800c098 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b096      	sub	sp, #88	; 0x58
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff ff58 	bl	800bf62 <get_ldnumber>
 800c0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	da01      	bge.n	800c0be <find_volume+0x26>
 800c0ba:	230b      	movs	r3, #11
 800c0bc:	e22d      	b.n	800c51a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0be:	4aa1      	ldr	r2, [pc, #644]	; (800c344 <find_volume+0x2ac>)
 800c0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <find_volume+0x3a>
 800c0ce:	230c      	movs	r3, #12
 800c0d0:	e223      	b.n	800c51a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01a      	beq.n	800c11e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	785b      	ldrb	r3, [r3, #1]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fd17 	bl	800ab20 <disk_status>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10c      	bne.n	800c11e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d007      	beq.n	800c11a <find_volume+0x82>
 800c10a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c10e:	f003 0304 	and.w	r3, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c116:	230a      	movs	r3, #10
 800c118:	e1ff      	b.n	800c51a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c11a:	2300      	movs	r3, #0
 800c11c:	e1fd      	b.n	800c51a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c126:	b2da      	uxtb	r2, r3
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	785b      	ldrb	r3, [r3, #1]
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe fd0f 	bl	800ab54 <disk_initialize>
 800c136:	4603      	mov	r3, r0
 800c138:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c13c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c148:	2303      	movs	r3, #3
 800c14a:	e1e6      	b.n	800c51a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d007      	beq.n	800c162 <find_volume+0xca>
 800c152:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c156:	f003 0304 	and.w	r3, r3, #4
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c15e:	230a      	movs	r3, #10
 800c160:	e1db      	b.n	800c51a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c16a:	f7ff ff3f 	bl	800bfec <check_fs>
 800c16e:	4603      	mov	r3, r0
 800c170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d149      	bne.n	800c210 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c17c:	2300      	movs	r3, #0
 800c17e:	643b      	str	r3, [r7, #64]	; 0x40
 800c180:	e01e      	b.n	800c1c0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c190:	4413      	add	r3, r2
 800c192:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	3304      	adds	r3, #4
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d006      	beq.n	800c1ac <find_volume+0x114>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fd72 	bl	800ac8c <ld_dword>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	e000      	b.n	800c1ae <find_volume+0x116>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	3358      	adds	r3, #88	; 0x58
 800c1b4:	443b      	add	r3, r7
 800c1b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1bc:	3301      	adds	r3, #1
 800c1be:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d9dd      	bls.n	800c182 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <find_volume+0x13e>
 800c1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	3358      	adds	r3, #88	; 0x58
 800c1dc:	443b      	add	r3, r7
 800c1de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c1e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <find_volume+0x15e>
 800c1ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1ee:	f7ff fefd 	bl	800bfec <check_fs>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	e000      	b.n	800c1f8 <find_volume+0x160>
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c200:	2b01      	cmp	r3, #1
 800c202:	d905      	bls.n	800c210 <find_volume+0x178>
 800c204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c206:	3301      	adds	r3, #1
 800c208:	643b      	str	r3, [r7, #64]	; 0x40
 800c20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d9e2      	bls.n	800c1d6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c214:	2b04      	cmp	r3, #4
 800c216:	d101      	bne.n	800c21c <find_volume+0x184>
 800c218:	2301      	movs	r3, #1
 800c21a:	e17e      	b.n	800c51a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c21c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c220:	2b01      	cmp	r3, #1
 800c222:	d901      	bls.n	800c228 <find_volume+0x190>
 800c224:	230d      	movs	r3, #13
 800c226:	e178      	b.n	800c51a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	3330      	adds	r3, #48	; 0x30
 800c22c:	330b      	adds	r3, #11
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fd14 	bl	800ac5c <ld_word>
 800c234:	4603      	mov	r3, r0
 800c236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23a:	d001      	beq.n	800c240 <find_volume+0x1a8>
 800c23c:	230d      	movs	r3, #13
 800c23e:	e16c      	b.n	800c51a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	3330      	adds	r3, #48	; 0x30
 800c244:	3316      	adds	r3, #22
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fd08 	bl	800ac5c <ld_word>
 800c24c:	4603      	mov	r3, r0
 800c24e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c252:	2b00      	cmp	r3, #0
 800c254:	d106      	bne.n	800c264 <find_volume+0x1cc>
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	3330      	adds	r3, #48	; 0x30
 800c25a:	3324      	adds	r3, #36	; 0x24
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe fd15 	bl	800ac8c <ld_dword>
 800c262:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c268:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	789b      	ldrb	r3, [r3, #2]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d005      	beq.n	800c288 <find_volume+0x1f0>
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	789b      	ldrb	r3, [r3, #2]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d001      	beq.n	800c288 <find_volume+0x1f0>
 800c284:	230d      	movs	r3, #13
 800c286:	e148      	b.n	800c51a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	789b      	ldrb	r3, [r3, #2]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	895b      	ldrh	r3, [r3, #10]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <find_volume+0x224>
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	895b      	ldrh	r3, [r3, #10]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	895b      	ldrh	r3, [r3, #10]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <find_volume+0x228>
 800c2bc:	230d      	movs	r3, #13
 800c2be:	e12c      	b.n	800c51a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	3330      	adds	r3, #48	; 0x30
 800c2c4:	3311      	adds	r3, #17
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fcc8 	bl	800ac5c <ld_word>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	891b      	ldrh	r3, [r3, #8]
 800c2d8:	f003 030f 	and.w	r3, r3, #15
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <find_volume+0x24e>
 800c2e2:	230d      	movs	r3, #13
 800c2e4:	e119      	b.n	800c51a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	3330      	adds	r3, #48	; 0x30
 800c2ea:	3313      	adds	r3, #19
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fcb5 	bl	800ac5c <ld_word>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <find_volume+0x272>
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	3330      	adds	r3, #48	; 0x30
 800c300:	3320      	adds	r3, #32
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fcc2 	bl	800ac8c <ld_dword>
 800c308:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	3330      	adds	r3, #48	; 0x30
 800c30e:	330e      	adds	r3, #14
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fca3 	bl	800ac5c <ld_word>
 800c316:	4603      	mov	r3, r0
 800c318:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c31a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <find_volume+0x28c>
 800c320:	230d      	movs	r3, #13
 800c322:	e0fa      	b.n	800c51a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c324:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c328:	4413      	add	r3, r2
 800c32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c32c:	8912      	ldrh	r2, [r2, #8]
 800c32e:	0912      	lsrs	r2, r2, #4
 800c330:	b292      	uxth	r2, r2
 800c332:	4413      	add	r3, r2
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d204      	bcs.n	800c348 <find_volume+0x2b0>
 800c33e:	230d      	movs	r3, #13
 800c340:	e0eb      	b.n	800c51a <find_volume+0x482>
 800c342:	bf00      	nop
 800c344:	200007b8 	.word	0x200007b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c350:	8952      	ldrh	r2, [r2, #10]
 800c352:	fbb3 f3f2 	udiv	r3, r3, r2
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <find_volume+0x2ca>
 800c35e:	230d      	movs	r3, #13
 800c360:	e0db      	b.n	800c51a <find_volume+0x482>
		fmt = FS_FAT32;
 800c362:	2303      	movs	r3, #3
 800c364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c36e:	4293      	cmp	r3, r2
 800c370:	d802      	bhi.n	800c378 <find_volume+0x2e0>
 800c372:	2302      	movs	r3, #2
 800c374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c37e:	4293      	cmp	r3, r2
 800c380:	d802      	bhi.n	800c388 <find_volume+0x2f0>
 800c382:	2301      	movs	r3, #1
 800c384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	1c9a      	adds	r2, r3, #2
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c394:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c396:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c39a:	441a      	add	r2, r3
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	441a      	add	r2, r3
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c3aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d11e      	bne.n	800c3f0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	3330      	adds	r3, #48	; 0x30
 800c3b6:	332a      	adds	r3, #42	; 0x2a
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe fc4f 	bl	800ac5c <ld_word>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <find_volume+0x330>
 800c3c4:	230d      	movs	r3, #13
 800c3c6:	e0a8      	b.n	800c51a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	891b      	ldrh	r3, [r3, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <find_volume+0x33c>
 800c3d0:	230d      	movs	r3, #13
 800c3d2:	e0a2      	b.n	800c51a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	3330      	adds	r3, #48	; 0x30
 800c3d8:	332c      	adds	r3, #44	; 0x2c
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fc56 	bl	800ac8c <ld_dword>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ee:	e01f      	b.n	800c430 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	891b      	ldrh	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <find_volume+0x364>
 800c3f8:	230d      	movs	r3, #13
 800c3fa:	e08e      	b.n	800c51a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	6a1a      	ldr	r2, [r3, #32]
 800c400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c402:	441a      	add	r2, r3
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d103      	bne.n	800c418 <find_volume+0x380>
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	e00a      	b.n	800c42e <find_volume+0x396>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	695a      	ldr	r2, [r3, #20]
 800c41c:	4613      	mov	r3, r2
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	4413      	add	r3, r2
 800c422:	085a      	lsrs	r2, r3, #1
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c42e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	699a      	ldr	r2, [r3, #24]
 800c434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c436:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c43a:	0a5b      	lsrs	r3, r3, #9
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d201      	bcs.n	800c444 <find_volume+0x3ac>
 800c440:	230d      	movs	r3, #13
 800c442:	e06a      	b.n	800c51a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	f04f 32ff 	mov.w	r2, #4294967295
 800c44a:	611a      	str	r2, [r3, #16]
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	691a      	ldr	r2, [r3, #16]
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	2280      	movs	r2, #128	; 0x80
 800c458:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c45a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d149      	bne.n	800c4f6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	3330      	adds	r3, #48	; 0x30
 800c466:	3330      	adds	r3, #48	; 0x30
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe fbf7 	bl	800ac5c <ld_word>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b01      	cmp	r3, #1
 800c472:	d140      	bne.n	800c4f6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c476:	3301      	adds	r3, #1
 800c478:	4619      	mov	r1, r3
 800c47a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c47c:	f7fe fe9e 	bl	800b1bc <move_window>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d137      	bne.n	800c4f6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	2200      	movs	r2, #0
 800c48a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	3330      	adds	r3, #48	; 0x30
 800c490:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe fbe1 	bl	800ac5c <ld_word>
 800c49a:	4603      	mov	r3, r0
 800c49c:	461a      	mov	r2, r3
 800c49e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d127      	bne.n	800c4f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	3330      	adds	r3, #48	; 0x30
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe fbee 	bl	800ac8c <ld_dword>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	4a1c      	ldr	r2, [pc, #112]	; (800c524 <find_volume+0x48c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d11e      	bne.n	800c4f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	3330      	adds	r3, #48	; 0x30
 800c4bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe fbe3 	bl	800ac8c <ld_dword>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4a17      	ldr	r2, [pc, #92]	; (800c528 <find_volume+0x490>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d113      	bne.n	800c4f6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	3330      	adds	r3, #48	; 0x30
 800c4d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe fbd8 	bl	800ac8c <ld_dword>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	3330      	adds	r3, #48	; 0x30
 800c4e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fbce 	bl	800ac8c <ld_dword>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c4fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <find_volume+0x494>)
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	b29a      	uxth	r2, r3
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <find_volume+0x494>)
 800c508:	801a      	strh	r2, [r3, #0]
 800c50a:	4b08      	ldr	r3, [pc, #32]	; (800c52c <find_volume+0x494>)
 800c50c:	881a      	ldrh	r2, [r3, #0]
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c514:	f7fe fdea 	bl	800b0ec <clear_lock>
#endif
	return FR_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3758      	adds	r7, #88	; 0x58
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	41615252 	.word	0x41615252
 800c528:	61417272 	.word	0x61417272
 800c52c:	200007bc 	.word	0x200007bc

0800c530 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c53a:	2309      	movs	r3, #9
 800c53c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01c      	beq.n	800c57e <validate+0x4e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d018      	beq.n	800c57e <validate+0x4e>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d013      	beq.n	800c57e <validate+0x4e>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	889a      	ldrh	r2, [r3, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	88db      	ldrh	r3, [r3, #6]
 800c560:	429a      	cmp	r2, r3
 800c562:	d10c      	bne.n	800c57e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	785b      	ldrb	r3, [r3, #1]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fad8 	bl	800ab20 <disk_status>
 800c570:	4603      	mov	r3, r0
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <validate+0x4e>
			res = FR_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d102      	bne.n	800c58a <validate+0x5a>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	e000      	b.n	800c58c <validate+0x5c>
 800c58a:	2300      	movs	r3, #0
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	6013      	str	r3, [r2, #0]
	return res;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5ae:	f107 0310 	add.w	r3, r7, #16
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff fcd5 	bl	800bf62 <get_ldnumber>
 800c5b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	da01      	bge.n	800c5c4 <f_mount+0x28>
 800c5c0:	230b      	movs	r3, #11
 800c5c2:	e02b      	b.n	800c61c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c5c4:	4a17      	ldr	r2, [pc, #92]	; (800c624 <f_mount+0x88>)
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c5d4:	69b8      	ldr	r0, [r7, #24]
 800c5d6:	f7fe fd89 	bl	800b0ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	490d      	ldr	r1, [pc, #52]	; (800c624 <f_mount+0x88>)
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <f_mount+0x66>
 800c5fc:	79fb      	ldrb	r3, [r7, #7]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d001      	beq.n	800c606 <f_mount+0x6a>
 800c602:	2300      	movs	r3, #0
 800c604:	e00a      	b.n	800c61c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c606:	f107 010c 	add.w	r1, r7, #12
 800c60a:	f107 0308 	add.w	r3, r7, #8
 800c60e:	2200      	movs	r2, #0
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fd41 	bl	800c098 <find_volume>
 800c616:	4603      	mov	r3, r0
 800c618:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	200007b8 	.word	0x200007b8

0800c628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b098      	sub	sp, #96	; 0x60
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	4613      	mov	r3, r2
 800c634:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <f_open+0x18>
 800c63c:	2309      	movs	r3, #9
 800c63e:	e1ad      	b.n	800c99c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c646:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	f107 0110 	add.w	r1, r7, #16
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff fd20 	bl	800c098 <find_volume>
 800c658:	4603      	mov	r3, r0
 800c65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 8191 	bne.w	800c98a <f_open+0x362>
		dj.obj.fs = fs;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	f107 0314 	add.w	r3, r7, #20
 800c672:	4611      	mov	r1, r2
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff fc03 	bl	800be80 <follow_path>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c684:	2b00      	cmp	r3, #0
 800c686:	d11a      	bne.n	800c6be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c688:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c68c:	b25b      	sxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da03      	bge.n	800c69a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c692:	2306      	movs	r3, #6
 800c694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c698:	e011      	b.n	800c6be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	f023 0301 	bic.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bf14      	ite	ne
 800c6a4:	2301      	movne	r3, #1
 800c6a6:	2300      	moveq	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f107 0314 	add.w	r3, r7, #20
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fbd2 	bl	800ae5c <chk_lock>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	f003 031c 	and.w	r3, r3, #28
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d07f      	beq.n	800c7c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d017      	beq.n	800c700 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6d4:	2b04      	cmp	r3, #4
 800c6d6:	d10e      	bne.n	800c6f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c6d8:	f7fe fc1c 	bl	800af14 <enq_lock>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d006      	beq.n	800c6f0 <f_open+0xc8>
 800c6e2:	f107 0314 	add.w	r3, r7, #20
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fb03 	bl	800bcf2 <dir_register>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	e000      	b.n	800c6f2 <f_open+0xca>
 800c6f0:	2312      	movs	r3, #18
 800c6f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c6f6:	79fb      	ldrb	r3, [r7, #7]
 800c6f8:	f043 0308 	orr.w	r3, r3, #8
 800c6fc:	71fb      	strb	r3, [r7, #7]
 800c6fe:	e010      	b.n	800c722 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c700:	7ebb      	ldrb	r3, [r7, #26]
 800c702:	f003 0311 	and.w	r3, r3, #17
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <f_open+0xea>
					res = FR_DENIED;
 800c70a:	2307      	movs	r3, #7
 800c70c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c710:	e007      	b.n	800c722 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c712:	79fb      	ldrb	r3, [r7, #7]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <f_open+0xfa>
 800c71c:	2308      	movs	r3, #8
 800c71e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c726:	2b00      	cmp	r3, #0
 800c728:	d168      	bne.n	800c7fc <f_open+0x1d4>
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	f003 0308 	and.w	r3, r3, #8
 800c730:	2b00      	cmp	r3, #0
 800c732:	d063      	beq.n	800c7fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800c734:	f7fd fcba 	bl	800a0ac <get_fattime>
 800c738:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	330e      	adds	r3, #14
 800c73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe fae1 	bl	800ad08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	3316      	adds	r3, #22
 800c74a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe fadb 	bl	800ad08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c754:	330b      	adds	r3, #11
 800c756:	2220      	movs	r2, #32
 800c758:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c75e:	4611      	mov	r1, r2
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff fa32 	bl	800bbca <ld_clust>
 800c766:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c76c:	2200      	movs	r2, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff fa4a 	bl	800bc08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	331c      	adds	r3, #28
 800c778:	2100      	movs	r1, #0
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fe fac4 	bl	800ad08 <st_dword>
					fs->wflag = 1;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	2201      	movs	r2, #1
 800c784:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d037      	beq.n	800c7fc <f_open+0x1d4>
						dw = fs->winsect;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c792:	f107 0314 	add.w	r3, r7, #20
 800c796:	2200      	movs	r2, #0
 800c798:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe ff5d 	bl	800b65a <remove_chain>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d126      	bne.n	800c7fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fd02 	bl	800b1bc <move_window>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7c2:	3a01      	subs	r2, #1
 800c7c4:	60da      	str	r2, [r3, #12]
 800c7c6:	e019      	b.n	800c7fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d115      	bne.n	800c7fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c7d0:	7ebb      	ldrb	r3, [r7, #26]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c7da:	2304      	movs	r3, #4
 800c7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7e0:	e00c      	b.n	800c7fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c7e2:	79fb      	ldrb	r3, [r7, #7]
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d007      	beq.n	800c7fc <f_open+0x1d4>
 800c7ec:	7ebb      	ldrb	r3, [r7, #26]
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <f_open+0x1d4>
						res = FR_DENIED;
 800c7f6:	2307      	movs	r3, #7
 800c7f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c7fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c800:	2b00      	cmp	r3, #0
 800c802:	d128      	bne.n	800c856 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	f003 0308 	and.w	r3, r3, #8
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c80e:	79fb      	ldrb	r3, [r7, #7]
 800c810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c814:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	f023 0301 	bic.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	bf14      	ite	ne
 800c82e:	2301      	movne	r3, #1
 800c830:	2300      	moveq	r3, #0
 800c832:	b2db      	uxtb	r3, r3
 800c834:	461a      	mov	r2, r3
 800c836:	f107 0314 	add.w	r3, r7, #20
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fb8b 	bl	800af58 <inc_lock>
 800c842:	4602      	mov	r2, r0
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d102      	bne.n	800c856 <f_open+0x22e>
 800c850:	2302      	movs	r3, #2
 800c852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f040 8095 	bne.w	800c98a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f7ff f9af 	bl	800bbca <ld_clust>
 800c86c:	4602      	mov	r2, r0
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c874:	331c      	adds	r3, #28
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fa08 	bl	800ac8c <ld_dword>
 800c87c:	4602      	mov	r2, r0
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	88da      	ldrh	r2, [r3, #6]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	79fa      	ldrb	r2, [r7, #7]
 800c89a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3330      	adds	r3, #48	; 0x30
 800c8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fa72 	bl	800ada2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	f003 0320 	and.w	r3, r3, #32
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d060      	beq.n	800c98a <f_open+0x362>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d05c      	beq.n	800c98a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	895b      	ldrh	r3, [r3, #10]
 800c8dc:	025b      	lsls	r3, r3, #9
 800c8de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	657b      	str	r3, [r7, #84]	; 0x54
 800c8ec:	e016      	b.n	800c91c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fd1d 	bl	800b332 <get_fat>
 800c8f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d802      	bhi.n	800c906 <f_open+0x2de>
 800c900:	2302      	movs	r3, #2
 800c902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90c:	d102      	bne.n	800c914 <f_open+0x2ec>
 800c90e:	2301      	movs	r3, #1
 800c910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	657b      	str	r3, [r7, #84]	; 0x54
 800c91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <f_open+0x304>
 800c924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c928:	429a      	cmp	r2, r3
 800c92a:	d8e0      	bhi.n	800c8ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c930:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c936:	2b00      	cmp	r3, #0
 800c938:	d127      	bne.n	800c98a <f_open+0x362>
 800c93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	2b00      	cmp	r3, #0
 800c942:	d022      	beq.n	800c98a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe fcd3 	bl	800b2f4 <clust2sect>
 800c94e:	6478      	str	r0, [r7, #68]	; 0x44
 800c950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <f_open+0x336>
						res = FR_INT_ERR;
 800c956:	2302      	movs	r3, #2
 800c958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c95c:	e015      	b.n	800c98a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c960:	0a5a      	lsrs	r2, r3, #9
 800c962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	7858      	ldrb	r0, [r3, #1]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	2301      	movs	r3, #1
 800c97a:	f7fe f911 	bl	800aba0 <disk_read>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <f_open+0x362>
 800c984:	2301      	movs	r3, #1
 800c986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <f_open+0x370>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3760      	adds	r7, #96	; 0x60
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08c      	sub	sp, #48	; 0x30
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f107 0210 	add.w	r2, r7, #16
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fdb3 	bl	800c530 <validate>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d107      	bne.n	800c9e8 <f_write+0x44>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	7d5b      	ldrb	r3, [r3, #21]
 800c9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <f_write+0x4a>
 800c9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ec:	e14b      	b.n	800cc86 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	7d1b      	ldrb	r3, [r3, #20]
 800c9f2:	f003 0302 	and.w	r3, r3, #2
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <f_write+0x5a>
 800c9fa:	2307      	movs	r3, #7
 800c9fc:	e143      	b.n	800cc86 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	699a      	ldr	r2, [r3, #24]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	441a      	add	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	f080 812d 	bcs.w	800cc6a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	43db      	mvns	r3, r3
 800ca16:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ca18:	e127      	b.n	800cc6a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f040 80e3 	bne.w	800cbee <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	0a5b      	lsrs	r3, r3, #9
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	8952      	ldrh	r2, [r2, #10]
 800ca32:	3a01      	subs	r2, #1
 800ca34:	4013      	ands	r3, r2
 800ca36:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d143      	bne.n	800cac6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10c      	bne.n	800ca60 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d11a      	bne.n	800ca88 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2100      	movs	r1, #0
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fe fe64 	bl	800b724 <create_chain>
 800ca5c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca5e:	e013      	b.n	800ca88 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d007      	beq.n	800ca78 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7fe fef0 	bl	800b854 <clmt_clust>
 800ca74:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca76:	e007      	b.n	800ca88 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4610      	mov	r0, r2
 800ca82:	f7fe fe4f 	bl	800b724 <create_chain>
 800ca86:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 80f2 	beq.w	800cc74 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d104      	bne.n	800caa0 <f_write+0xfc>
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	755a      	strb	r2, [r3, #21]
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e0f2      	b.n	800cc86 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800caa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d104      	bne.n	800cab2 <f_write+0x10e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2201      	movs	r2, #1
 800caac:	755a      	strb	r2, [r3, #21]
 800caae:	2301      	movs	r3, #1
 800cab0:	e0e9      	b.n	800cc86 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <f_write+0x122>
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	7d1b      	ldrb	r3, [r3, #20]
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	da18      	bge.n	800cb02 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	7858      	ldrb	r0, [r3, #1]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6a1a      	ldr	r2, [r3, #32]
 800cade:	2301      	movs	r3, #1
 800cae0:	f7fe f87e 	bl	800abe0 <disk_write>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d004      	beq.n	800caf4 <f_write+0x150>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	755a      	strb	r2, [r3, #21]
 800caf0:	2301      	movs	r3, #1
 800caf2:	e0c8      	b.n	800cc86 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	7d1b      	ldrb	r3, [r3, #20]
 800caf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fbf2 	bl	800b2f4 <clust2sect>
 800cb10:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d104      	bne.n	800cb22 <f_write+0x17e>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	755a      	strb	r2, [r3, #21]
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e0b1      	b.n	800cc86 <f_write+0x2e2>
			sect += csect;
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	4413      	add	r3, r2
 800cb28:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	0a5b      	lsrs	r3, r3, #9
 800cb2e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d03c      	beq.n	800cbb0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	8952      	ldrh	r2, [r2, #10]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d905      	bls.n	800cb50 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	895b      	ldrh	r3, [r3, #10]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	7858      	ldrb	r0, [r3, #1]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	69f9      	ldr	r1, [r7, #28]
 800cb5a:	f7fe f841 	bl	800abe0 <disk_write>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d004      	beq.n	800cb6e <f_write+0x1ca>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2201      	movs	r2, #1
 800cb68:	755a      	strb	r2, [r3, #21]
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e08b      	b.n	800cc86 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6a1a      	ldr	r2, [r3, #32]
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	6a3a      	ldr	r2, [r7, #32]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d915      	bls.n	800cba8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6a1a      	ldr	r2, [r3, #32]
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	025b      	lsls	r3, r3, #9
 800cb8c:	69fa      	ldr	r2, [r7, #28]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb94:	4619      	mov	r1, r3
 800cb96:	f7fe f8e3 	bl	800ad60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	7d1b      	ldrb	r3, [r3, #20]
 800cb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	025b      	lsls	r3, r3, #9
 800cbac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cbae:	e03f      	b.n	800cc30 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d016      	beq.n	800cbe8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d210      	bcs.n	800cbe8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	7858      	ldrb	r0, [r3, #1]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	f7fd ffe4 	bl	800aba0 <disk_read>
 800cbd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	755a      	strb	r2, [r3, #21]
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e04e      	b.n	800cc86 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cbfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d901      	bls.n	800cc08 <f_write+0x264>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc16:	4413      	add	r3, r2
 800cc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1a:	69f9      	ldr	r1, [r7, #28]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe f89f 	bl	800ad60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	7d1b      	ldrb	r3, [r3, #20]
 800cc26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	4413      	add	r3, r2
 800cc36:	61fb      	str	r3, [r7, #28]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	441a      	add	r2, r3
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	619a      	str	r2, [r3, #24]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	bf38      	it	cc
 800cc50:	461a      	movcc	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	60da      	str	r2, [r3, #12]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	441a      	add	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f47f aed4 	bne.w	800ca1a <f_write+0x76>
 800cc72:	e000      	b.n	800cc76 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	7d1b      	ldrb	r3, [r3, #20]
 800cc7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3730      	adds	r7, #48	; 0x30
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b086      	sub	sp, #24
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f107 0208 	add.w	r2, r7, #8
 800cc9c:	4611      	mov	r1, r2
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff fc46 	bl	800c530 <validate>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d168      	bne.n	800cd80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7d1b      	ldrb	r3, [r3, #20]
 800ccb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d062      	beq.n	800cd80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7d1b      	ldrb	r3, [r3, #20]
 800ccbe:	b25b      	sxtb	r3, r3
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da15      	bge.n	800ccf0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	7858      	ldrb	r0, [r3, #1]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a1a      	ldr	r2, [r3, #32]
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f7fd ff84 	bl	800abe0 <disk_write>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <f_sync+0x54>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e04f      	b.n	800cd82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	7d1b      	ldrb	r3, [r3, #20]
 800cce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ccf0:	f7fd f9dc 	bl	800a0ac <get_fattime>
 800ccf4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fe fa5c 	bl	800b1bc <move_window>
 800cd04:	4603      	mov	r3, r0
 800cd06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d138      	bne.n	800cd80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	330b      	adds	r3, #11
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	330b      	adds	r3, #11
 800cd1e:	f042 0220 	orr.w	r2, r2, #32
 800cd22:	b2d2      	uxtb	r2, r2
 800cd24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6818      	ldr	r0, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	68f9      	ldr	r1, [r7, #12]
 800cd32:	f7fe ff69 	bl	800bc08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f103 021c 	add.w	r2, r3, #28
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	4619      	mov	r1, r3
 800cd42:	4610      	mov	r0, r2
 800cd44:	f7fd ffe0 	bl	800ad08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3316      	adds	r3, #22
 800cd4c:	6939      	ldr	r1, [r7, #16]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fd ffda 	bl	800ad08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3312      	adds	r3, #18
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fd ffb9 	bl	800acd2 <st_word>
					fs->wflag = 1;
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2201      	movs	r2, #1
 800cd64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fa55 	bl	800b218 <sync_fs>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7d1b      	ldrb	r3, [r3, #20]
 800cd76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff ff7b 	bl	800cc8e <f_sync>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd9c:	7bfb      	ldrb	r3, [r7, #15]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d118      	bne.n	800cdd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f107 0208 	add.w	r2, r7, #8
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fbc0 	bl	800c530 <validate>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10c      	bne.n	800cdd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe f958 	bl	800b074 <dec_lock>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d102      	bne.n	800cdd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	4613      	mov	r3, r2
 800cdec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cdf6:	4b1f      	ldr	r3, [pc, #124]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800cdf8:	7a5b      	ldrb	r3, [r3, #9]
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d131      	bne.n	800ce64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce00:	4b1c      	ldr	r3, [pc, #112]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce02:	7a5b      	ldrb	r3, [r3, #9]
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	461a      	mov	r2, r3
 800ce08:	4b1a      	ldr	r3, [pc, #104]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce0e:	4b19      	ldr	r3, [pc, #100]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce10:	7a5b      	ldrb	r3, [r3, #9]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	4a17      	ldr	r2, [pc, #92]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce1e:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce20:	7a5b      	ldrb	r3, [r3, #9]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce28:	4413      	add	r3, r2
 800ce2a:	79fa      	ldrb	r2, [r7, #7]
 800ce2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce2e:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce30:	7a5b      	ldrb	r3, [r3, #9]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	b2d1      	uxtb	r1, r2
 800ce38:	4a0e      	ldr	r2, [pc, #56]	; (800ce74 <FATFS_LinkDriverEx+0x94>)
 800ce3a:	7251      	strb	r1, [r2, #9]
 800ce3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce3e:	7dbb      	ldrb	r3, [r7, #22]
 800ce40:	3330      	adds	r3, #48	; 0x30
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	223a      	movs	r2, #58	; 0x3a
 800ce4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	3302      	adds	r3, #2
 800ce54:	222f      	movs	r2, #47	; 0x2f
 800ce56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	3303      	adds	r3, #3
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	371c      	adds	r7, #28
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	200007e0 	.word	0x200007e0

0800ce78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce82:	2200      	movs	r2, #0
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff ffaa 	bl	800cde0 <FATFS_LinkDriverEx>
 800ce8c:	4603      	mov	r3, r0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <atan>:
 800ce98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	ec55 4b10 	vmov	r4, r5, d0
 800cea0:	4bc3      	ldr	r3, [pc, #780]	; (800d1b0 <atan+0x318>)
 800cea2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cea6:	429e      	cmp	r6, r3
 800cea8:	46ab      	mov	fp, r5
 800ceaa:	dd18      	ble.n	800cede <atan+0x46>
 800ceac:	4bc1      	ldr	r3, [pc, #772]	; (800d1b4 <atan+0x31c>)
 800ceae:	429e      	cmp	r6, r3
 800ceb0:	dc01      	bgt.n	800ceb6 <atan+0x1e>
 800ceb2:	d109      	bne.n	800cec8 <atan+0x30>
 800ceb4:	b144      	cbz	r4, 800cec8 <atan+0x30>
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	462b      	mov	r3, r5
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7f3 f9e5 	bl	800028c <__adddf3>
 800cec2:	4604      	mov	r4, r0
 800cec4:	460d      	mov	r5, r1
 800cec6:	e006      	b.n	800ced6 <atan+0x3e>
 800cec8:	f1bb 0f00 	cmp.w	fp, #0
 800cecc:	f300 8131 	bgt.w	800d132 <atan+0x29a>
 800ced0:	a59b      	add	r5, pc, #620	; (adr r5, 800d140 <atan+0x2a8>)
 800ced2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ced6:	ec45 4b10 	vmov	d0, r4, r5
 800ceda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cede:	4bb6      	ldr	r3, [pc, #728]	; (800d1b8 <atan+0x320>)
 800cee0:	429e      	cmp	r6, r3
 800cee2:	dc14      	bgt.n	800cf0e <atan+0x76>
 800cee4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cee8:	429e      	cmp	r6, r3
 800ceea:	dc0d      	bgt.n	800cf08 <atan+0x70>
 800ceec:	a396      	add	r3, pc, #600	; (adr r3, 800d148 <atan+0x2b0>)
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	ee10 0a10 	vmov	r0, s0
 800cef6:	4629      	mov	r1, r5
 800cef8:	f7f3 f9c8 	bl	800028c <__adddf3>
 800cefc:	4baf      	ldr	r3, [pc, #700]	; (800d1bc <atan+0x324>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	f7f3 fe0a 	bl	8000b18 <__aeabi_dcmpgt>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1e6      	bne.n	800ced6 <atan+0x3e>
 800cf08:	f04f 3aff 	mov.w	sl, #4294967295
 800cf0c:	e02b      	b.n	800cf66 <atan+0xce>
 800cf0e:	f000 f963 	bl	800d1d8 <fabs>
 800cf12:	4bab      	ldr	r3, [pc, #684]	; (800d1c0 <atan+0x328>)
 800cf14:	429e      	cmp	r6, r3
 800cf16:	ec55 4b10 	vmov	r4, r5, d0
 800cf1a:	f300 80bf 	bgt.w	800d09c <atan+0x204>
 800cf1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cf22:	429e      	cmp	r6, r3
 800cf24:	f300 80a0 	bgt.w	800d068 <atan+0x1d0>
 800cf28:	ee10 2a10 	vmov	r2, s0
 800cf2c:	ee10 0a10 	vmov	r0, s0
 800cf30:	462b      	mov	r3, r5
 800cf32:	4629      	mov	r1, r5
 800cf34:	f7f3 f9aa 	bl	800028c <__adddf3>
 800cf38:	4ba0      	ldr	r3, [pc, #640]	; (800d1bc <atan+0x324>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f7f3 f9a4 	bl	8000288 <__aeabi_dsub>
 800cf40:	2200      	movs	r2, #0
 800cf42:	4606      	mov	r6, r0
 800cf44:	460f      	mov	r7, r1
 800cf46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7f3 f99d 	bl	800028c <__adddf3>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4630      	mov	r0, r6
 800cf58:	4639      	mov	r1, r7
 800cf5a:	f7f3 fc77 	bl	800084c <__aeabi_ddiv>
 800cf5e:	f04f 0a00 	mov.w	sl, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	460d      	mov	r5, r1
 800cf66:	4622      	mov	r2, r4
 800cf68:	462b      	mov	r3, r5
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 fb43 	bl	80005f8 <__aeabi_dmul>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4680      	mov	r8, r0
 800cf78:	4689      	mov	r9, r1
 800cf7a:	f7f3 fb3d 	bl	80005f8 <__aeabi_dmul>
 800cf7e:	a374      	add	r3, pc, #464	; (adr r3, 800d150 <atan+0x2b8>)
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	f7f3 fb36 	bl	80005f8 <__aeabi_dmul>
 800cf8c:	a372      	add	r3, pc, #456	; (adr r3, 800d158 <atan+0x2c0>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f97b 	bl	800028c <__adddf3>
 800cf96:	4632      	mov	r2, r6
 800cf98:	463b      	mov	r3, r7
 800cf9a:	f7f3 fb2d 	bl	80005f8 <__aeabi_dmul>
 800cf9e:	a370      	add	r3, pc, #448	; (adr r3, 800d160 <atan+0x2c8>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 f972 	bl	800028c <__adddf3>
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	463b      	mov	r3, r7
 800cfac:	f7f3 fb24 	bl	80005f8 <__aeabi_dmul>
 800cfb0:	a36d      	add	r3, pc, #436	; (adr r3, 800d168 <atan+0x2d0>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 f969 	bl	800028c <__adddf3>
 800cfba:	4632      	mov	r2, r6
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	f7f3 fb1b 	bl	80005f8 <__aeabi_dmul>
 800cfc2:	a36b      	add	r3, pc, #428	; (adr r3, 800d170 <atan+0x2d8>)
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	f7f3 f960 	bl	800028c <__adddf3>
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	a368      	add	r3, pc, #416	; (adr r3, 800d178 <atan+0x2e0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f957 	bl	800028c <__adddf3>
 800cfde:	4642      	mov	r2, r8
 800cfe0:	464b      	mov	r3, r9
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	a366      	add	r3, pc, #408	; (adr r3, 800d180 <atan+0x2e8>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	4680      	mov	r8, r0
 800cfee:	4689      	mov	r9, r1
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 fb00 	bl	80005f8 <__aeabi_dmul>
 800cff8:	a363      	add	r3, pc, #396	; (adr r3, 800d188 <atan+0x2f0>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f7f3 f943 	bl	8000288 <__aeabi_dsub>
 800d002:	4632      	mov	r2, r6
 800d004:	463b      	mov	r3, r7
 800d006:	f7f3 faf7 	bl	80005f8 <__aeabi_dmul>
 800d00a:	a361      	add	r3, pc, #388	; (adr r3, 800d190 <atan+0x2f8>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f7f3 f93a 	bl	8000288 <__aeabi_dsub>
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	f7f3 faee 	bl	80005f8 <__aeabi_dmul>
 800d01c:	a35e      	add	r3, pc, #376	; (adr r3, 800d198 <atan+0x300>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 f931 	bl	8000288 <__aeabi_dsub>
 800d026:	4632      	mov	r2, r6
 800d028:	463b      	mov	r3, r7
 800d02a:	f7f3 fae5 	bl	80005f8 <__aeabi_dmul>
 800d02e:	a35c      	add	r3, pc, #368	; (adr r3, 800d1a0 <atan+0x308>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 f928 	bl	8000288 <__aeabi_dsub>
 800d038:	4632      	mov	r2, r6
 800d03a:	463b      	mov	r3, r7
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	4640      	mov	r0, r8
 800d046:	4649      	mov	r1, r9
 800d048:	f7f3 f920 	bl	800028c <__adddf3>
 800d04c:	4622      	mov	r2, r4
 800d04e:	462b      	mov	r3, r5
 800d050:	f7f3 fad2 	bl	80005f8 <__aeabi_dmul>
 800d054:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	d14b      	bne.n	800d0f6 <atan+0x25e>
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	f7f3 f911 	bl	8000288 <__aeabi_dsub>
 800d066:	e72c      	b.n	800cec2 <atan+0x2a>
 800d068:	ee10 0a10 	vmov	r0, s0
 800d06c:	4b53      	ldr	r3, [pc, #332]	; (800d1bc <atan+0x324>)
 800d06e:	2200      	movs	r2, #0
 800d070:	4629      	mov	r1, r5
 800d072:	f7f3 f909 	bl	8000288 <__aeabi_dsub>
 800d076:	4b51      	ldr	r3, [pc, #324]	; (800d1bc <atan+0x324>)
 800d078:	4606      	mov	r6, r0
 800d07a:	460f      	mov	r7, r1
 800d07c:	2200      	movs	r2, #0
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 f903 	bl	800028c <__adddf3>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4630      	mov	r0, r6
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 fbdd 	bl	800084c <__aeabi_ddiv>
 800d092:	f04f 0a01 	mov.w	sl, #1
 800d096:	4604      	mov	r4, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	e764      	b.n	800cf66 <atan+0xce>
 800d09c:	4b49      	ldr	r3, [pc, #292]	; (800d1c4 <atan+0x32c>)
 800d09e:	429e      	cmp	r6, r3
 800d0a0:	da1d      	bge.n	800d0de <atan+0x246>
 800d0a2:	ee10 0a10 	vmov	r0, s0
 800d0a6:	4b48      	ldr	r3, [pc, #288]	; (800d1c8 <atan+0x330>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	f7f3 f8ec 	bl	8000288 <__aeabi_dsub>
 800d0b0:	4b45      	ldr	r3, [pc, #276]	; (800d1c8 <atan+0x330>)
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	460f      	mov	r7, r1
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f7f3 fa9c 	bl	80005f8 <__aeabi_dmul>
 800d0c0:	4b3e      	ldr	r3, [pc, #248]	; (800d1bc <atan+0x324>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f7f3 f8e2 	bl	800028c <__adddf3>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	4639      	mov	r1, r7
 800d0d0:	f7f3 fbbc 	bl	800084c <__aeabi_ddiv>
 800d0d4:	f04f 0a02 	mov.w	sl, #2
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	e743      	b.n	800cf66 <atan+0xce>
 800d0de:	462b      	mov	r3, r5
 800d0e0:	ee10 2a10 	vmov	r2, s0
 800d0e4:	4939      	ldr	r1, [pc, #228]	; (800d1cc <atan+0x334>)
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f7f3 fbb0 	bl	800084c <__aeabi_ddiv>
 800d0ec:	f04f 0a03 	mov.w	sl, #3
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	460d      	mov	r5, r1
 800d0f4:	e737      	b.n	800cf66 <atan+0xce>
 800d0f6:	4b36      	ldr	r3, [pc, #216]	; (800d1d0 <atan+0x338>)
 800d0f8:	4e36      	ldr	r6, [pc, #216]	; (800d1d4 <atan+0x33c>)
 800d0fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d0fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d102:	e9da 2300 	ldrd	r2, r3, [sl]
 800d106:	f7f3 f8bf 	bl	8000288 <__aeabi_dsub>
 800d10a:	4622      	mov	r2, r4
 800d10c:	462b      	mov	r3, r5
 800d10e:	f7f3 f8bb 	bl	8000288 <__aeabi_dsub>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	f1bb 0f00 	cmp.w	fp, #0
 800d122:	4604      	mov	r4, r0
 800d124:	460d      	mov	r5, r1
 800d126:	f6bf aed6 	bge.w	800ced6 <atan+0x3e>
 800d12a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d12e:	461d      	mov	r5, r3
 800d130:	e6d1      	b.n	800ced6 <atan+0x3e>
 800d132:	a51d      	add	r5, pc, #116	; (adr r5, 800d1a8 <atan+0x310>)
 800d134:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d138:	e6cd      	b.n	800ced6 <atan+0x3e>
 800d13a:	bf00      	nop
 800d13c:	f3af 8000 	nop.w
 800d140:	54442d18 	.word	0x54442d18
 800d144:	bff921fb 	.word	0xbff921fb
 800d148:	8800759c 	.word	0x8800759c
 800d14c:	7e37e43c 	.word	0x7e37e43c
 800d150:	e322da11 	.word	0xe322da11
 800d154:	3f90ad3a 	.word	0x3f90ad3a
 800d158:	24760deb 	.word	0x24760deb
 800d15c:	3fa97b4b 	.word	0x3fa97b4b
 800d160:	a0d03d51 	.word	0xa0d03d51
 800d164:	3fb10d66 	.word	0x3fb10d66
 800d168:	c54c206e 	.word	0xc54c206e
 800d16c:	3fb745cd 	.word	0x3fb745cd
 800d170:	920083ff 	.word	0x920083ff
 800d174:	3fc24924 	.word	0x3fc24924
 800d178:	5555550d 	.word	0x5555550d
 800d17c:	3fd55555 	.word	0x3fd55555
 800d180:	2c6a6c2f 	.word	0x2c6a6c2f
 800d184:	bfa2b444 	.word	0xbfa2b444
 800d188:	52defd9a 	.word	0x52defd9a
 800d18c:	3fadde2d 	.word	0x3fadde2d
 800d190:	af749a6d 	.word	0xaf749a6d
 800d194:	3fb3b0f2 	.word	0x3fb3b0f2
 800d198:	fe231671 	.word	0xfe231671
 800d19c:	3fbc71c6 	.word	0x3fbc71c6
 800d1a0:	9998ebc4 	.word	0x9998ebc4
 800d1a4:	3fc99999 	.word	0x3fc99999
 800d1a8:	54442d18 	.word	0x54442d18
 800d1ac:	3ff921fb 	.word	0x3ff921fb
 800d1b0:	440fffff 	.word	0x440fffff
 800d1b4:	7ff00000 	.word	0x7ff00000
 800d1b8:	3fdbffff 	.word	0x3fdbffff
 800d1bc:	3ff00000 	.word	0x3ff00000
 800d1c0:	3ff2ffff 	.word	0x3ff2ffff
 800d1c4:	40038000 	.word	0x40038000
 800d1c8:	3ff80000 	.word	0x3ff80000
 800d1cc:	bff00000 	.word	0xbff00000
 800d1d0:	08010d08 	.word	0x08010d08
 800d1d4:	08010ce8 	.word	0x08010ce8

0800d1d8 <fabs>:
 800d1d8:	ec51 0b10 	vmov	r0, r1, d0
 800d1dc:	ee10 2a10 	vmov	r2, s0
 800d1e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1e4:	ec43 2b10 	vmov	d0, r2, r3
 800d1e8:	4770      	bx	lr

0800d1ea <atan2>:
 800d1ea:	f000 b82d 	b.w	800d248 <__ieee754_atan2>

0800d1ee <sqrt>:
 800d1ee:	b538      	push	{r3, r4, r5, lr}
 800d1f0:	ed2d 8b02 	vpush	{d8}
 800d1f4:	ec55 4b10 	vmov	r4, r5, d0
 800d1f8:	f000 f8f0 	bl	800d3dc <__ieee754_sqrt>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	462b      	mov	r3, r5
 800d200:	4620      	mov	r0, r4
 800d202:	4629      	mov	r1, r5
 800d204:	eeb0 8a40 	vmov.f32	s16, s0
 800d208:	eef0 8a60 	vmov.f32	s17, s1
 800d20c:	f7f3 fc8e 	bl	8000b2c <__aeabi_dcmpun>
 800d210:	b990      	cbnz	r0, 800d238 <sqrt+0x4a>
 800d212:	2200      	movs	r2, #0
 800d214:	2300      	movs	r3, #0
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800d21e:	b158      	cbz	r0, 800d238 <sqrt+0x4a>
 800d220:	f000 f9b0 	bl	800d584 <__errno>
 800d224:	2321      	movs	r3, #33	; 0x21
 800d226:	6003      	str	r3, [r0, #0]
 800d228:	2200      	movs	r2, #0
 800d22a:	2300      	movs	r3, #0
 800d22c:	4610      	mov	r0, r2
 800d22e:	4619      	mov	r1, r3
 800d230:	f7f3 fb0c 	bl	800084c <__aeabi_ddiv>
 800d234:	ec41 0b18 	vmov	d8, r0, r1
 800d238:	eeb0 0a48 	vmov.f32	s0, s16
 800d23c:	eef0 0a68 	vmov.f32	s1, s17
 800d240:	ecbd 8b02 	vpop	{d8}
 800d244:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d248 <__ieee754_atan2>:
 800d248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d24c:	ec57 6b11 	vmov	r6, r7, d1
 800d250:	4273      	negs	r3, r6
 800d252:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d3d8 <__ieee754_atan2+0x190>
 800d256:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d25a:	4333      	orrs	r3, r6
 800d25c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d260:	4573      	cmp	r3, lr
 800d262:	ec51 0b10 	vmov	r0, r1, d0
 800d266:	ee11 8a10 	vmov	r8, s2
 800d26a:	d80a      	bhi.n	800d282 <__ieee754_atan2+0x3a>
 800d26c:	4244      	negs	r4, r0
 800d26e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d272:	4304      	orrs	r4, r0
 800d274:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d278:	4574      	cmp	r4, lr
 800d27a:	ee10 9a10 	vmov	r9, s0
 800d27e:	468c      	mov	ip, r1
 800d280:	d907      	bls.n	800d292 <__ieee754_atan2+0x4a>
 800d282:	4632      	mov	r2, r6
 800d284:	463b      	mov	r3, r7
 800d286:	f7f3 f801 	bl	800028c <__adddf3>
 800d28a:	ec41 0b10 	vmov	d0, r0, r1
 800d28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d292:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d296:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d29a:	4334      	orrs	r4, r6
 800d29c:	d103      	bne.n	800d2a6 <__ieee754_atan2+0x5e>
 800d29e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a2:	f7ff bdf9 	b.w	800ce98 <atan>
 800d2a6:	17bc      	asrs	r4, r7, #30
 800d2a8:	f004 0402 	and.w	r4, r4, #2
 800d2ac:	ea53 0909 	orrs.w	r9, r3, r9
 800d2b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d2b4:	d107      	bne.n	800d2c6 <__ieee754_atan2+0x7e>
 800d2b6:	2c02      	cmp	r4, #2
 800d2b8:	d060      	beq.n	800d37c <__ieee754_atan2+0x134>
 800d2ba:	2c03      	cmp	r4, #3
 800d2bc:	d1e5      	bne.n	800d28a <__ieee754_atan2+0x42>
 800d2be:	a142      	add	r1, pc, #264	; (adr r1, 800d3c8 <__ieee754_atan2+0x180>)
 800d2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c4:	e7e1      	b.n	800d28a <__ieee754_atan2+0x42>
 800d2c6:	ea52 0808 	orrs.w	r8, r2, r8
 800d2ca:	d106      	bne.n	800d2da <__ieee754_atan2+0x92>
 800d2cc:	f1bc 0f00 	cmp.w	ip, #0
 800d2d0:	da5f      	bge.n	800d392 <__ieee754_atan2+0x14a>
 800d2d2:	a13f      	add	r1, pc, #252	; (adr r1, 800d3d0 <__ieee754_atan2+0x188>)
 800d2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2d8:	e7d7      	b.n	800d28a <__ieee754_atan2+0x42>
 800d2da:	4572      	cmp	r2, lr
 800d2dc:	d10f      	bne.n	800d2fe <__ieee754_atan2+0xb6>
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2e4:	d107      	bne.n	800d2f6 <__ieee754_atan2+0xae>
 800d2e6:	2c02      	cmp	r4, #2
 800d2e8:	d84c      	bhi.n	800d384 <__ieee754_atan2+0x13c>
 800d2ea:	4b35      	ldr	r3, [pc, #212]	; (800d3c0 <__ieee754_atan2+0x178>)
 800d2ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d2f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d2f4:	e7c9      	b.n	800d28a <__ieee754_atan2+0x42>
 800d2f6:	2c02      	cmp	r4, #2
 800d2f8:	d848      	bhi.n	800d38c <__ieee754_atan2+0x144>
 800d2fa:	4b32      	ldr	r3, [pc, #200]	; (800d3c4 <__ieee754_atan2+0x17c>)
 800d2fc:	e7f6      	b.n	800d2ec <__ieee754_atan2+0xa4>
 800d2fe:	4573      	cmp	r3, lr
 800d300:	d0e4      	beq.n	800d2cc <__ieee754_atan2+0x84>
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d308:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d30c:	da1e      	bge.n	800d34c <__ieee754_atan2+0x104>
 800d30e:	2f00      	cmp	r7, #0
 800d310:	da01      	bge.n	800d316 <__ieee754_atan2+0xce>
 800d312:	323c      	adds	r2, #60	; 0x3c
 800d314:	db1e      	blt.n	800d354 <__ieee754_atan2+0x10c>
 800d316:	4632      	mov	r2, r6
 800d318:	463b      	mov	r3, r7
 800d31a:	f7f3 fa97 	bl	800084c <__aeabi_ddiv>
 800d31e:	ec41 0b10 	vmov	d0, r0, r1
 800d322:	f7ff ff59 	bl	800d1d8 <fabs>
 800d326:	f7ff fdb7 	bl	800ce98 <atan>
 800d32a:	ec51 0b10 	vmov	r0, r1, d0
 800d32e:	2c01      	cmp	r4, #1
 800d330:	d013      	beq.n	800d35a <__ieee754_atan2+0x112>
 800d332:	2c02      	cmp	r4, #2
 800d334:	d015      	beq.n	800d362 <__ieee754_atan2+0x11a>
 800d336:	2c00      	cmp	r4, #0
 800d338:	d0a7      	beq.n	800d28a <__ieee754_atan2+0x42>
 800d33a:	a319      	add	r3, pc, #100	; (adr r3, 800d3a0 <__ieee754_atan2+0x158>)
 800d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d340:	f7f2 ffa2 	bl	8000288 <__aeabi_dsub>
 800d344:	a318      	add	r3, pc, #96	; (adr r3, 800d3a8 <__ieee754_atan2+0x160>)
 800d346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34a:	e014      	b.n	800d376 <__ieee754_atan2+0x12e>
 800d34c:	a118      	add	r1, pc, #96	; (adr r1, 800d3b0 <__ieee754_atan2+0x168>)
 800d34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d352:	e7ec      	b.n	800d32e <__ieee754_atan2+0xe6>
 800d354:	2000      	movs	r0, #0
 800d356:	2100      	movs	r1, #0
 800d358:	e7e9      	b.n	800d32e <__ieee754_atan2+0xe6>
 800d35a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d35e:	4619      	mov	r1, r3
 800d360:	e793      	b.n	800d28a <__ieee754_atan2+0x42>
 800d362:	a30f      	add	r3, pc, #60	; (adr r3, 800d3a0 <__ieee754_atan2+0x158>)
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	f7f2 ff8e 	bl	8000288 <__aeabi_dsub>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	a10d      	add	r1, pc, #52	; (adr r1, 800d3a8 <__ieee754_atan2+0x160>)
 800d372:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d376:	f7f2 ff87 	bl	8000288 <__aeabi_dsub>
 800d37a:	e786      	b.n	800d28a <__ieee754_atan2+0x42>
 800d37c:	a10a      	add	r1, pc, #40	; (adr r1, 800d3a8 <__ieee754_atan2+0x160>)
 800d37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d382:	e782      	b.n	800d28a <__ieee754_atan2+0x42>
 800d384:	a10c      	add	r1, pc, #48	; (adr r1, 800d3b8 <__ieee754_atan2+0x170>)
 800d386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d38a:	e77e      	b.n	800d28a <__ieee754_atan2+0x42>
 800d38c:	2000      	movs	r0, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	e77b      	b.n	800d28a <__ieee754_atan2+0x42>
 800d392:	a107      	add	r1, pc, #28	; (adr r1, 800d3b0 <__ieee754_atan2+0x168>)
 800d394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d398:	e777      	b.n	800d28a <__ieee754_atan2+0x42>
 800d39a:	bf00      	nop
 800d39c:	f3af 8000 	nop.w
 800d3a0:	33145c07 	.word	0x33145c07
 800d3a4:	3ca1a626 	.word	0x3ca1a626
 800d3a8:	54442d18 	.word	0x54442d18
 800d3ac:	400921fb 	.word	0x400921fb
 800d3b0:	54442d18 	.word	0x54442d18
 800d3b4:	3ff921fb 	.word	0x3ff921fb
 800d3b8:	54442d18 	.word	0x54442d18
 800d3bc:	3fe921fb 	.word	0x3fe921fb
 800d3c0:	08010d28 	.word	0x08010d28
 800d3c4:	08010d40 	.word	0x08010d40
 800d3c8:	54442d18 	.word	0x54442d18
 800d3cc:	c00921fb 	.word	0xc00921fb
 800d3d0:	54442d18 	.word	0x54442d18
 800d3d4:	bff921fb 	.word	0xbff921fb
 800d3d8:	7ff00000 	.word	0x7ff00000

0800d3dc <__ieee754_sqrt>:
 800d3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e0:	ec55 4b10 	vmov	r4, r5, d0
 800d3e4:	4e55      	ldr	r6, [pc, #340]	; (800d53c <__ieee754_sqrt+0x160>)
 800d3e6:	43ae      	bics	r6, r5
 800d3e8:	ee10 0a10 	vmov	r0, s0
 800d3ec:	ee10 3a10 	vmov	r3, s0
 800d3f0:	462a      	mov	r2, r5
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	d110      	bne.n	800d418 <__ieee754_sqrt+0x3c>
 800d3f6:	ee10 2a10 	vmov	r2, s0
 800d3fa:	462b      	mov	r3, r5
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	4620      	mov	r0, r4
 800d406:	4629      	mov	r1, r5
 800d408:	f7f2 ff40 	bl	800028c <__adddf3>
 800d40c:	4604      	mov	r4, r0
 800d40e:	460d      	mov	r5, r1
 800d410:	ec45 4b10 	vmov	d0, r4, r5
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d418:	2d00      	cmp	r5, #0
 800d41a:	dc10      	bgt.n	800d43e <__ieee754_sqrt+0x62>
 800d41c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d420:	4330      	orrs	r0, r6
 800d422:	d0f5      	beq.n	800d410 <__ieee754_sqrt+0x34>
 800d424:	b15d      	cbz	r5, 800d43e <__ieee754_sqrt+0x62>
 800d426:	ee10 2a10 	vmov	r2, s0
 800d42a:	462b      	mov	r3, r5
 800d42c:	ee10 0a10 	vmov	r0, s0
 800d430:	f7f2 ff2a 	bl	8000288 <__aeabi_dsub>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	f7f3 fa08 	bl	800084c <__aeabi_ddiv>
 800d43c:	e7e6      	b.n	800d40c <__ieee754_sqrt+0x30>
 800d43e:	1512      	asrs	r2, r2, #20
 800d440:	d074      	beq.n	800d52c <__ieee754_sqrt+0x150>
 800d442:	07d4      	lsls	r4, r2, #31
 800d444:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d448:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d44c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d450:	bf5e      	ittt	pl
 800d452:	0fda      	lsrpl	r2, r3, #31
 800d454:	005b      	lslpl	r3, r3, #1
 800d456:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d45a:	2400      	movs	r4, #0
 800d45c:	0fda      	lsrs	r2, r3, #31
 800d45e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d462:	107f      	asrs	r7, r7, #1
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	2516      	movs	r5, #22
 800d468:	4620      	mov	r0, r4
 800d46a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d46e:	1886      	adds	r6, r0, r2
 800d470:	428e      	cmp	r6, r1
 800d472:	bfde      	ittt	le
 800d474:	1b89      	suble	r1, r1, r6
 800d476:	18b0      	addle	r0, r6, r2
 800d478:	18a4      	addle	r4, r4, r2
 800d47a:	0049      	lsls	r1, r1, #1
 800d47c:	3d01      	subs	r5, #1
 800d47e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d482:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d486:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d48a:	d1f0      	bne.n	800d46e <__ieee754_sqrt+0x92>
 800d48c:	462a      	mov	r2, r5
 800d48e:	f04f 0e20 	mov.w	lr, #32
 800d492:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d496:	4281      	cmp	r1, r0
 800d498:	eb06 0c05 	add.w	ip, r6, r5
 800d49c:	dc02      	bgt.n	800d4a4 <__ieee754_sqrt+0xc8>
 800d49e:	d113      	bne.n	800d4c8 <__ieee754_sqrt+0xec>
 800d4a0:	459c      	cmp	ip, r3
 800d4a2:	d811      	bhi.n	800d4c8 <__ieee754_sqrt+0xec>
 800d4a4:	f1bc 0f00 	cmp.w	ip, #0
 800d4a8:	eb0c 0506 	add.w	r5, ip, r6
 800d4ac:	da43      	bge.n	800d536 <__ieee754_sqrt+0x15a>
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	db41      	blt.n	800d536 <__ieee754_sqrt+0x15a>
 800d4b2:	f100 0801 	add.w	r8, r0, #1
 800d4b6:	1a09      	subs	r1, r1, r0
 800d4b8:	459c      	cmp	ip, r3
 800d4ba:	bf88      	it	hi
 800d4bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d4c0:	eba3 030c 	sub.w	r3, r3, ip
 800d4c4:	4432      	add	r2, r6
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d4cc:	f1be 0e01 	subs.w	lr, lr, #1
 800d4d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d4d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d4dc:	d1db      	bne.n	800d496 <__ieee754_sqrt+0xba>
 800d4de:	430b      	orrs	r3, r1
 800d4e0:	d006      	beq.n	800d4f0 <__ieee754_sqrt+0x114>
 800d4e2:	1c50      	adds	r0, r2, #1
 800d4e4:	bf13      	iteet	ne
 800d4e6:	3201      	addne	r2, #1
 800d4e8:	3401      	addeq	r4, #1
 800d4ea:	4672      	moveq	r2, lr
 800d4ec:	f022 0201 	bicne.w	r2, r2, #1
 800d4f0:	1063      	asrs	r3, r4, #1
 800d4f2:	0852      	lsrs	r2, r2, #1
 800d4f4:	07e1      	lsls	r1, r4, #31
 800d4f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d4fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d4fe:	bf48      	it	mi
 800d500:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d504:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d508:	4614      	mov	r4, r2
 800d50a:	e781      	b.n	800d410 <__ieee754_sqrt+0x34>
 800d50c:	0ad9      	lsrs	r1, r3, #11
 800d50e:	3815      	subs	r0, #21
 800d510:	055b      	lsls	r3, r3, #21
 800d512:	2900      	cmp	r1, #0
 800d514:	d0fa      	beq.n	800d50c <__ieee754_sqrt+0x130>
 800d516:	02cd      	lsls	r5, r1, #11
 800d518:	d50a      	bpl.n	800d530 <__ieee754_sqrt+0x154>
 800d51a:	f1c2 0420 	rsb	r4, r2, #32
 800d51e:	fa23 f404 	lsr.w	r4, r3, r4
 800d522:	1e55      	subs	r5, r2, #1
 800d524:	4093      	lsls	r3, r2
 800d526:	4321      	orrs	r1, r4
 800d528:	1b42      	subs	r2, r0, r5
 800d52a:	e78a      	b.n	800d442 <__ieee754_sqrt+0x66>
 800d52c:	4610      	mov	r0, r2
 800d52e:	e7f0      	b.n	800d512 <__ieee754_sqrt+0x136>
 800d530:	0049      	lsls	r1, r1, #1
 800d532:	3201      	adds	r2, #1
 800d534:	e7ef      	b.n	800d516 <__ieee754_sqrt+0x13a>
 800d536:	4680      	mov	r8, r0
 800d538:	e7bd      	b.n	800d4b6 <__ieee754_sqrt+0xda>
 800d53a:	bf00      	nop
 800d53c:	7ff00000 	.word	0x7ff00000

0800d540 <__assert_func>:
 800d540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d542:	4614      	mov	r4, r2
 800d544:	461a      	mov	r2, r3
 800d546:	4b09      	ldr	r3, [pc, #36]	; (800d56c <__assert_func+0x2c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4605      	mov	r5, r0
 800d54c:	68d8      	ldr	r0, [r3, #12]
 800d54e:	b14c      	cbz	r4, 800d564 <__assert_func+0x24>
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <__assert_func+0x30>)
 800d552:	9100      	str	r1, [sp, #0]
 800d554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d558:	4906      	ldr	r1, [pc, #24]	; (800d574 <__assert_func+0x34>)
 800d55a:	462b      	mov	r3, r5
 800d55c:	f000 f818 	bl	800d590 <fiprintf>
 800d560:	f001 f86e 	bl	800e640 <abort>
 800d564:	4b04      	ldr	r3, [pc, #16]	; (800d578 <__assert_func+0x38>)
 800d566:	461c      	mov	r4, r3
 800d568:	e7f3      	b.n	800d552 <__assert_func+0x12>
 800d56a:	bf00      	nop
 800d56c:	20000230 	.word	0x20000230
 800d570:	08010d58 	.word	0x08010d58
 800d574:	08010d65 	.word	0x08010d65
 800d578:	08010d93 	.word	0x08010d93

0800d57c <atoi>:
 800d57c:	220a      	movs	r2, #10
 800d57e:	2100      	movs	r1, #0
 800d580:	f000 bf5a 	b.w	800e438 <strtol>

0800d584 <__errno>:
 800d584:	4b01      	ldr	r3, [pc, #4]	; (800d58c <__errno+0x8>)
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	20000230 	.word	0x20000230

0800d590 <fiprintf>:
 800d590:	b40e      	push	{r1, r2, r3}
 800d592:	b503      	push	{r0, r1, lr}
 800d594:	4601      	mov	r1, r0
 800d596:	ab03      	add	r3, sp, #12
 800d598:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <fiprintf+0x20>)
 800d59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59e:	6800      	ldr	r0, [r0, #0]
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	f000 f86b 	bl	800d67c <_vfiprintf_r>
 800d5a6:	b002      	add	sp, #8
 800d5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5ac:	b003      	add	sp, #12
 800d5ae:	4770      	bx	lr
 800d5b0:	20000230 	.word	0x20000230

0800d5b4 <__libc_init_array>:
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	4d0d      	ldr	r5, [pc, #52]	; (800d5ec <__libc_init_array+0x38>)
 800d5b8:	4c0d      	ldr	r4, [pc, #52]	; (800d5f0 <__libc_init_array+0x3c>)
 800d5ba:	1b64      	subs	r4, r4, r5
 800d5bc:	10a4      	asrs	r4, r4, #2
 800d5be:	2600      	movs	r6, #0
 800d5c0:	42a6      	cmp	r6, r4
 800d5c2:	d109      	bne.n	800d5d8 <__libc_init_array+0x24>
 800d5c4:	4d0b      	ldr	r5, [pc, #44]	; (800d5f4 <__libc_init_array+0x40>)
 800d5c6:	4c0c      	ldr	r4, [pc, #48]	; (800d5f8 <__libc_init_array+0x44>)
 800d5c8:	f003 f83a 	bl	8010640 <_init>
 800d5cc:	1b64      	subs	r4, r4, r5
 800d5ce:	10a4      	asrs	r4, r4, #2
 800d5d0:	2600      	movs	r6, #0
 800d5d2:	42a6      	cmp	r6, r4
 800d5d4:	d105      	bne.n	800d5e2 <__libc_init_array+0x2e>
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5dc:	4798      	blx	r3
 800d5de:	3601      	adds	r6, #1
 800d5e0:	e7ee      	b.n	800d5c0 <__libc_init_array+0xc>
 800d5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5e6:	4798      	blx	r3
 800d5e8:	3601      	adds	r6, #1
 800d5ea:	e7f2      	b.n	800d5d2 <__libc_init_array+0x1e>
 800d5ec:	08011140 	.word	0x08011140
 800d5f0:	08011140 	.word	0x08011140
 800d5f4:	08011140 	.word	0x08011140
 800d5f8:	08011144 	.word	0x08011144

0800d5fc <memcpy>:
 800d5fc:	440a      	add	r2, r1
 800d5fe:	4291      	cmp	r1, r2
 800d600:	f100 33ff 	add.w	r3, r0, #4294967295
 800d604:	d100      	bne.n	800d608 <memcpy+0xc>
 800d606:	4770      	bx	lr
 800d608:	b510      	push	{r4, lr}
 800d60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d612:	4291      	cmp	r1, r2
 800d614:	d1f9      	bne.n	800d60a <memcpy+0xe>
 800d616:	bd10      	pop	{r4, pc}

0800d618 <memset>:
 800d618:	4402      	add	r2, r0
 800d61a:	4603      	mov	r3, r0
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d100      	bne.n	800d622 <memset+0xa>
 800d620:	4770      	bx	lr
 800d622:	f803 1b01 	strb.w	r1, [r3], #1
 800d626:	e7f9      	b.n	800d61c <memset+0x4>

0800d628 <__sfputc_r>:
 800d628:	6893      	ldr	r3, [r2, #8]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	b410      	push	{r4}
 800d630:	6093      	str	r3, [r2, #8]
 800d632:	da08      	bge.n	800d646 <__sfputc_r+0x1e>
 800d634:	6994      	ldr	r4, [r2, #24]
 800d636:	42a3      	cmp	r3, r4
 800d638:	db01      	blt.n	800d63e <__sfputc_r+0x16>
 800d63a:	290a      	cmp	r1, #10
 800d63c:	d103      	bne.n	800d646 <__sfputc_r+0x1e>
 800d63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d642:	f000 bf3d 	b.w	800e4c0 <__swbuf_r>
 800d646:	6813      	ldr	r3, [r2, #0]
 800d648:	1c58      	adds	r0, r3, #1
 800d64a:	6010      	str	r0, [r2, #0]
 800d64c:	7019      	strb	r1, [r3, #0]
 800d64e:	4608      	mov	r0, r1
 800d650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <__sfputs_r>:
 800d656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d658:	4606      	mov	r6, r0
 800d65a:	460f      	mov	r7, r1
 800d65c:	4614      	mov	r4, r2
 800d65e:	18d5      	adds	r5, r2, r3
 800d660:	42ac      	cmp	r4, r5
 800d662:	d101      	bne.n	800d668 <__sfputs_r+0x12>
 800d664:	2000      	movs	r0, #0
 800d666:	e007      	b.n	800d678 <__sfputs_r+0x22>
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	463a      	mov	r2, r7
 800d66e:	4630      	mov	r0, r6
 800d670:	f7ff ffda 	bl	800d628 <__sfputc_r>
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	d1f3      	bne.n	800d660 <__sfputs_r+0xa>
 800d678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d67c <_vfiprintf_r>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	460d      	mov	r5, r1
 800d682:	b09d      	sub	sp, #116	; 0x74
 800d684:	4614      	mov	r4, r2
 800d686:	4698      	mov	r8, r3
 800d688:	4606      	mov	r6, r0
 800d68a:	b118      	cbz	r0, 800d694 <_vfiprintf_r+0x18>
 800d68c:	6983      	ldr	r3, [r0, #24]
 800d68e:	b90b      	cbnz	r3, 800d694 <_vfiprintf_r+0x18>
 800d690:	f001 ff72 	bl	800f578 <__sinit>
 800d694:	4b89      	ldr	r3, [pc, #548]	; (800d8bc <_vfiprintf_r+0x240>)
 800d696:	429d      	cmp	r5, r3
 800d698:	d11b      	bne.n	800d6d2 <_vfiprintf_r+0x56>
 800d69a:	6875      	ldr	r5, [r6, #4]
 800d69c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d69e:	07d9      	lsls	r1, r3, #31
 800d6a0:	d405      	bmi.n	800d6ae <_vfiprintf_r+0x32>
 800d6a2:	89ab      	ldrh	r3, [r5, #12]
 800d6a4:	059a      	lsls	r2, r3, #22
 800d6a6:	d402      	bmi.n	800d6ae <_vfiprintf_r+0x32>
 800d6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6aa:	f002 f808 	bl	800f6be <__retarget_lock_acquire_recursive>
 800d6ae:	89ab      	ldrh	r3, [r5, #12]
 800d6b0:	071b      	lsls	r3, r3, #28
 800d6b2:	d501      	bpl.n	800d6b8 <_vfiprintf_r+0x3c>
 800d6b4:	692b      	ldr	r3, [r5, #16]
 800d6b6:	b9eb      	cbnz	r3, 800d6f4 <_vfiprintf_r+0x78>
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f000 ff52 	bl	800e564 <__swsetup_r>
 800d6c0:	b1c0      	cbz	r0, 800d6f4 <_vfiprintf_r+0x78>
 800d6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c4:	07dc      	lsls	r4, r3, #31
 800d6c6:	d50e      	bpl.n	800d6e6 <_vfiprintf_r+0x6a>
 800d6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6cc:	b01d      	add	sp, #116	; 0x74
 800d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d2:	4b7b      	ldr	r3, [pc, #492]	; (800d8c0 <_vfiprintf_r+0x244>)
 800d6d4:	429d      	cmp	r5, r3
 800d6d6:	d101      	bne.n	800d6dc <_vfiprintf_r+0x60>
 800d6d8:	68b5      	ldr	r5, [r6, #8]
 800d6da:	e7df      	b.n	800d69c <_vfiprintf_r+0x20>
 800d6dc:	4b79      	ldr	r3, [pc, #484]	; (800d8c4 <_vfiprintf_r+0x248>)
 800d6de:	429d      	cmp	r5, r3
 800d6e0:	bf08      	it	eq
 800d6e2:	68f5      	ldreq	r5, [r6, #12]
 800d6e4:	e7da      	b.n	800d69c <_vfiprintf_r+0x20>
 800d6e6:	89ab      	ldrh	r3, [r5, #12]
 800d6e8:	0598      	lsls	r0, r3, #22
 800d6ea:	d4ed      	bmi.n	800d6c8 <_vfiprintf_r+0x4c>
 800d6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ee:	f001 ffe7 	bl	800f6c0 <__retarget_lock_release_recursive>
 800d6f2:	e7e9      	b.n	800d6c8 <_vfiprintf_r+0x4c>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d702:	2330      	movs	r3, #48	; 0x30
 800d704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8c8 <_vfiprintf_r+0x24c>
 800d708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d70c:	f04f 0901 	mov.w	r9, #1
 800d710:	4623      	mov	r3, r4
 800d712:	469a      	mov	sl, r3
 800d714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d718:	b10a      	cbz	r2, 800d71e <_vfiprintf_r+0xa2>
 800d71a:	2a25      	cmp	r2, #37	; 0x25
 800d71c:	d1f9      	bne.n	800d712 <_vfiprintf_r+0x96>
 800d71e:	ebba 0b04 	subs.w	fp, sl, r4
 800d722:	d00b      	beq.n	800d73c <_vfiprintf_r+0xc0>
 800d724:	465b      	mov	r3, fp
 800d726:	4622      	mov	r2, r4
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ff93 	bl	800d656 <__sfputs_r>
 800d730:	3001      	adds	r0, #1
 800d732:	f000 80aa 	beq.w	800d88a <_vfiprintf_r+0x20e>
 800d736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d738:	445a      	add	r2, fp
 800d73a:	9209      	str	r2, [sp, #36]	; 0x24
 800d73c:	f89a 3000 	ldrb.w	r3, [sl]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 80a2 	beq.w	800d88a <_vfiprintf_r+0x20e>
 800d746:	2300      	movs	r3, #0
 800d748:	f04f 32ff 	mov.w	r2, #4294967295
 800d74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d750:	f10a 0a01 	add.w	sl, sl, #1
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	9307      	str	r3, [sp, #28]
 800d758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d75c:	931a      	str	r3, [sp, #104]	; 0x68
 800d75e:	4654      	mov	r4, sl
 800d760:	2205      	movs	r2, #5
 800d762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d766:	4858      	ldr	r0, [pc, #352]	; (800d8c8 <_vfiprintf_r+0x24c>)
 800d768:	f7f2 fd3a 	bl	80001e0 <memchr>
 800d76c:	9a04      	ldr	r2, [sp, #16]
 800d76e:	b9d8      	cbnz	r0, 800d7a8 <_vfiprintf_r+0x12c>
 800d770:	06d1      	lsls	r1, r2, #27
 800d772:	bf44      	itt	mi
 800d774:	2320      	movmi	r3, #32
 800d776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d77a:	0713      	lsls	r3, r2, #28
 800d77c:	bf44      	itt	mi
 800d77e:	232b      	movmi	r3, #43	; 0x2b
 800d780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d784:	f89a 3000 	ldrb.w	r3, [sl]
 800d788:	2b2a      	cmp	r3, #42	; 0x2a
 800d78a:	d015      	beq.n	800d7b8 <_vfiprintf_r+0x13c>
 800d78c:	9a07      	ldr	r2, [sp, #28]
 800d78e:	4654      	mov	r4, sl
 800d790:	2000      	movs	r0, #0
 800d792:	f04f 0c0a 	mov.w	ip, #10
 800d796:	4621      	mov	r1, r4
 800d798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d79c:	3b30      	subs	r3, #48	; 0x30
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d94e      	bls.n	800d840 <_vfiprintf_r+0x1c4>
 800d7a2:	b1b0      	cbz	r0, 800d7d2 <_vfiprintf_r+0x156>
 800d7a4:	9207      	str	r2, [sp, #28]
 800d7a6:	e014      	b.n	800d7d2 <_vfiprintf_r+0x156>
 800d7a8:	eba0 0308 	sub.w	r3, r0, r8
 800d7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	46a2      	mov	sl, r4
 800d7b6:	e7d2      	b.n	800d75e <_vfiprintf_r+0xe2>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	1d19      	adds	r1, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	9103      	str	r1, [sp, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bfbb      	ittet	lt
 800d7c4:	425b      	neglt	r3, r3
 800d7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ca:	9307      	strge	r3, [sp, #28]
 800d7cc:	9307      	strlt	r3, [sp, #28]
 800d7ce:	bfb8      	it	lt
 800d7d0:	9204      	strlt	r2, [sp, #16]
 800d7d2:	7823      	ldrb	r3, [r4, #0]
 800d7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d6:	d10c      	bne.n	800d7f2 <_vfiprintf_r+0x176>
 800d7d8:	7863      	ldrb	r3, [r4, #1]
 800d7da:	2b2a      	cmp	r3, #42	; 0x2a
 800d7dc:	d135      	bne.n	800d84a <_vfiprintf_r+0x1ce>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	1d1a      	adds	r2, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	9203      	str	r2, [sp, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bfb8      	it	lt
 800d7ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ee:	3402      	adds	r4, #2
 800d7f0:	9305      	str	r3, [sp, #20]
 800d7f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8d8 <_vfiprintf_r+0x25c>
 800d7f6:	7821      	ldrb	r1, [r4, #0]
 800d7f8:	2203      	movs	r2, #3
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	f7f2 fcf0 	bl	80001e0 <memchr>
 800d800:	b140      	cbz	r0, 800d814 <_vfiprintf_r+0x198>
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	eba0 000a 	sub.w	r0, r0, sl
 800d808:	fa03 f000 	lsl.w	r0, r3, r0
 800d80c:	9b04      	ldr	r3, [sp, #16]
 800d80e:	4303      	orrs	r3, r0
 800d810:	3401      	adds	r4, #1
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d818:	482c      	ldr	r0, [pc, #176]	; (800d8cc <_vfiprintf_r+0x250>)
 800d81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d81e:	2206      	movs	r2, #6
 800d820:	f7f2 fcde 	bl	80001e0 <memchr>
 800d824:	2800      	cmp	r0, #0
 800d826:	d03f      	beq.n	800d8a8 <_vfiprintf_r+0x22c>
 800d828:	4b29      	ldr	r3, [pc, #164]	; (800d8d0 <_vfiprintf_r+0x254>)
 800d82a:	bb1b      	cbnz	r3, 800d874 <_vfiprintf_r+0x1f8>
 800d82c:	9b03      	ldr	r3, [sp, #12]
 800d82e:	3307      	adds	r3, #7
 800d830:	f023 0307 	bic.w	r3, r3, #7
 800d834:	3308      	adds	r3, #8
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83a:	443b      	add	r3, r7
 800d83c:	9309      	str	r3, [sp, #36]	; 0x24
 800d83e:	e767      	b.n	800d710 <_vfiprintf_r+0x94>
 800d840:	fb0c 3202 	mla	r2, ip, r2, r3
 800d844:	460c      	mov	r4, r1
 800d846:	2001      	movs	r0, #1
 800d848:	e7a5      	b.n	800d796 <_vfiprintf_r+0x11a>
 800d84a:	2300      	movs	r3, #0
 800d84c:	3401      	adds	r4, #1
 800d84e:	9305      	str	r3, [sp, #20]
 800d850:	4619      	mov	r1, r3
 800d852:	f04f 0c0a 	mov.w	ip, #10
 800d856:	4620      	mov	r0, r4
 800d858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d85c:	3a30      	subs	r2, #48	; 0x30
 800d85e:	2a09      	cmp	r2, #9
 800d860:	d903      	bls.n	800d86a <_vfiprintf_r+0x1ee>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0c5      	beq.n	800d7f2 <_vfiprintf_r+0x176>
 800d866:	9105      	str	r1, [sp, #20]
 800d868:	e7c3      	b.n	800d7f2 <_vfiprintf_r+0x176>
 800d86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d86e:	4604      	mov	r4, r0
 800d870:	2301      	movs	r3, #1
 800d872:	e7f0      	b.n	800d856 <_vfiprintf_r+0x1da>
 800d874:	ab03      	add	r3, sp, #12
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	462a      	mov	r2, r5
 800d87a:	4b16      	ldr	r3, [pc, #88]	; (800d8d4 <_vfiprintf_r+0x258>)
 800d87c:	a904      	add	r1, sp, #16
 800d87e:	4630      	mov	r0, r6
 800d880:	f000 f8cc 	bl	800da1c <_printf_float>
 800d884:	4607      	mov	r7, r0
 800d886:	1c78      	adds	r0, r7, #1
 800d888:	d1d6      	bne.n	800d838 <_vfiprintf_r+0x1bc>
 800d88a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d88c:	07d9      	lsls	r1, r3, #31
 800d88e:	d405      	bmi.n	800d89c <_vfiprintf_r+0x220>
 800d890:	89ab      	ldrh	r3, [r5, #12]
 800d892:	059a      	lsls	r2, r3, #22
 800d894:	d402      	bmi.n	800d89c <_vfiprintf_r+0x220>
 800d896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d898:	f001 ff12 	bl	800f6c0 <__retarget_lock_release_recursive>
 800d89c:	89ab      	ldrh	r3, [r5, #12]
 800d89e:	065b      	lsls	r3, r3, #25
 800d8a0:	f53f af12 	bmi.w	800d6c8 <_vfiprintf_r+0x4c>
 800d8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a6:	e711      	b.n	800d6cc <_vfiprintf_r+0x50>
 800d8a8:	ab03      	add	r3, sp, #12
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	462a      	mov	r2, r5
 800d8ae:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <_vfiprintf_r+0x258>)
 800d8b0:	a904      	add	r1, sp, #16
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f000 fb56 	bl	800df64 <_printf_i>
 800d8b8:	e7e4      	b.n	800d884 <_vfiprintf_r+0x208>
 800d8ba:	bf00      	nop
 800d8bc:	08010f90 	.word	0x08010f90
 800d8c0:	08010fb0 	.word	0x08010fb0
 800d8c4:	08010f70 	.word	0x08010f70
 800d8c8:	08010d98 	.word	0x08010d98
 800d8cc:	08010da2 	.word	0x08010da2
 800d8d0:	0800da1d 	.word	0x0800da1d
 800d8d4:	0800d657 	.word	0x0800d657
 800d8d8:	08010d9e 	.word	0x08010d9e

0800d8dc <__cvt>:
 800d8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e0:	ec55 4b10 	vmov	r4, r5, d0
 800d8e4:	2d00      	cmp	r5, #0
 800d8e6:	460e      	mov	r6, r1
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	462b      	mov	r3, r5
 800d8ec:	bfbb      	ittet	lt
 800d8ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d8f2:	461d      	movlt	r5, r3
 800d8f4:	2300      	movge	r3, #0
 800d8f6:	232d      	movlt	r3, #45	; 0x2d
 800d8f8:	700b      	strb	r3, [r1, #0]
 800d8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d900:	4691      	mov	r9, r2
 800d902:	f023 0820 	bic.w	r8, r3, #32
 800d906:	bfbc      	itt	lt
 800d908:	4622      	movlt	r2, r4
 800d90a:	4614      	movlt	r4, r2
 800d90c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d910:	d005      	beq.n	800d91e <__cvt+0x42>
 800d912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d916:	d100      	bne.n	800d91a <__cvt+0x3e>
 800d918:	3601      	adds	r6, #1
 800d91a:	2102      	movs	r1, #2
 800d91c:	e000      	b.n	800d920 <__cvt+0x44>
 800d91e:	2103      	movs	r1, #3
 800d920:	ab03      	add	r3, sp, #12
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	ab02      	add	r3, sp, #8
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	ec45 4b10 	vmov	d0, r4, r5
 800d92c:	4653      	mov	r3, sl
 800d92e:	4632      	mov	r2, r6
 800d930:	f000 ff1a 	bl	800e768 <_dtoa_r>
 800d934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d938:	4607      	mov	r7, r0
 800d93a:	d102      	bne.n	800d942 <__cvt+0x66>
 800d93c:	f019 0f01 	tst.w	r9, #1
 800d940:	d022      	beq.n	800d988 <__cvt+0xac>
 800d942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d946:	eb07 0906 	add.w	r9, r7, r6
 800d94a:	d110      	bne.n	800d96e <__cvt+0x92>
 800d94c:	783b      	ldrb	r3, [r7, #0]
 800d94e:	2b30      	cmp	r3, #48	; 0x30
 800d950:	d10a      	bne.n	800d968 <__cvt+0x8c>
 800d952:	2200      	movs	r2, #0
 800d954:	2300      	movs	r3, #0
 800d956:	4620      	mov	r0, r4
 800d958:	4629      	mov	r1, r5
 800d95a:	f7f3 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d95e:	b918      	cbnz	r0, 800d968 <__cvt+0x8c>
 800d960:	f1c6 0601 	rsb	r6, r6, #1
 800d964:	f8ca 6000 	str.w	r6, [sl]
 800d968:	f8da 3000 	ldr.w	r3, [sl]
 800d96c:	4499      	add	r9, r3
 800d96e:	2200      	movs	r2, #0
 800d970:	2300      	movs	r3, #0
 800d972:	4620      	mov	r0, r4
 800d974:	4629      	mov	r1, r5
 800d976:	f7f3 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d97a:	b108      	cbz	r0, 800d980 <__cvt+0xa4>
 800d97c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d980:	2230      	movs	r2, #48	; 0x30
 800d982:	9b03      	ldr	r3, [sp, #12]
 800d984:	454b      	cmp	r3, r9
 800d986:	d307      	bcc.n	800d998 <__cvt+0xbc>
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d98c:	1bdb      	subs	r3, r3, r7
 800d98e:	4638      	mov	r0, r7
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	b004      	add	sp, #16
 800d994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d998:	1c59      	adds	r1, r3, #1
 800d99a:	9103      	str	r1, [sp, #12]
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e7f0      	b.n	800d982 <__cvt+0xa6>

0800d9a0 <__exponent>:
 800d9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	bfb8      	it	lt
 800d9a8:	4249      	neglt	r1, r1
 800d9aa:	f803 2b02 	strb.w	r2, [r3], #2
 800d9ae:	bfb4      	ite	lt
 800d9b0:	222d      	movlt	r2, #45	; 0x2d
 800d9b2:	222b      	movge	r2, #43	; 0x2b
 800d9b4:	2909      	cmp	r1, #9
 800d9b6:	7042      	strb	r2, [r0, #1]
 800d9b8:	dd2a      	ble.n	800da10 <__exponent+0x70>
 800d9ba:	f10d 0407 	add.w	r4, sp, #7
 800d9be:	46a4      	mov	ip, r4
 800d9c0:	270a      	movs	r7, #10
 800d9c2:	46a6      	mov	lr, r4
 800d9c4:	460a      	mov	r2, r1
 800d9c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d9ca:	fb07 1516 	mls	r5, r7, r6, r1
 800d9ce:	3530      	adds	r5, #48	; 0x30
 800d9d0:	2a63      	cmp	r2, #99	; 0x63
 800d9d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d9d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d9da:	4631      	mov	r1, r6
 800d9dc:	dcf1      	bgt.n	800d9c2 <__exponent+0x22>
 800d9de:	3130      	adds	r1, #48	; 0x30
 800d9e0:	f1ae 0502 	sub.w	r5, lr, #2
 800d9e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d9e8:	1c44      	adds	r4, r0, #1
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	4561      	cmp	r1, ip
 800d9ee:	d30a      	bcc.n	800da06 <__exponent+0x66>
 800d9f0:	f10d 0209 	add.w	r2, sp, #9
 800d9f4:	eba2 020e 	sub.w	r2, r2, lr
 800d9f8:	4565      	cmp	r5, ip
 800d9fa:	bf88      	it	hi
 800d9fc:	2200      	movhi	r2, #0
 800d9fe:	4413      	add	r3, r2
 800da00:	1a18      	subs	r0, r3, r0
 800da02:	b003      	add	sp, #12
 800da04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800da0e:	e7ed      	b.n	800d9ec <__exponent+0x4c>
 800da10:	2330      	movs	r3, #48	; 0x30
 800da12:	3130      	adds	r1, #48	; 0x30
 800da14:	7083      	strb	r3, [r0, #2]
 800da16:	70c1      	strb	r1, [r0, #3]
 800da18:	1d03      	adds	r3, r0, #4
 800da1a:	e7f1      	b.n	800da00 <__exponent+0x60>

0800da1c <_printf_float>:
 800da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da20:	ed2d 8b02 	vpush	{d8}
 800da24:	b08d      	sub	sp, #52	; 0x34
 800da26:	460c      	mov	r4, r1
 800da28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800da2c:	4616      	mov	r6, r2
 800da2e:	461f      	mov	r7, r3
 800da30:	4605      	mov	r5, r0
 800da32:	f001 fe3f 	bl	800f6b4 <_localeconv_r>
 800da36:	f8d0 a000 	ldr.w	sl, [r0]
 800da3a:	4650      	mov	r0, sl
 800da3c:	f7f2 fbc8 	bl	80001d0 <strlen>
 800da40:	2300      	movs	r3, #0
 800da42:	930a      	str	r3, [sp, #40]	; 0x28
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	f8d8 3000 	ldr.w	r3, [r8]
 800da4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800da50:	3307      	adds	r3, #7
 800da52:	f023 0307 	bic.w	r3, r3, #7
 800da56:	f103 0208 	add.w	r2, r3, #8
 800da5a:	f8c8 2000 	str.w	r2, [r8]
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da6e:	9307      	str	r3, [sp, #28]
 800da70:	f8cd 8018 	str.w	r8, [sp, #24]
 800da74:	ee08 0a10 	vmov	s16, r0
 800da78:	4b9f      	ldr	r3, [pc, #636]	; (800dcf8 <_printf_float+0x2dc>)
 800da7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da7e:	f04f 32ff 	mov.w	r2, #4294967295
 800da82:	f7f3 f853 	bl	8000b2c <__aeabi_dcmpun>
 800da86:	bb88      	cbnz	r0, 800daec <_printf_float+0xd0>
 800da88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da8c:	4b9a      	ldr	r3, [pc, #616]	; (800dcf8 <_printf_float+0x2dc>)
 800da8e:	f04f 32ff 	mov.w	r2, #4294967295
 800da92:	f7f3 f82d 	bl	8000af0 <__aeabi_dcmple>
 800da96:	bb48      	cbnz	r0, 800daec <_printf_float+0xd0>
 800da98:	2200      	movs	r2, #0
 800da9a:	2300      	movs	r3, #0
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f3 f81c 	bl	8000adc <__aeabi_dcmplt>
 800daa4:	b110      	cbz	r0, 800daac <_printf_float+0x90>
 800daa6:	232d      	movs	r3, #45	; 0x2d
 800daa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daac:	4b93      	ldr	r3, [pc, #588]	; (800dcfc <_printf_float+0x2e0>)
 800daae:	4894      	ldr	r0, [pc, #592]	; (800dd00 <_printf_float+0x2e4>)
 800dab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dab4:	bf94      	ite	ls
 800dab6:	4698      	movls	r8, r3
 800dab8:	4680      	movhi	r8, r0
 800daba:	2303      	movs	r3, #3
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	9b05      	ldr	r3, [sp, #20]
 800dac0:	f023 0204 	bic.w	r2, r3, #4
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	f04f 0900 	mov.w	r9, #0
 800daca:	9700      	str	r7, [sp, #0]
 800dacc:	4633      	mov	r3, r6
 800dace:	aa0b      	add	r2, sp, #44	; 0x2c
 800dad0:	4621      	mov	r1, r4
 800dad2:	4628      	mov	r0, r5
 800dad4:	f000 f9d8 	bl	800de88 <_printf_common>
 800dad8:	3001      	adds	r0, #1
 800dada:	f040 8090 	bne.w	800dbfe <_printf_float+0x1e2>
 800dade:	f04f 30ff 	mov.w	r0, #4294967295
 800dae2:	b00d      	add	sp, #52	; 0x34
 800dae4:	ecbd 8b02 	vpop	{d8}
 800dae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daec:	4642      	mov	r2, r8
 800daee:	464b      	mov	r3, r9
 800daf0:	4640      	mov	r0, r8
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7f3 f81a 	bl	8000b2c <__aeabi_dcmpun>
 800daf8:	b140      	cbz	r0, 800db0c <_printf_float+0xf0>
 800dafa:	464b      	mov	r3, r9
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	bfbc      	itt	lt
 800db00:	232d      	movlt	r3, #45	; 0x2d
 800db02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800db06:	487f      	ldr	r0, [pc, #508]	; (800dd04 <_printf_float+0x2e8>)
 800db08:	4b7f      	ldr	r3, [pc, #508]	; (800dd08 <_printf_float+0x2ec>)
 800db0a:	e7d1      	b.n	800dab0 <_printf_float+0x94>
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800db12:	9206      	str	r2, [sp, #24]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	d13f      	bne.n	800db98 <_printf_float+0x17c>
 800db18:	2306      	movs	r3, #6
 800db1a:	6063      	str	r3, [r4, #4]
 800db1c:	9b05      	ldr	r3, [sp, #20]
 800db1e:	6861      	ldr	r1, [r4, #4]
 800db20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800db24:	2300      	movs	r3, #0
 800db26:	9303      	str	r3, [sp, #12]
 800db28:	ab0a      	add	r3, sp, #40	; 0x28
 800db2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800db2e:	ab09      	add	r3, sp, #36	; 0x24
 800db30:	ec49 8b10 	vmov	d0, r8, r9
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	6022      	str	r2, [r4, #0]
 800db38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db3c:	4628      	mov	r0, r5
 800db3e:	f7ff fecd 	bl	800d8dc <__cvt>
 800db42:	9b06      	ldr	r3, [sp, #24]
 800db44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db46:	2b47      	cmp	r3, #71	; 0x47
 800db48:	4680      	mov	r8, r0
 800db4a:	d108      	bne.n	800db5e <_printf_float+0x142>
 800db4c:	1cc8      	adds	r0, r1, #3
 800db4e:	db02      	blt.n	800db56 <_printf_float+0x13a>
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	4299      	cmp	r1, r3
 800db54:	dd41      	ble.n	800dbda <_printf_float+0x1be>
 800db56:	f1ab 0b02 	sub.w	fp, fp, #2
 800db5a:	fa5f fb8b 	uxtb.w	fp, fp
 800db5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db62:	d820      	bhi.n	800dba6 <_printf_float+0x18a>
 800db64:	3901      	subs	r1, #1
 800db66:	465a      	mov	r2, fp
 800db68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db6c:	9109      	str	r1, [sp, #36]	; 0x24
 800db6e:	f7ff ff17 	bl	800d9a0 <__exponent>
 800db72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db74:	1813      	adds	r3, r2, r0
 800db76:	2a01      	cmp	r2, #1
 800db78:	4681      	mov	r9, r0
 800db7a:	6123      	str	r3, [r4, #16]
 800db7c:	dc02      	bgt.n	800db84 <_printf_float+0x168>
 800db7e:	6822      	ldr	r2, [r4, #0]
 800db80:	07d2      	lsls	r2, r2, #31
 800db82:	d501      	bpl.n	800db88 <_printf_float+0x16c>
 800db84:	3301      	adds	r3, #1
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d09c      	beq.n	800daca <_printf_float+0xae>
 800db90:	232d      	movs	r3, #45	; 0x2d
 800db92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db96:	e798      	b.n	800daca <_printf_float+0xae>
 800db98:	9a06      	ldr	r2, [sp, #24]
 800db9a:	2a47      	cmp	r2, #71	; 0x47
 800db9c:	d1be      	bne.n	800db1c <_printf_float+0x100>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1bc      	bne.n	800db1c <_printf_float+0x100>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e7b9      	b.n	800db1a <_printf_float+0xfe>
 800dba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dbaa:	d118      	bne.n	800dbde <_printf_float+0x1c2>
 800dbac:	2900      	cmp	r1, #0
 800dbae:	6863      	ldr	r3, [r4, #4]
 800dbb0:	dd0b      	ble.n	800dbca <_printf_float+0x1ae>
 800dbb2:	6121      	str	r1, [r4, #16]
 800dbb4:	b913      	cbnz	r3, 800dbbc <_printf_float+0x1a0>
 800dbb6:	6822      	ldr	r2, [r4, #0]
 800dbb8:	07d0      	lsls	r0, r2, #31
 800dbba:	d502      	bpl.n	800dbc2 <_printf_float+0x1a6>
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	440b      	add	r3, r1
 800dbc0:	6123      	str	r3, [r4, #16]
 800dbc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800dbc4:	f04f 0900 	mov.w	r9, #0
 800dbc8:	e7de      	b.n	800db88 <_printf_float+0x16c>
 800dbca:	b913      	cbnz	r3, 800dbd2 <_printf_float+0x1b6>
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	07d2      	lsls	r2, r2, #31
 800dbd0:	d501      	bpl.n	800dbd6 <_printf_float+0x1ba>
 800dbd2:	3302      	adds	r3, #2
 800dbd4:	e7f4      	b.n	800dbc0 <_printf_float+0x1a4>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e7f2      	b.n	800dbc0 <_printf_float+0x1a4>
 800dbda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbe0:	4299      	cmp	r1, r3
 800dbe2:	db05      	blt.n	800dbf0 <_printf_float+0x1d4>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	6121      	str	r1, [r4, #16]
 800dbe8:	07d8      	lsls	r0, r3, #31
 800dbea:	d5ea      	bpl.n	800dbc2 <_printf_float+0x1a6>
 800dbec:	1c4b      	adds	r3, r1, #1
 800dbee:	e7e7      	b.n	800dbc0 <_printf_float+0x1a4>
 800dbf0:	2900      	cmp	r1, #0
 800dbf2:	bfd4      	ite	le
 800dbf4:	f1c1 0202 	rsble	r2, r1, #2
 800dbf8:	2201      	movgt	r2, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	e7e0      	b.n	800dbc0 <_printf_float+0x1a4>
 800dbfe:	6823      	ldr	r3, [r4, #0]
 800dc00:	055a      	lsls	r2, r3, #21
 800dc02:	d407      	bmi.n	800dc14 <_printf_float+0x1f8>
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	4642      	mov	r2, r8
 800dc08:	4631      	mov	r1, r6
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	47b8      	blx	r7
 800dc0e:	3001      	adds	r0, #1
 800dc10:	d12c      	bne.n	800dc6c <_printf_float+0x250>
 800dc12:	e764      	b.n	800dade <_printf_float+0xc2>
 800dc14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc18:	f240 80e0 	bls.w	800dddc <_printf_float+0x3c0>
 800dc1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc20:	2200      	movs	r2, #0
 800dc22:	2300      	movs	r3, #0
 800dc24:	f7f2 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d034      	beq.n	800dc96 <_printf_float+0x27a>
 800dc2c:	4a37      	ldr	r2, [pc, #220]	; (800dd0c <_printf_float+0x2f0>)
 800dc2e:	2301      	movs	r3, #1
 800dc30:	4631      	mov	r1, r6
 800dc32:	4628      	mov	r0, r5
 800dc34:	47b8      	blx	r7
 800dc36:	3001      	adds	r0, #1
 800dc38:	f43f af51 	beq.w	800dade <_printf_float+0xc2>
 800dc3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc40:	429a      	cmp	r2, r3
 800dc42:	db02      	blt.n	800dc4a <_printf_float+0x22e>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	07d8      	lsls	r0, r3, #31
 800dc48:	d510      	bpl.n	800dc6c <_printf_float+0x250>
 800dc4a:	ee18 3a10 	vmov	r3, s16
 800dc4e:	4652      	mov	r2, sl
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	47b8      	blx	r7
 800dc56:	3001      	adds	r0, #1
 800dc58:	f43f af41 	beq.w	800dade <_printf_float+0xc2>
 800dc5c:	f04f 0800 	mov.w	r8, #0
 800dc60:	f104 091a 	add.w	r9, r4, #26
 800dc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc66:	3b01      	subs	r3, #1
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	dc09      	bgt.n	800dc80 <_printf_float+0x264>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	079b      	lsls	r3, r3, #30
 800dc70:	f100 8105 	bmi.w	800de7e <_printf_float+0x462>
 800dc74:	68e0      	ldr	r0, [r4, #12]
 800dc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc78:	4298      	cmp	r0, r3
 800dc7a:	bfb8      	it	lt
 800dc7c:	4618      	movlt	r0, r3
 800dc7e:	e730      	b.n	800dae2 <_printf_float+0xc6>
 800dc80:	2301      	movs	r3, #1
 800dc82:	464a      	mov	r2, r9
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f af27 	beq.w	800dade <_printf_float+0xc2>
 800dc90:	f108 0801 	add.w	r8, r8, #1
 800dc94:	e7e6      	b.n	800dc64 <_printf_float+0x248>
 800dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc39      	bgt.n	800dd10 <_printf_float+0x2f4>
 800dc9c:	4a1b      	ldr	r2, [pc, #108]	; (800dd0c <_printf_float+0x2f0>)
 800dc9e:	2301      	movs	r3, #1
 800dca0:	4631      	mov	r1, r6
 800dca2:	4628      	mov	r0, r5
 800dca4:	47b8      	blx	r7
 800dca6:	3001      	adds	r0, #1
 800dca8:	f43f af19 	beq.w	800dade <_printf_float+0xc2>
 800dcac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	d102      	bne.n	800dcba <_printf_float+0x29e>
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	07d9      	lsls	r1, r3, #31
 800dcb8:	d5d8      	bpl.n	800dc6c <_printf_float+0x250>
 800dcba:	ee18 3a10 	vmov	r3, s16
 800dcbe:	4652      	mov	r2, sl
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	47b8      	blx	r7
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	f43f af09 	beq.w	800dade <_printf_float+0xc2>
 800dccc:	f04f 0900 	mov.w	r9, #0
 800dcd0:	f104 0a1a 	add.w	sl, r4, #26
 800dcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd6:	425b      	negs	r3, r3
 800dcd8:	454b      	cmp	r3, r9
 800dcda:	dc01      	bgt.n	800dce0 <_printf_float+0x2c4>
 800dcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcde:	e792      	b.n	800dc06 <_printf_float+0x1ea>
 800dce0:	2301      	movs	r3, #1
 800dce2:	4652      	mov	r2, sl
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	f43f aef7 	beq.w	800dade <_printf_float+0xc2>
 800dcf0:	f109 0901 	add.w	r9, r9, #1
 800dcf4:	e7ee      	b.n	800dcd4 <_printf_float+0x2b8>
 800dcf6:	bf00      	nop
 800dcf8:	7fefffff 	.word	0x7fefffff
 800dcfc:	08010da9 	.word	0x08010da9
 800dd00:	08010dad 	.word	0x08010dad
 800dd04:	08010db5 	.word	0x08010db5
 800dd08:	08010db1 	.word	0x08010db1
 800dd0c:	08010db9 	.word	0x08010db9
 800dd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd14:	429a      	cmp	r2, r3
 800dd16:	bfa8      	it	ge
 800dd18:	461a      	movge	r2, r3
 800dd1a:	2a00      	cmp	r2, #0
 800dd1c:	4691      	mov	r9, r2
 800dd1e:	dc37      	bgt.n	800dd90 <_printf_float+0x374>
 800dd20:	f04f 0b00 	mov.w	fp, #0
 800dd24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd28:	f104 021a 	add.w	r2, r4, #26
 800dd2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd2e:	9305      	str	r3, [sp, #20]
 800dd30:	eba3 0309 	sub.w	r3, r3, r9
 800dd34:	455b      	cmp	r3, fp
 800dd36:	dc33      	bgt.n	800dda0 <_printf_float+0x384>
 800dd38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	db3b      	blt.n	800ddb8 <_printf_float+0x39c>
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	07da      	lsls	r2, r3, #31
 800dd44:	d438      	bmi.n	800ddb8 <_printf_float+0x39c>
 800dd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd48:	9a05      	ldr	r2, [sp, #20]
 800dd4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd4c:	1a9a      	subs	r2, r3, r2
 800dd4e:	eba3 0901 	sub.w	r9, r3, r1
 800dd52:	4591      	cmp	r9, r2
 800dd54:	bfa8      	it	ge
 800dd56:	4691      	movge	r9, r2
 800dd58:	f1b9 0f00 	cmp.w	r9, #0
 800dd5c:	dc35      	bgt.n	800ddca <_printf_float+0x3ae>
 800dd5e:	f04f 0800 	mov.w	r8, #0
 800dd62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd66:	f104 0a1a 	add.w	sl, r4, #26
 800dd6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd6e:	1a9b      	subs	r3, r3, r2
 800dd70:	eba3 0309 	sub.w	r3, r3, r9
 800dd74:	4543      	cmp	r3, r8
 800dd76:	f77f af79 	ble.w	800dc6c <_printf_float+0x250>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	4652      	mov	r2, sl
 800dd7e:	4631      	mov	r1, r6
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b8      	blx	r7
 800dd84:	3001      	adds	r0, #1
 800dd86:	f43f aeaa 	beq.w	800dade <_printf_float+0xc2>
 800dd8a:	f108 0801 	add.w	r8, r8, #1
 800dd8e:	e7ec      	b.n	800dd6a <_printf_float+0x34e>
 800dd90:	4613      	mov	r3, r2
 800dd92:	4631      	mov	r1, r6
 800dd94:	4642      	mov	r2, r8
 800dd96:	4628      	mov	r0, r5
 800dd98:	47b8      	blx	r7
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	d1c0      	bne.n	800dd20 <_printf_float+0x304>
 800dd9e:	e69e      	b.n	800dade <_printf_float+0xc2>
 800dda0:	2301      	movs	r3, #1
 800dda2:	4631      	mov	r1, r6
 800dda4:	4628      	mov	r0, r5
 800dda6:	9205      	str	r2, [sp, #20]
 800dda8:	47b8      	blx	r7
 800ddaa:	3001      	adds	r0, #1
 800ddac:	f43f ae97 	beq.w	800dade <_printf_float+0xc2>
 800ddb0:	9a05      	ldr	r2, [sp, #20]
 800ddb2:	f10b 0b01 	add.w	fp, fp, #1
 800ddb6:	e7b9      	b.n	800dd2c <_printf_float+0x310>
 800ddb8:	ee18 3a10 	vmov	r3, s16
 800ddbc:	4652      	mov	r2, sl
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	47b8      	blx	r7
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d1be      	bne.n	800dd46 <_printf_float+0x32a>
 800ddc8:	e689      	b.n	800dade <_printf_float+0xc2>
 800ddca:	9a05      	ldr	r2, [sp, #20]
 800ddcc:	464b      	mov	r3, r9
 800ddce:	4442      	add	r2, r8
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	47b8      	blx	r7
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	d1c1      	bne.n	800dd5e <_printf_float+0x342>
 800ddda:	e680      	b.n	800dade <_printf_float+0xc2>
 800dddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddde:	2a01      	cmp	r2, #1
 800dde0:	dc01      	bgt.n	800dde6 <_printf_float+0x3ca>
 800dde2:	07db      	lsls	r3, r3, #31
 800dde4:	d538      	bpl.n	800de58 <_printf_float+0x43c>
 800dde6:	2301      	movs	r3, #1
 800dde8:	4642      	mov	r2, r8
 800ddea:	4631      	mov	r1, r6
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b8      	blx	r7
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	f43f ae74 	beq.w	800dade <_printf_float+0xc2>
 800ddf6:	ee18 3a10 	vmov	r3, s16
 800ddfa:	4652      	mov	r2, sl
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4628      	mov	r0, r5
 800de00:	47b8      	blx	r7
 800de02:	3001      	adds	r0, #1
 800de04:	f43f ae6b 	beq.w	800dade <_printf_float+0xc2>
 800de08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de0c:	2200      	movs	r2, #0
 800de0e:	2300      	movs	r3, #0
 800de10:	f7f2 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800de14:	b9d8      	cbnz	r0, 800de4e <_printf_float+0x432>
 800de16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de18:	f108 0201 	add.w	r2, r8, #1
 800de1c:	3b01      	subs	r3, #1
 800de1e:	4631      	mov	r1, r6
 800de20:	4628      	mov	r0, r5
 800de22:	47b8      	blx	r7
 800de24:	3001      	adds	r0, #1
 800de26:	d10e      	bne.n	800de46 <_printf_float+0x42a>
 800de28:	e659      	b.n	800dade <_printf_float+0xc2>
 800de2a:	2301      	movs	r3, #1
 800de2c:	4652      	mov	r2, sl
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	f43f ae52 	beq.w	800dade <_printf_float+0xc2>
 800de3a:	f108 0801 	add.w	r8, r8, #1
 800de3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de40:	3b01      	subs	r3, #1
 800de42:	4543      	cmp	r3, r8
 800de44:	dcf1      	bgt.n	800de2a <_printf_float+0x40e>
 800de46:	464b      	mov	r3, r9
 800de48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de4c:	e6dc      	b.n	800dc08 <_printf_float+0x1ec>
 800de4e:	f04f 0800 	mov.w	r8, #0
 800de52:	f104 0a1a 	add.w	sl, r4, #26
 800de56:	e7f2      	b.n	800de3e <_printf_float+0x422>
 800de58:	2301      	movs	r3, #1
 800de5a:	4642      	mov	r2, r8
 800de5c:	e7df      	b.n	800de1e <_printf_float+0x402>
 800de5e:	2301      	movs	r3, #1
 800de60:	464a      	mov	r2, r9
 800de62:	4631      	mov	r1, r6
 800de64:	4628      	mov	r0, r5
 800de66:	47b8      	blx	r7
 800de68:	3001      	adds	r0, #1
 800de6a:	f43f ae38 	beq.w	800dade <_printf_float+0xc2>
 800de6e:	f108 0801 	add.w	r8, r8, #1
 800de72:	68e3      	ldr	r3, [r4, #12]
 800de74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de76:	1a5b      	subs	r3, r3, r1
 800de78:	4543      	cmp	r3, r8
 800de7a:	dcf0      	bgt.n	800de5e <_printf_float+0x442>
 800de7c:	e6fa      	b.n	800dc74 <_printf_float+0x258>
 800de7e:	f04f 0800 	mov.w	r8, #0
 800de82:	f104 0919 	add.w	r9, r4, #25
 800de86:	e7f4      	b.n	800de72 <_printf_float+0x456>

0800de88 <_printf_common>:
 800de88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de8c:	4616      	mov	r6, r2
 800de8e:	4699      	mov	r9, r3
 800de90:	688a      	ldr	r2, [r1, #8]
 800de92:	690b      	ldr	r3, [r1, #16]
 800de94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de98:	4293      	cmp	r3, r2
 800de9a:	bfb8      	it	lt
 800de9c:	4613      	movlt	r3, r2
 800de9e:	6033      	str	r3, [r6, #0]
 800dea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dea4:	4607      	mov	r7, r0
 800dea6:	460c      	mov	r4, r1
 800dea8:	b10a      	cbz	r2, 800deae <_printf_common+0x26>
 800deaa:	3301      	adds	r3, #1
 800deac:	6033      	str	r3, [r6, #0]
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	0699      	lsls	r1, r3, #26
 800deb2:	bf42      	ittt	mi
 800deb4:	6833      	ldrmi	r3, [r6, #0]
 800deb6:	3302      	addmi	r3, #2
 800deb8:	6033      	strmi	r3, [r6, #0]
 800deba:	6825      	ldr	r5, [r4, #0]
 800debc:	f015 0506 	ands.w	r5, r5, #6
 800dec0:	d106      	bne.n	800ded0 <_printf_common+0x48>
 800dec2:	f104 0a19 	add.w	sl, r4, #25
 800dec6:	68e3      	ldr	r3, [r4, #12]
 800dec8:	6832      	ldr	r2, [r6, #0]
 800deca:	1a9b      	subs	r3, r3, r2
 800decc:	42ab      	cmp	r3, r5
 800dece:	dc26      	bgt.n	800df1e <_printf_common+0x96>
 800ded0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ded4:	1e13      	subs	r3, r2, #0
 800ded6:	6822      	ldr	r2, [r4, #0]
 800ded8:	bf18      	it	ne
 800deda:	2301      	movne	r3, #1
 800dedc:	0692      	lsls	r2, r2, #26
 800dede:	d42b      	bmi.n	800df38 <_printf_common+0xb0>
 800dee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dee4:	4649      	mov	r1, r9
 800dee6:	4638      	mov	r0, r7
 800dee8:	47c0      	blx	r8
 800deea:	3001      	adds	r0, #1
 800deec:	d01e      	beq.n	800df2c <_printf_common+0xa4>
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	68e5      	ldr	r5, [r4, #12]
 800def2:	6832      	ldr	r2, [r6, #0]
 800def4:	f003 0306 	and.w	r3, r3, #6
 800def8:	2b04      	cmp	r3, #4
 800defa:	bf08      	it	eq
 800defc:	1aad      	subeq	r5, r5, r2
 800defe:	68a3      	ldr	r3, [r4, #8]
 800df00:	6922      	ldr	r2, [r4, #16]
 800df02:	bf0c      	ite	eq
 800df04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df08:	2500      	movne	r5, #0
 800df0a:	4293      	cmp	r3, r2
 800df0c:	bfc4      	itt	gt
 800df0e:	1a9b      	subgt	r3, r3, r2
 800df10:	18ed      	addgt	r5, r5, r3
 800df12:	2600      	movs	r6, #0
 800df14:	341a      	adds	r4, #26
 800df16:	42b5      	cmp	r5, r6
 800df18:	d11a      	bne.n	800df50 <_printf_common+0xc8>
 800df1a:	2000      	movs	r0, #0
 800df1c:	e008      	b.n	800df30 <_printf_common+0xa8>
 800df1e:	2301      	movs	r3, #1
 800df20:	4652      	mov	r2, sl
 800df22:	4649      	mov	r1, r9
 800df24:	4638      	mov	r0, r7
 800df26:	47c0      	blx	r8
 800df28:	3001      	adds	r0, #1
 800df2a:	d103      	bne.n	800df34 <_printf_common+0xac>
 800df2c:	f04f 30ff 	mov.w	r0, #4294967295
 800df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df34:	3501      	adds	r5, #1
 800df36:	e7c6      	b.n	800dec6 <_printf_common+0x3e>
 800df38:	18e1      	adds	r1, r4, r3
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	2030      	movs	r0, #48	; 0x30
 800df3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df42:	4422      	add	r2, r4
 800df44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df4c:	3302      	adds	r3, #2
 800df4e:	e7c7      	b.n	800dee0 <_printf_common+0x58>
 800df50:	2301      	movs	r3, #1
 800df52:	4622      	mov	r2, r4
 800df54:	4649      	mov	r1, r9
 800df56:	4638      	mov	r0, r7
 800df58:	47c0      	blx	r8
 800df5a:	3001      	adds	r0, #1
 800df5c:	d0e6      	beq.n	800df2c <_printf_common+0xa4>
 800df5e:	3601      	adds	r6, #1
 800df60:	e7d9      	b.n	800df16 <_printf_common+0x8e>
	...

0800df64 <_printf_i>:
 800df64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df68:	7e0f      	ldrb	r7, [r1, #24]
 800df6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df6c:	2f78      	cmp	r7, #120	; 0x78
 800df6e:	4691      	mov	r9, r2
 800df70:	4680      	mov	r8, r0
 800df72:	460c      	mov	r4, r1
 800df74:	469a      	mov	sl, r3
 800df76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df7a:	d807      	bhi.n	800df8c <_printf_i+0x28>
 800df7c:	2f62      	cmp	r7, #98	; 0x62
 800df7e:	d80a      	bhi.n	800df96 <_printf_i+0x32>
 800df80:	2f00      	cmp	r7, #0
 800df82:	f000 80d8 	beq.w	800e136 <_printf_i+0x1d2>
 800df86:	2f58      	cmp	r7, #88	; 0x58
 800df88:	f000 80a3 	beq.w	800e0d2 <_printf_i+0x16e>
 800df8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df94:	e03a      	b.n	800e00c <_printf_i+0xa8>
 800df96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df9a:	2b15      	cmp	r3, #21
 800df9c:	d8f6      	bhi.n	800df8c <_printf_i+0x28>
 800df9e:	a101      	add	r1, pc, #4	; (adr r1, 800dfa4 <_printf_i+0x40>)
 800dfa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfa4:	0800dffd 	.word	0x0800dffd
 800dfa8:	0800e011 	.word	0x0800e011
 800dfac:	0800df8d 	.word	0x0800df8d
 800dfb0:	0800df8d 	.word	0x0800df8d
 800dfb4:	0800df8d 	.word	0x0800df8d
 800dfb8:	0800df8d 	.word	0x0800df8d
 800dfbc:	0800e011 	.word	0x0800e011
 800dfc0:	0800df8d 	.word	0x0800df8d
 800dfc4:	0800df8d 	.word	0x0800df8d
 800dfc8:	0800df8d 	.word	0x0800df8d
 800dfcc:	0800df8d 	.word	0x0800df8d
 800dfd0:	0800e11d 	.word	0x0800e11d
 800dfd4:	0800e041 	.word	0x0800e041
 800dfd8:	0800e0ff 	.word	0x0800e0ff
 800dfdc:	0800df8d 	.word	0x0800df8d
 800dfe0:	0800df8d 	.word	0x0800df8d
 800dfe4:	0800e13f 	.word	0x0800e13f
 800dfe8:	0800df8d 	.word	0x0800df8d
 800dfec:	0800e041 	.word	0x0800e041
 800dff0:	0800df8d 	.word	0x0800df8d
 800dff4:	0800df8d 	.word	0x0800df8d
 800dff8:	0800e107 	.word	0x0800e107
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	1d1a      	adds	r2, r3, #4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	602a      	str	r2, [r5, #0]
 800e004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e00c:	2301      	movs	r3, #1
 800e00e:	e0a3      	b.n	800e158 <_printf_i+0x1f4>
 800e010:	6820      	ldr	r0, [r4, #0]
 800e012:	6829      	ldr	r1, [r5, #0]
 800e014:	0606      	lsls	r6, r0, #24
 800e016:	f101 0304 	add.w	r3, r1, #4
 800e01a:	d50a      	bpl.n	800e032 <_printf_i+0xce>
 800e01c:	680e      	ldr	r6, [r1, #0]
 800e01e:	602b      	str	r3, [r5, #0]
 800e020:	2e00      	cmp	r6, #0
 800e022:	da03      	bge.n	800e02c <_printf_i+0xc8>
 800e024:	232d      	movs	r3, #45	; 0x2d
 800e026:	4276      	negs	r6, r6
 800e028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e02c:	485e      	ldr	r0, [pc, #376]	; (800e1a8 <_printf_i+0x244>)
 800e02e:	230a      	movs	r3, #10
 800e030:	e019      	b.n	800e066 <_printf_i+0x102>
 800e032:	680e      	ldr	r6, [r1, #0]
 800e034:	602b      	str	r3, [r5, #0]
 800e036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e03a:	bf18      	it	ne
 800e03c:	b236      	sxthne	r6, r6
 800e03e:	e7ef      	b.n	800e020 <_printf_i+0xbc>
 800e040:	682b      	ldr	r3, [r5, #0]
 800e042:	6820      	ldr	r0, [r4, #0]
 800e044:	1d19      	adds	r1, r3, #4
 800e046:	6029      	str	r1, [r5, #0]
 800e048:	0601      	lsls	r1, r0, #24
 800e04a:	d501      	bpl.n	800e050 <_printf_i+0xec>
 800e04c:	681e      	ldr	r6, [r3, #0]
 800e04e:	e002      	b.n	800e056 <_printf_i+0xf2>
 800e050:	0646      	lsls	r6, r0, #25
 800e052:	d5fb      	bpl.n	800e04c <_printf_i+0xe8>
 800e054:	881e      	ldrh	r6, [r3, #0]
 800e056:	4854      	ldr	r0, [pc, #336]	; (800e1a8 <_printf_i+0x244>)
 800e058:	2f6f      	cmp	r7, #111	; 0x6f
 800e05a:	bf0c      	ite	eq
 800e05c:	2308      	moveq	r3, #8
 800e05e:	230a      	movne	r3, #10
 800e060:	2100      	movs	r1, #0
 800e062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e066:	6865      	ldr	r5, [r4, #4]
 800e068:	60a5      	str	r5, [r4, #8]
 800e06a:	2d00      	cmp	r5, #0
 800e06c:	bfa2      	ittt	ge
 800e06e:	6821      	ldrge	r1, [r4, #0]
 800e070:	f021 0104 	bicge.w	r1, r1, #4
 800e074:	6021      	strge	r1, [r4, #0]
 800e076:	b90e      	cbnz	r6, 800e07c <_printf_i+0x118>
 800e078:	2d00      	cmp	r5, #0
 800e07a:	d04d      	beq.n	800e118 <_printf_i+0x1b4>
 800e07c:	4615      	mov	r5, r2
 800e07e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e082:	fb03 6711 	mls	r7, r3, r1, r6
 800e086:	5dc7      	ldrb	r7, [r0, r7]
 800e088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e08c:	4637      	mov	r7, r6
 800e08e:	42bb      	cmp	r3, r7
 800e090:	460e      	mov	r6, r1
 800e092:	d9f4      	bls.n	800e07e <_printf_i+0x11a>
 800e094:	2b08      	cmp	r3, #8
 800e096:	d10b      	bne.n	800e0b0 <_printf_i+0x14c>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	07de      	lsls	r6, r3, #31
 800e09c:	d508      	bpl.n	800e0b0 <_printf_i+0x14c>
 800e09e:	6923      	ldr	r3, [r4, #16]
 800e0a0:	6861      	ldr	r1, [r4, #4]
 800e0a2:	4299      	cmp	r1, r3
 800e0a4:	bfde      	ittt	le
 800e0a6:	2330      	movle	r3, #48	; 0x30
 800e0a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0b0:	1b52      	subs	r2, r2, r5
 800e0b2:	6122      	str	r2, [r4, #16]
 800e0b4:	f8cd a000 	str.w	sl, [sp]
 800e0b8:	464b      	mov	r3, r9
 800e0ba:	aa03      	add	r2, sp, #12
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4640      	mov	r0, r8
 800e0c0:	f7ff fee2 	bl	800de88 <_printf_common>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	d14c      	bne.n	800e162 <_printf_i+0x1fe>
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0cc:	b004      	add	sp, #16
 800e0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d2:	4835      	ldr	r0, [pc, #212]	; (800e1a8 <_printf_i+0x244>)
 800e0d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e0d8:	6829      	ldr	r1, [r5, #0]
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e0e0:	6029      	str	r1, [r5, #0]
 800e0e2:	061d      	lsls	r5, r3, #24
 800e0e4:	d514      	bpl.n	800e110 <_printf_i+0x1ac>
 800e0e6:	07df      	lsls	r7, r3, #31
 800e0e8:	bf44      	itt	mi
 800e0ea:	f043 0320 	orrmi.w	r3, r3, #32
 800e0ee:	6023      	strmi	r3, [r4, #0]
 800e0f0:	b91e      	cbnz	r6, 800e0fa <_printf_i+0x196>
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	f023 0320 	bic.w	r3, r3, #32
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	2310      	movs	r3, #16
 800e0fc:	e7b0      	b.n	800e060 <_printf_i+0xfc>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	f043 0320 	orr.w	r3, r3, #32
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	2378      	movs	r3, #120	; 0x78
 800e108:	4828      	ldr	r0, [pc, #160]	; (800e1ac <_printf_i+0x248>)
 800e10a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e10e:	e7e3      	b.n	800e0d8 <_printf_i+0x174>
 800e110:	0659      	lsls	r1, r3, #25
 800e112:	bf48      	it	mi
 800e114:	b2b6      	uxthmi	r6, r6
 800e116:	e7e6      	b.n	800e0e6 <_printf_i+0x182>
 800e118:	4615      	mov	r5, r2
 800e11a:	e7bb      	b.n	800e094 <_printf_i+0x130>
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	6826      	ldr	r6, [r4, #0]
 800e120:	6961      	ldr	r1, [r4, #20]
 800e122:	1d18      	adds	r0, r3, #4
 800e124:	6028      	str	r0, [r5, #0]
 800e126:	0635      	lsls	r5, r6, #24
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	d501      	bpl.n	800e130 <_printf_i+0x1cc>
 800e12c:	6019      	str	r1, [r3, #0]
 800e12e:	e002      	b.n	800e136 <_printf_i+0x1d2>
 800e130:	0670      	lsls	r0, r6, #25
 800e132:	d5fb      	bpl.n	800e12c <_printf_i+0x1c8>
 800e134:	8019      	strh	r1, [r3, #0]
 800e136:	2300      	movs	r3, #0
 800e138:	6123      	str	r3, [r4, #16]
 800e13a:	4615      	mov	r5, r2
 800e13c:	e7ba      	b.n	800e0b4 <_printf_i+0x150>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	1d1a      	adds	r2, r3, #4
 800e142:	602a      	str	r2, [r5, #0]
 800e144:	681d      	ldr	r5, [r3, #0]
 800e146:	6862      	ldr	r2, [r4, #4]
 800e148:	2100      	movs	r1, #0
 800e14a:	4628      	mov	r0, r5
 800e14c:	f7f2 f848 	bl	80001e0 <memchr>
 800e150:	b108      	cbz	r0, 800e156 <_printf_i+0x1f2>
 800e152:	1b40      	subs	r0, r0, r5
 800e154:	6060      	str	r0, [r4, #4]
 800e156:	6863      	ldr	r3, [r4, #4]
 800e158:	6123      	str	r3, [r4, #16]
 800e15a:	2300      	movs	r3, #0
 800e15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e160:	e7a8      	b.n	800e0b4 <_printf_i+0x150>
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	462a      	mov	r2, r5
 800e166:	4649      	mov	r1, r9
 800e168:	4640      	mov	r0, r8
 800e16a:	47d0      	blx	sl
 800e16c:	3001      	adds	r0, #1
 800e16e:	d0ab      	beq.n	800e0c8 <_printf_i+0x164>
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	079b      	lsls	r3, r3, #30
 800e174:	d413      	bmi.n	800e19e <_printf_i+0x23a>
 800e176:	68e0      	ldr	r0, [r4, #12]
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	4298      	cmp	r0, r3
 800e17c:	bfb8      	it	lt
 800e17e:	4618      	movlt	r0, r3
 800e180:	e7a4      	b.n	800e0cc <_printf_i+0x168>
 800e182:	2301      	movs	r3, #1
 800e184:	4632      	mov	r2, r6
 800e186:	4649      	mov	r1, r9
 800e188:	4640      	mov	r0, r8
 800e18a:	47d0      	blx	sl
 800e18c:	3001      	adds	r0, #1
 800e18e:	d09b      	beq.n	800e0c8 <_printf_i+0x164>
 800e190:	3501      	adds	r5, #1
 800e192:	68e3      	ldr	r3, [r4, #12]
 800e194:	9903      	ldr	r1, [sp, #12]
 800e196:	1a5b      	subs	r3, r3, r1
 800e198:	42ab      	cmp	r3, r5
 800e19a:	dcf2      	bgt.n	800e182 <_printf_i+0x21e>
 800e19c:	e7eb      	b.n	800e176 <_printf_i+0x212>
 800e19e:	2500      	movs	r5, #0
 800e1a0:	f104 0619 	add.w	r6, r4, #25
 800e1a4:	e7f5      	b.n	800e192 <_printf_i+0x22e>
 800e1a6:	bf00      	nop
 800e1a8:	08010dbb 	.word	0x08010dbb
 800e1ac:	08010dcc 	.word	0x08010dcc

0800e1b0 <iprintf>:
 800e1b0:	b40f      	push	{r0, r1, r2, r3}
 800e1b2:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <iprintf+0x2c>)
 800e1b4:	b513      	push	{r0, r1, r4, lr}
 800e1b6:	681c      	ldr	r4, [r3, #0]
 800e1b8:	b124      	cbz	r4, 800e1c4 <iprintf+0x14>
 800e1ba:	69a3      	ldr	r3, [r4, #24]
 800e1bc:	b913      	cbnz	r3, 800e1c4 <iprintf+0x14>
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f001 f9da 	bl	800f578 <__sinit>
 800e1c4:	ab05      	add	r3, sp, #20
 800e1c6:	9a04      	ldr	r2, [sp, #16]
 800e1c8:	68a1      	ldr	r1, [r4, #8]
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f7ff fa55 	bl	800d67c <_vfiprintf_r>
 800e1d2:	b002      	add	sp, #8
 800e1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1d8:	b004      	add	sp, #16
 800e1da:	4770      	bx	lr
 800e1dc:	20000230 	.word	0x20000230

0800e1e0 <_puts_r>:
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	460e      	mov	r6, r1
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	b118      	cbz	r0, 800e1f0 <_puts_r+0x10>
 800e1e8:	6983      	ldr	r3, [r0, #24]
 800e1ea:	b90b      	cbnz	r3, 800e1f0 <_puts_r+0x10>
 800e1ec:	f001 f9c4 	bl	800f578 <__sinit>
 800e1f0:	69ab      	ldr	r3, [r5, #24]
 800e1f2:	68ac      	ldr	r4, [r5, #8]
 800e1f4:	b913      	cbnz	r3, 800e1fc <_puts_r+0x1c>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f001 f9be 	bl	800f578 <__sinit>
 800e1fc:	4b2c      	ldr	r3, [pc, #176]	; (800e2b0 <_puts_r+0xd0>)
 800e1fe:	429c      	cmp	r4, r3
 800e200:	d120      	bne.n	800e244 <_puts_r+0x64>
 800e202:	686c      	ldr	r4, [r5, #4]
 800e204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e206:	07db      	lsls	r3, r3, #31
 800e208:	d405      	bmi.n	800e216 <_puts_r+0x36>
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	0598      	lsls	r0, r3, #22
 800e20e:	d402      	bmi.n	800e216 <_puts_r+0x36>
 800e210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e212:	f001 fa54 	bl	800f6be <__retarget_lock_acquire_recursive>
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	0719      	lsls	r1, r3, #28
 800e21a:	d51d      	bpl.n	800e258 <_puts_r+0x78>
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	b1db      	cbz	r3, 800e258 <_puts_r+0x78>
 800e220:	3e01      	subs	r6, #1
 800e222:	68a3      	ldr	r3, [r4, #8]
 800e224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e228:	3b01      	subs	r3, #1
 800e22a:	60a3      	str	r3, [r4, #8]
 800e22c:	bb39      	cbnz	r1, 800e27e <_puts_r+0x9e>
 800e22e:	2b00      	cmp	r3, #0
 800e230:	da38      	bge.n	800e2a4 <_puts_r+0xc4>
 800e232:	4622      	mov	r2, r4
 800e234:	210a      	movs	r1, #10
 800e236:	4628      	mov	r0, r5
 800e238:	f000 f942 	bl	800e4c0 <__swbuf_r>
 800e23c:	3001      	adds	r0, #1
 800e23e:	d011      	beq.n	800e264 <_puts_r+0x84>
 800e240:	250a      	movs	r5, #10
 800e242:	e011      	b.n	800e268 <_puts_r+0x88>
 800e244:	4b1b      	ldr	r3, [pc, #108]	; (800e2b4 <_puts_r+0xd4>)
 800e246:	429c      	cmp	r4, r3
 800e248:	d101      	bne.n	800e24e <_puts_r+0x6e>
 800e24a:	68ac      	ldr	r4, [r5, #8]
 800e24c:	e7da      	b.n	800e204 <_puts_r+0x24>
 800e24e:	4b1a      	ldr	r3, [pc, #104]	; (800e2b8 <_puts_r+0xd8>)
 800e250:	429c      	cmp	r4, r3
 800e252:	bf08      	it	eq
 800e254:	68ec      	ldreq	r4, [r5, #12]
 800e256:	e7d5      	b.n	800e204 <_puts_r+0x24>
 800e258:	4621      	mov	r1, r4
 800e25a:	4628      	mov	r0, r5
 800e25c:	f000 f982 	bl	800e564 <__swsetup_r>
 800e260:	2800      	cmp	r0, #0
 800e262:	d0dd      	beq.n	800e220 <_puts_r+0x40>
 800e264:	f04f 35ff 	mov.w	r5, #4294967295
 800e268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e26a:	07da      	lsls	r2, r3, #31
 800e26c:	d405      	bmi.n	800e27a <_puts_r+0x9a>
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	059b      	lsls	r3, r3, #22
 800e272:	d402      	bmi.n	800e27a <_puts_r+0x9a>
 800e274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e276:	f001 fa23 	bl	800f6c0 <__retarget_lock_release_recursive>
 800e27a:	4628      	mov	r0, r5
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	2b00      	cmp	r3, #0
 800e280:	da04      	bge.n	800e28c <_puts_r+0xac>
 800e282:	69a2      	ldr	r2, [r4, #24]
 800e284:	429a      	cmp	r2, r3
 800e286:	dc06      	bgt.n	800e296 <_puts_r+0xb6>
 800e288:	290a      	cmp	r1, #10
 800e28a:	d004      	beq.n	800e296 <_puts_r+0xb6>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	6022      	str	r2, [r4, #0]
 800e292:	7019      	strb	r1, [r3, #0]
 800e294:	e7c5      	b.n	800e222 <_puts_r+0x42>
 800e296:	4622      	mov	r2, r4
 800e298:	4628      	mov	r0, r5
 800e29a:	f000 f911 	bl	800e4c0 <__swbuf_r>
 800e29e:	3001      	adds	r0, #1
 800e2a0:	d1bf      	bne.n	800e222 <_puts_r+0x42>
 800e2a2:	e7df      	b.n	800e264 <_puts_r+0x84>
 800e2a4:	6823      	ldr	r3, [r4, #0]
 800e2a6:	250a      	movs	r5, #10
 800e2a8:	1c5a      	adds	r2, r3, #1
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	701d      	strb	r5, [r3, #0]
 800e2ae:	e7db      	b.n	800e268 <_puts_r+0x88>
 800e2b0:	08010f90 	.word	0x08010f90
 800e2b4:	08010fb0 	.word	0x08010fb0
 800e2b8:	08010f70 	.word	0x08010f70

0800e2bc <puts>:
 800e2bc:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <puts+0xc>)
 800e2be:	4601      	mov	r1, r0
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f7ff bf8d 	b.w	800e1e0 <_puts_r>
 800e2c6:	bf00      	nop
 800e2c8:	20000230 	.word	0x20000230

0800e2cc <sniprintf>:
 800e2cc:	b40c      	push	{r2, r3}
 800e2ce:	b530      	push	{r4, r5, lr}
 800e2d0:	4b17      	ldr	r3, [pc, #92]	; (800e330 <sniprintf+0x64>)
 800e2d2:	1e0c      	subs	r4, r1, #0
 800e2d4:	681d      	ldr	r5, [r3, #0]
 800e2d6:	b09d      	sub	sp, #116	; 0x74
 800e2d8:	da08      	bge.n	800e2ec <sniprintf+0x20>
 800e2da:	238b      	movs	r3, #139	; 0x8b
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e2:	b01d      	add	sp, #116	; 0x74
 800e2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2e8:	b002      	add	sp, #8
 800e2ea:	4770      	bx	lr
 800e2ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e2f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e2f4:	bf14      	ite	ne
 800e2f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e2fa:	4623      	moveq	r3, r4
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	9307      	str	r3, [sp, #28]
 800e300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e304:	9002      	str	r0, [sp, #8]
 800e306:	9006      	str	r0, [sp, #24]
 800e308:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e30c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e30e:	ab21      	add	r3, sp, #132	; 0x84
 800e310:	a902      	add	r1, sp, #8
 800e312:	4628      	mov	r0, r5
 800e314:	9301      	str	r3, [sp, #4]
 800e316:	f001 ff5f 	bl	80101d8 <_svfiprintf_r>
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	bfbc      	itt	lt
 800e31e:	238b      	movlt	r3, #139	; 0x8b
 800e320:	602b      	strlt	r3, [r5, #0]
 800e322:	2c00      	cmp	r4, #0
 800e324:	d0dd      	beq.n	800e2e2 <sniprintf+0x16>
 800e326:	9b02      	ldr	r3, [sp, #8]
 800e328:	2200      	movs	r2, #0
 800e32a:	701a      	strb	r2, [r3, #0]
 800e32c:	e7d9      	b.n	800e2e2 <sniprintf+0x16>
 800e32e:	bf00      	nop
 800e330:	20000230 	.word	0x20000230

0800e334 <_strtol_l.constprop.0>:
 800e334:	2b01      	cmp	r3, #1
 800e336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e33a:	d001      	beq.n	800e340 <_strtol_l.constprop.0+0xc>
 800e33c:	2b24      	cmp	r3, #36	; 0x24
 800e33e:	d906      	bls.n	800e34e <_strtol_l.constprop.0+0x1a>
 800e340:	f7ff f920 	bl	800d584 <__errno>
 800e344:	2316      	movs	r3, #22
 800e346:	6003      	str	r3, [r0, #0]
 800e348:	2000      	movs	r0, #0
 800e34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e434 <_strtol_l.constprop.0+0x100>
 800e352:	460d      	mov	r5, r1
 800e354:	462e      	mov	r6, r5
 800e356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e35e:	f017 0708 	ands.w	r7, r7, #8
 800e362:	d1f7      	bne.n	800e354 <_strtol_l.constprop.0+0x20>
 800e364:	2c2d      	cmp	r4, #45	; 0x2d
 800e366:	d132      	bne.n	800e3ce <_strtol_l.constprop.0+0x9a>
 800e368:	782c      	ldrb	r4, [r5, #0]
 800e36a:	2701      	movs	r7, #1
 800e36c:	1cb5      	adds	r5, r6, #2
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d05b      	beq.n	800e42a <_strtol_l.constprop.0+0xf6>
 800e372:	2b10      	cmp	r3, #16
 800e374:	d109      	bne.n	800e38a <_strtol_l.constprop.0+0x56>
 800e376:	2c30      	cmp	r4, #48	; 0x30
 800e378:	d107      	bne.n	800e38a <_strtol_l.constprop.0+0x56>
 800e37a:	782c      	ldrb	r4, [r5, #0]
 800e37c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e380:	2c58      	cmp	r4, #88	; 0x58
 800e382:	d14d      	bne.n	800e420 <_strtol_l.constprop.0+0xec>
 800e384:	786c      	ldrb	r4, [r5, #1]
 800e386:	2310      	movs	r3, #16
 800e388:	3502      	adds	r5, #2
 800e38a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e38e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e392:	f04f 0c00 	mov.w	ip, #0
 800e396:	fbb8 f9f3 	udiv	r9, r8, r3
 800e39a:	4666      	mov	r6, ip
 800e39c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e3a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e3a4:	f1be 0f09 	cmp.w	lr, #9
 800e3a8:	d816      	bhi.n	800e3d8 <_strtol_l.constprop.0+0xa4>
 800e3aa:	4674      	mov	r4, lr
 800e3ac:	42a3      	cmp	r3, r4
 800e3ae:	dd24      	ble.n	800e3fa <_strtol_l.constprop.0+0xc6>
 800e3b0:	f1bc 0f00 	cmp.w	ip, #0
 800e3b4:	db1e      	blt.n	800e3f4 <_strtol_l.constprop.0+0xc0>
 800e3b6:	45b1      	cmp	r9, r6
 800e3b8:	d31c      	bcc.n	800e3f4 <_strtol_l.constprop.0+0xc0>
 800e3ba:	d101      	bne.n	800e3c0 <_strtol_l.constprop.0+0x8c>
 800e3bc:	45a2      	cmp	sl, r4
 800e3be:	db19      	blt.n	800e3f4 <_strtol_l.constprop.0+0xc0>
 800e3c0:	fb06 4603 	mla	r6, r6, r3, r4
 800e3c4:	f04f 0c01 	mov.w	ip, #1
 800e3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3cc:	e7e8      	b.n	800e3a0 <_strtol_l.constprop.0+0x6c>
 800e3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800e3d0:	bf04      	itt	eq
 800e3d2:	782c      	ldrbeq	r4, [r5, #0]
 800e3d4:	1cb5      	addeq	r5, r6, #2
 800e3d6:	e7ca      	b.n	800e36e <_strtol_l.constprop.0+0x3a>
 800e3d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e3dc:	f1be 0f19 	cmp.w	lr, #25
 800e3e0:	d801      	bhi.n	800e3e6 <_strtol_l.constprop.0+0xb2>
 800e3e2:	3c37      	subs	r4, #55	; 0x37
 800e3e4:	e7e2      	b.n	800e3ac <_strtol_l.constprop.0+0x78>
 800e3e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e3ea:	f1be 0f19 	cmp.w	lr, #25
 800e3ee:	d804      	bhi.n	800e3fa <_strtol_l.constprop.0+0xc6>
 800e3f0:	3c57      	subs	r4, #87	; 0x57
 800e3f2:	e7db      	b.n	800e3ac <_strtol_l.constprop.0+0x78>
 800e3f4:	f04f 3cff 	mov.w	ip, #4294967295
 800e3f8:	e7e6      	b.n	800e3c8 <_strtol_l.constprop.0+0x94>
 800e3fa:	f1bc 0f00 	cmp.w	ip, #0
 800e3fe:	da05      	bge.n	800e40c <_strtol_l.constprop.0+0xd8>
 800e400:	2322      	movs	r3, #34	; 0x22
 800e402:	6003      	str	r3, [r0, #0]
 800e404:	4646      	mov	r6, r8
 800e406:	b942      	cbnz	r2, 800e41a <_strtol_l.constprop.0+0xe6>
 800e408:	4630      	mov	r0, r6
 800e40a:	e79e      	b.n	800e34a <_strtol_l.constprop.0+0x16>
 800e40c:	b107      	cbz	r7, 800e410 <_strtol_l.constprop.0+0xdc>
 800e40e:	4276      	negs	r6, r6
 800e410:	2a00      	cmp	r2, #0
 800e412:	d0f9      	beq.n	800e408 <_strtol_l.constprop.0+0xd4>
 800e414:	f1bc 0f00 	cmp.w	ip, #0
 800e418:	d000      	beq.n	800e41c <_strtol_l.constprop.0+0xe8>
 800e41a:	1e69      	subs	r1, r5, #1
 800e41c:	6011      	str	r1, [r2, #0]
 800e41e:	e7f3      	b.n	800e408 <_strtol_l.constprop.0+0xd4>
 800e420:	2430      	movs	r4, #48	; 0x30
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1b1      	bne.n	800e38a <_strtol_l.constprop.0+0x56>
 800e426:	2308      	movs	r3, #8
 800e428:	e7af      	b.n	800e38a <_strtol_l.constprop.0+0x56>
 800e42a:	2c30      	cmp	r4, #48	; 0x30
 800e42c:	d0a5      	beq.n	800e37a <_strtol_l.constprop.0+0x46>
 800e42e:	230a      	movs	r3, #10
 800e430:	e7ab      	b.n	800e38a <_strtol_l.constprop.0+0x56>
 800e432:	bf00      	nop
 800e434:	08010dde 	.word	0x08010dde

0800e438 <strtol>:
 800e438:	4613      	mov	r3, r2
 800e43a:	460a      	mov	r2, r1
 800e43c:	4601      	mov	r1, r0
 800e43e:	4802      	ldr	r0, [pc, #8]	; (800e448 <strtol+0x10>)
 800e440:	6800      	ldr	r0, [r0, #0]
 800e442:	f7ff bf77 	b.w	800e334 <_strtol_l.constprop.0>
 800e446:	bf00      	nop
 800e448:	20000230 	.word	0x20000230

0800e44c <_vsniprintf_r>:
 800e44c:	b530      	push	{r4, r5, lr}
 800e44e:	4614      	mov	r4, r2
 800e450:	2c00      	cmp	r4, #0
 800e452:	b09b      	sub	sp, #108	; 0x6c
 800e454:	4605      	mov	r5, r0
 800e456:	461a      	mov	r2, r3
 800e458:	da05      	bge.n	800e466 <_vsniprintf_r+0x1a>
 800e45a:	238b      	movs	r3, #139	; 0x8b
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	f04f 30ff 	mov.w	r0, #4294967295
 800e462:	b01b      	add	sp, #108	; 0x6c
 800e464:	bd30      	pop	{r4, r5, pc}
 800e466:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e46a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e46e:	bf14      	ite	ne
 800e470:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e474:	4623      	moveq	r3, r4
 800e476:	9302      	str	r3, [sp, #8]
 800e478:	9305      	str	r3, [sp, #20]
 800e47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e47e:	9100      	str	r1, [sp, #0]
 800e480:	9104      	str	r1, [sp, #16]
 800e482:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e486:	4669      	mov	r1, sp
 800e488:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e48a:	f001 fea5 	bl	80101d8 <_svfiprintf_r>
 800e48e:	1c43      	adds	r3, r0, #1
 800e490:	bfbc      	itt	lt
 800e492:	238b      	movlt	r3, #139	; 0x8b
 800e494:	602b      	strlt	r3, [r5, #0]
 800e496:	2c00      	cmp	r4, #0
 800e498:	d0e3      	beq.n	800e462 <_vsniprintf_r+0x16>
 800e49a:	9b00      	ldr	r3, [sp, #0]
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]
 800e4a0:	e7df      	b.n	800e462 <_vsniprintf_r+0x16>
	...

0800e4a4 <vsniprintf>:
 800e4a4:	b507      	push	{r0, r1, r2, lr}
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	460a      	mov	r2, r1
 800e4ac:	4601      	mov	r1, r0
 800e4ae:	4803      	ldr	r0, [pc, #12]	; (800e4bc <vsniprintf+0x18>)
 800e4b0:	6800      	ldr	r0, [r0, #0]
 800e4b2:	f7ff ffcb 	bl	800e44c <_vsniprintf_r>
 800e4b6:	b003      	add	sp, #12
 800e4b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4bc:	20000230 	.word	0x20000230

0800e4c0 <__swbuf_r>:
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c2:	460e      	mov	r6, r1
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	b118      	cbz	r0, 800e4d2 <__swbuf_r+0x12>
 800e4ca:	6983      	ldr	r3, [r0, #24]
 800e4cc:	b90b      	cbnz	r3, 800e4d2 <__swbuf_r+0x12>
 800e4ce:	f001 f853 	bl	800f578 <__sinit>
 800e4d2:	4b21      	ldr	r3, [pc, #132]	; (800e558 <__swbuf_r+0x98>)
 800e4d4:	429c      	cmp	r4, r3
 800e4d6:	d12b      	bne.n	800e530 <__swbuf_r+0x70>
 800e4d8:	686c      	ldr	r4, [r5, #4]
 800e4da:	69a3      	ldr	r3, [r4, #24]
 800e4dc:	60a3      	str	r3, [r4, #8]
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	071a      	lsls	r2, r3, #28
 800e4e2:	d52f      	bpl.n	800e544 <__swbuf_r+0x84>
 800e4e4:	6923      	ldr	r3, [r4, #16]
 800e4e6:	b36b      	cbz	r3, 800e544 <__swbuf_r+0x84>
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	1ac0      	subs	r0, r0, r3
 800e4ee:	6963      	ldr	r3, [r4, #20]
 800e4f0:	b2f6      	uxtb	r6, r6
 800e4f2:	4283      	cmp	r3, r0
 800e4f4:	4637      	mov	r7, r6
 800e4f6:	dc04      	bgt.n	800e502 <__swbuf_r+0x42>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f000 ffa8 	bl	800f450 <_fflush_r>
 800e500:	bb30      	cbnz	r0, 800e550 <__swbuf_r+0x90>
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	3b01      	subs	r3, #1
 800e506:	60a3      	str	r3, [r4, #8]
 800e508:	6823      	ldr	r3, [r4, #0]
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	6022      	str	r2, [r4, #0]
 800e50e:	701e      	strb	r6, [r3, #0]
 800e510:	6963      	ldr	r3, [r4, #20]
 800e512:	3001      	adds	r0, #1
 800e514:	4283      	cmp	r3, r0
 800e516:	d004      	beq.n	800e522 <__swbuf_r+0x62>
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	07db      	lsls	r3, r3, #31
 800e51c:	d506      	bpl.n	800e52c <__swbuf_r+0x6c>
 800e51e:	2e0a      	cmp	r6, #10
 800e520:	d104      	bne.n	800e52c <__swbuf_r+0x6c>
 800e522:	4621      	mov	r1, r4
 800e524:	4628      	mov	r0, r5
 800e526:	f000 ff93 	bl	800f450 <_fflush_r>
 800e52a:	b988      	cbnz	r0, 800e550 <__swbuf_r+0x90>
 800e52c:	4638      	mov	r0, r7
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e530:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <__swbuf_r+0x9c>)
 800e532:	429c      	cmp	r4, r3
 800e534:	d101      	bne.n	800e53a <__swbuf_r+0x7a>
 800e536:	68ac      	ldr	r4, [r5, #8]
 800e538:	e7cf      	b.n	800e4da <__swbuf_r+0x1a>
 800e53a:	4b09      	ldr	r3, [pc, #36]	; (800e560 <__swbuf_r+0xa0>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	bf08      	it	eq
 800e540:	68ec      	ldreq	r4, [r5, #12]
 800e542:	e7ca      	b.n	800e4da <__swbuf_r+0x1a>
 800e544:	4621      	mov	r1, r4
 800e546:	4628      	mov	r0, r5
 800e548:	f000 f80c 	bl	800e564 <__swsetup_r>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d0cb      	beq.n	800e4e8 <__swbuf_r+0x28>
 800e550:	f04f 37ff 	mov.w	r7, #4294967295
 800e554:	e7ea      	b.n	800e52c <__swbuf_r+0x6c>
 800e556:	bf00      	nop
 800e558:	08010f90 	.word	0x08010f90
 800e55c:	08010fb0 	.word	0x08010fb0
 800e560:	08010f70 	.word	0x08010f70

0800e564 <__swsetup_r>:
 800e564:	4b32      	ldr	r3, [pc, #200]	; (800e630 <__swsetup_r+0xcc>)
 800e566:	b570      	push	{r4, r5, r6, lr}
 800e568:	681d      	ldr	r5, [r3, #0]
 800e56a:	4606      	mov	r6, r0
 800e56c:	460c      	mov	r4, r1
 800e56e:	b125      	cbz	r5, 800e57a <__swsetup_r+0x16>
 800e570:	69ab      	ldr	r3, [r5, #24]
 800e572:	b913      	cbnz	r3, 800e57a <__swsetup_r+0x16>
 800e574:	4628      	mov	r0, r5
 800e576:	f000 ffff 	bl	800f578 <__sinit>
 800e57a:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <__swsetup_r+0xd0>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	d10f      	bne.n	800e5a0 <__swsetup_r+0x3c>
 800e580:	686c      	ldr	r4, [r5, #4]
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e588:	0719      	lsls	r1, r3, #28
 800e58a:	d42c      	bmi.n	800e5e6 <__swsetup_r+0x82>
 800e58c:	06dd      	lsls	r5, r3, #27
 800e58e:	d411      	bmi.n	800e5b4 <__swsetup_r+0x50>
 800e590:	2309      	movs	r3, #9
 800e592:	6033      	str	r3, [r6, #0]
 800e594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e598:	81a3      	strh	r3, [r4, #12]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	e03e      	b.n	800e61e <__swsetup_r+0xba>
 800e5a0:	4b25      	ldr	r3, [pc, #148]	; (800e638 <__swsetup_r+0xd4>)
 800e5a2:	429c      	cmp	r4, r3
 800e5a4:	d101      	bne.n	800e5aa <__swsetup_r+0x46>
 800e5a6:	68ac      	ldr	r4, [r5, #8]
 800e5a8:	e7eb      	b.n	800e582 <__swsetup_r+0x1e>
 800e5aa:	4b24      	ldr	r3, [pc, #144]	; (800e63c <__swsetup_r+0xd8>)
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	bf08      	it	eq
 800e5b0:	68ec      	ldreq	r4, [r5, #12]
 800e5b2:	e7e6      	b.n	800e582 <__swsetup_r+0x1e>
 800e5b4:	0758      	lsls	r0, r3, #29
 800e5b6:	d512      	bpl.n	800e5de <__swsetup_r+0x7a>
 800e5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5ba:	b141      	cbz	r1, 800e5ce <__swsetup_r+0x6a>
 800e5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5c0:	4299      	cmp	r1, r3
 800e5c2:	d002      	beq.n	800e5ca <__swsetup_r+0x66>
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f001 fc9d 	bl	800ff04 <_free_r>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5d4:	81a3      	strh	r3, [r4, #12]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6063      	str	r3, [r4, #4]
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	f043 0308 	orr.w	r3, r3, #8
 800e5e4:	81a3      	strh	r3, [r4, #12]
 800e5e6:	6923      	ldr	r3, [r4, #16]
 800e5e8:	b94b      	cbnz	r3, 800e5fe <__swsetup_r+0x9a>
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5f4:	d003      	beq.n	800e5fe <__swsetup_r+0x9a>
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f001 f887 	bl	800f70c <__smakebuf_r>
 800e5fe:	89a0      	ldrh	r0, [r4, #12]
 800e600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e604:	f010 0301 	ands.w	r3, r0, #1
 800e608:	d00a      	beq.n	800e620 <__swsetup_r+0xbc>
 800e60a:	2300      	movs	r3, #0
 800e60c:	60a3      	str	r3, [r4, #8]
 800e60e:	6963      	ldr	r3, [r4, #20]
 800e610:	425b      	negs	r3, r3
 800e612:	61a3      	str	r3, [r4, #24]
 800e614:	6923      	ldr	r3, [r4, #16]
 800e616:	b943      	cbnz	r3, 800e62a <__swsetup_r+0xc6>
 800e618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e61c:	d1ba      	bne.n	800e594 <__swsetup_r+0x30>
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	0781      	lsls	r1, r0, #30
 800e622:	bf58      	it	pl
 800e624:	6963      	ldrpl	r3, [r4, #20]
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	e7f4      	b.n	800e614 <__swsetup_r+0xb0>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e7f7      	b.n	800e61e <__swsetup_r+0xba>
 800e62e:	bf00      	nop
 800e630:	20000230 	.word	0x20000230
 800e634:	08010f90 	.word	0x08010f90
 800e638:	08010fb0 	.word	0x08010fb0
 800e63c:	08010f70 	.word	0x08010f70

0800e640 <abort>:
 800e640:	b508      	push	{r3, lr}
 800e642:	2006      	movs	r0, #6
 800e644:	f001 ff00 	bl	8010448 <raise>
 800e648:	2001      	movs	r0, #1
 800e64a:	f7f5 fdd1 	bl	80041f0 <_exit>

0800e64e <quorem>:
 800e64e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e652:	6903      	ldr	r3, [r0, #16]
 800e654:	690c      	ldr	r4, [r1, #16]
 800e656:	42a3      	cmp	r3, r4
 800e658:	4607      	mov	r7, r0
 800e65a:	f2c0 8081 	blt.w	800e760 <quorem+0x112>
 800e65e:	3c01      	subs	r4, #1
 800e660:	f101 0814 	add.w	r8, r1, #20
 800e664:	f100 0514 	add.w	r5, r0, #20
 800e668:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e66c:	9301      	str	r3, [sp, #4]
 800e66e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e676:	3301      	adds	r3, #1
 800e678:	429a      	cmp	r2, r3
 800e67a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e67e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e682:	fbb2 f6f3 	udiv	r6, r2, r3
 800e686:	d331      	bcc.n	800e6ec <quorem+0x9e>
 800e688:	f04f 0e00 	mov.w	lr, #0
 800e68c:	4640      	mov	r0, r8
 800e68e:	46ac      	mov	ip, r5
 800e690:	46f2      	mov	sl, lr
 800e692:	f850 2b04 	ldr.w	r2, [r0], #4
 800e696:	b293      	uxth	r3, r2
 800e698:	fb06 e303 	mla	r3, r6, r3, lr
 800e69c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	ebaa 0303 	sub.w	r3, sl, r3
 800e6a6:	f8dc a000 	ldr.w	sl, [ip]
 800e6aa:	0c12      	lsrs	r2, r2, #16
 800e6ac:	fa13 f38a 	uxtah	r3, r3, sl
 800e6b0:	fb06 e202 	mla	r2, r6, r2, lr
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	9b00      	ldr	r3, [sp, #0]
 800e6b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6bc:	b292      	uxth	r2, r2
 800e6be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e6c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6c6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6ca:	4581      	cmp	r9, r0
 800e6cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6d0:	f84c 3b04 	str.w	r3, [ip], #4
 800e6d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e6d8:	d2db      	bcs.n	800e692 <quorem+0x44>
 800e6da:	f855 300b 	ldr.w	r3, [r5, fp]
 800e6de:	b92b      	cbnz	r3, 800e6ec <quorem+0x9e>
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	3b04      	subs	r3, #4
 800e6e4:	429d      	cmp	r5, r3
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	d32e      	bcc.n	800e748 <quorem+0xfa>
 800e6ea:	613c      	str	r4, [r7, #16]
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f001 faf1 	bl	800fcd4 <__mcmp>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	db24      	blt.n	800e740 <quorem+0xf2>
 800e6f6:	3601      	adds	r6, #1
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f04f 0c00 	mov.w	ip, #0
 800e6fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800e702:	f8d0 e000 	ldr.w	lr, [r0]
 800e706:	b293      	uxth	r3, r2
 800e708:	ebac 0303 	sub.w	r3, ip, r3
 800e70c:	0c12      	lsrs	r2, r2, #16
 800e70e:	fa13 f38e 	uxtah	r3, r3, lr
 800e712:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e720:	45c1      	cmp	r9, r8
 800e722:	f840 3b04 	str.w	r3, [r0], #4
 800e726:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e72a:	d2e8      	bcs.n	800e6fe <quorem+0xb0>
 800e72c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e734:	b922      	cbnz	r2, 800e740 <quorem+0xf2>
 800e736:	3b04      	subs	r3, #4
 800e738:	429d      	cmp	r5, r3
 800e73a:	461a      	mov	r2, r3
 800e73c:	d30a      	bcc.n	800e754 <quorem+0x106>
 800e73e:	613c      	str	r4, [r7, #16]
 800e740:	4630      	mov	r0, r6
 800e742:	b003      	add	sp, #12
 800e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e748:	6812      	ldr	r2, [r2, #0]
 800e74a:	3b04      	subs	r3, #4
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	d1cc      	bne.n	800e6ea <quorem+0x9c>
 800e750:	3c01      	subs	r4, #1
 800e752:	e7c7      	b.n	800e6e4 <quorem+0x96>
 800e754:	6812      	ldr	r2, [r2, #0]
 800e756:	3b04      	subs	r3, #4
 800e758:	2a00      	cmp	r2, #0
 800e75a:	d1f0      	bne.n	800e73e <quorem+0xf0>
 800e75c:	3c01      	subs	r4, #1
 800e75e:	e7eb      	b.n	800e738 <quorem+0xea>
 800e760:	2000      	movs	r0, #0
 800e762:	e7ee      	b.n	800e742 <quorem+0xf4>
 800e764:	0000      	movs	r0, r0
	...

0800e768 <_dtoa_r>:
 800e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	ed2d 8b04 	vpush	{d8-d9}
 800e770:	ec57 6b10 	vmov	r6, r7, d0
 800e774:	b093      	sub	sp, #76	; 0x4c
 800e776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e77c:	9106      	str	r1, [sp, #24]
 800e77e:	ee10 aa10 	vmov	sl, s0
 800e782:	4604      	mov	r4, r0
 800e784:	9209      	str	r2, [sp, #36]	; 0x24
 800e786:	930c      	str	r3, [sp, #48]	; 0x30
 800e788:	46bb      	mov	fp, r7
 800e78a:	b975      	cbnz	r5, 800e7aa <_dtoa_r+0x42>
 800e78c:	2010      	movs	r0, #16
 800e78e:	f000 fffd 	bl	800f78c <malloc>
 800e792:	4602      	mov	r2, r0
 800e794:	6260      	str	r0, [r4, #36]	; 0x24
 800e796:	b920      	cbnz	r0, 800e7a2 <_dtoa_r+0x3a>
 800e798:	4ba7      	ldr	r3, [pc, #668]	; (800ea38 <_dtoa_r+0x2d0>)
 800e79a:	21ea      	movs	r1, #234	; 0xea
 800e79c:	48a7      	ldr	r0, [pc, #668]	; (800ea3c <_dtoa_r+0x2d4>)
 800e79e:	f7fe fecf 	bl	800d540 <__assert_func>
 800e7a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e7a6:	6005      	str	r5, [r0, #0]
 800e7a8:	60c5      	str	r5, [r0, #12]
 800e7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ac:	6819      	ldr	r1, [r3, #0]
 800e7ae:	b151      	cbz	r1, 800e7c6 <_dtoa_r+0x5e>
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	604a      	str	r2, [r1, #4]
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	4093      	lsls	r3, r2
 800e7b8:	608b      	str	r3, [r1, #8]
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f001 f848 	bl	800f850 <_Bfree>
 800e7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	1e3b      	subs	r3, r7, #0
 800e7c8:	bfaa      	itet	ge
 800e7ca:	2300      	movge	r3, #0
 800e7cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e7d0:	f8c8 3000 	strge.w	r3, [r8]
 800e7d4:	4b9a      	ldr	r3, [pc, #616]	; (800ea40 <_dtoa_r+0x2d8>)
 800e7d6:	bfbc      	itt	lt
 800e7d8:	2201      	movlt	r2, #1
 800e7da:	f8c8 2000 	strlt.w	r2, [r8]
 800e7de:	ea33 030b 	bics.w	r3, r3, fp
 800e7e2:	d11b      	bne.n	800e81c <_dtoa_r+0xb4>
 800e7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e7e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7f0:	4333      	orrs	r3, r6
 800e7f2:	f000 8592 	beq.w	800f31a <_dtoa_r+0xbb2>
 800e7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7f8:	b963      	cbnz	r3, 800e814 <_dtoa_r+0xac>
 800e7fa:	4b92      	ldr	r3, [pc, #584]	; (800ea44 <_dtoa_r+0x2dc>)
 800e7fc:	e022      	b.n	800e844 <_dtoa_r+0xdc>
 800e7fe:	4b92      	ldr	r3, [pc, #584]	; (800ea48 <_dtoa_r+0x2e0>)
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	3308      	adds	r3, #8
 800e804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e806:	6013      	str	r3, [r2, #0]
 800e808:	9801      	ldr	r0, [sp, #4]
 800e80a:	b013      	add	sp, #76	; 0x4c
 800e80c:	ecbd 8b04 	vpop	{d8-d9}
 800e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e814:	4b8b      	ldr	r3, [pc, #556]	; (800ea44 <_dtoa_r+0x2dc>)
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	3303      	adds	r3, #3
 800e81a:	e7f3      	b.n	800e804 <_dtoa_r+0x9c>
 800e81c:	2200      	movs	r2, #0
 800e81e:	2300      	movs	r3, #0
 800e820:	4650      	mov	r0, sl
 800e822:	4659      	mov	r1, fp
 800e824:	f7f2 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800e828:	ec4b ab19 	vmov	d9, sl, fp
 800e82c:	4680      	mov	r8, r0
 800e82e:	b158      	cbz	r0, 800e848 <_dtoa_r+0xe0>
 800e830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e832:	2301      	movs	r3, #1
 800e834:	6013      	str	r3, [r2, #0]
 800e836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 856b 	beq.w	800f314 <_dtoa_r+0xbac>
 800e83e:	4883      	ldr	r0, [pc, #524]	; (800ea4c <_dtoa_r+0x2e4>)
 800e840:	6018      	str	r0, [r3, #0]
 800e842:	1e43      	subs	r3, r0, #1
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	e7df      	b.n	800e808 <_dtoa_r+0xa0>
 800e848:	ec4b ab10 	vmov	d0, sl, fp
 800e84c:	aa10      	add	r2, sp, #64	; 0x40
 800e84e:	a911      	add	r1, sp, #68	; 0x44
 800e850:	4620      	mov	r0, r4
 800e852:	f001 fae5 	bl	800fe20 <__d2b>
 800e856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e85a:	ee08 0a10 	vmov	s16, r0
 800e85e:	2d00      	cmp	r5, #0
 800e860:	f000 8084 	beq.w	800e96c <_dtoa_r+0x204>
 800e864:	ee19 3a90 	vmov	r3, s19
 800e868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e86c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e870:	4656      	mov	r6, sl
 800e872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e87a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e87e:	4b74      	ldr	r3, [pc, #464]	; (800ea50 <_dtoa_r+0x2e8>)
 800e880:	2200      	movs	r2, #0
 800e882:	4630      	mov	r0, r6
 800e884:	4639      	mov	r1, r7
 800e886:	f7f1 fcff 	bl	8000288 <__aeabi_dsub>
 800e88a:	a365      	add	r3, pc, #404	; (adr r3, 800ea20 <_dtoa_r+0x2b8>)
 800e88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e890:	f7f1 feb2 	bl	80005f8 <__aeabi_dmul>
 800e894:	a364      	add	r3, pc, #400	; (adr r3, 800ea28 <_dtoa_r+0x2c0>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	f7f1 fcf7 	bl	800028c <__adddf3>
 800e89e:	4606      	mov	r6, r0
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	460f      	mov	r7, r1
 800e8a4:	f7f1 fe3e 	bl	8000524 <__aeabi_i2d>
 800e8a8:	a361      	add	r3, pc, #388	; (adr r3, 800ea30 <_dtoa_r+0x2c8>)
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	f7f1 fea3 	bl	80005f8 <__aeabi_dmul>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	4639      	mov	r1, r7
 800e8ba:	f7f1 fce7 	bl	800028c <__adddf3>
 800e8be:	4606      	mov	r6, r0
 800e8c0:	460f      	mov	r7, r1
 800e8c2:	f7f2 f949 	bl	8000b58 <__aeabi_d2iz>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	9000      	str	r0, [sp, #0]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	4639      	mov	r1, r7
 800e8d0:	f7f2 f904 	bl	8000adc <__aeabi_dcmplt>
 800e8d4:	b150      	cbz	r0, 800e8ec <_dtoa_r+0x184>
 800e8d6:	9800      	ldr	r0, [sp, #0]
 800e8d8:	f7f1 fe24 	bl	8000524 <__aeabi_i2d>
 800e8dc:	4632      	mov	r2, r6
 800e8de:	463b      	mov	r3, r7
 800e8e0:	f7f2 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8e4:	b910      	cbnz	r0, 800e8ec <_dtoa_r+0x184>
 800e8e6:	9b00      	ldr	r3, [sp, #0]
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	9b00      	ldr	r3, [sp, #0]
 800e8ee:	2b16      	cmp	r3, #22
 800e8f0:	d85a      	bhi.n	800e9a8 <_dtoa_r+0x240>
 800e8f2:	9a00      	ldr	r2, [sp, #0]
 800e8f4:	4b57      	ldr	r3, [pc, #348]	; (800ea54 <_dtoa_r+0x2ec>)
 800e8f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	ec51 0b19 	vmov	r0, r1, d9
 800e902:	f7f2 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800e906:	2800      	cmp	r0, #0
 800e908:	d050      	beq.n	800e9ac <_dtoa_r+0x244>
 800e90a:	9b00      	ldr	r3, [sp, #0]
 800e90c:	3b01      	subs	r3, #1
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	2300      	movs	r3, #0
 800e912:	930b      	str	r3, [sp, #44]	; 0x2c
 800e914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e916:	1b5d      	subs	r5, r3, r5
 800e918:	1e6b      	subs	r3, r5, #1
 800e91a:	9305      	str	r3, [sp, #20]
 800e91c:	bf45      	ittet	mi
 800e91e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e922:	9304      	strmi	r3, [sp, #16]
 800e924:	2300      	movpl	r3, #0
 800e926:	2300      	movmi	r3, #0
 800e928:	bf4c      	ite	mi
 800e92a:	9305      	strmi	r3, [sp, #20]
 800e92c:	9304      	strpl	r3, [sp, #16]
 800e92e:	9b00      	ldr	r3, [sp, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	db3d      	blt.n	800e9b0 <_dtoa_r+0x248>
 800e934:	9b05      	ldr	r3, [sp, #20]
 800e936:	9a00      	ldr	r2, [sp, #0]
 800e938:	920a      	str	r2, [sp, #40]	; 0x28
 800e93a:	4413      	add	r3, r2
 800e93c:	9305      	str	r3, [sp, #20]
 800e93e:	2300      	movs	r3, #0
 800e940:	9307      	str	r3, [sp, #28]
 800e942:	9b06      	ldr	r3, [sp, #24]
 800e944:	2b09      	cmp	r3, #9
 800e946:	f200 8089 	bhi.w	800ea5c <_dtoa_r+0x2f4>
 800e94a:	2b05      	cmp	r3, #5
 800e94c:	bfc4      	itt	gt
 800e94e:	3b04      	subgt	r3, #4
 800e950:	9306      	strgt	r3, [sp, #24]
 800e952:	9b06      	ldr	r3, [sp, #24]
 800e954:	f1a3 0302 	sub.w	r3, r3, #2
 800e958:	bfcc      	ite	gt
 800e95a:	2500      	movgt	r5, #0
 800e95c:	2501      	movle	r5, #1
 800e95e:	2b03      	cmp	r3, #3
 800e960:	f200 8087 	bhi.w	800ea72 <_dtoa_r+0x30a>
 800e964:	e8df f003 	tbb	[pc, r3]
 800e968:	59383a2d 	.word	0x59383a2d
 800e96c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e970:	441d      	add	r5, r3
 800e972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e976:	2b20      	cmp	r3, #32
 800e978:	bfc1      	itttt	gt
 800e97a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e97e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e982:	fa0b f303 	lslgt.w	r3, fp, r3
 800e986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e98a:	bfda      	itte	le
 800e98c:	f1c3 0320 	rsble	r3, r3, #32
 800e990:	fa06 f003 	lslle.w	r0, r6, r3
 800e994:	4318      	orrgt	r0, r3
 800e996:	f7f1 fdb5 	bl	8000504 <__aeabi_ui2d>
 800e99a:	2301      	movs	r3, #1
 800e99c:	4606      	mov	r6, r0
 800e99e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e9a2:	3d01      	subs	r5, #1
 800e9a4:	930e      	str	r3, [sp, #56]	; 0x38
 800e9a6:	e76a      	b.n	800e87e <_dtoa_r+0x116>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e7b2      	b.n	800e912 <_dtoa_r+0x1aa>
 800e9ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800e9ae:	e7b1      	b.n	800e914 <_dtoa_r+0x1ac>
 800e9b0:	9b04      	ldr	r3, [sp, #16]
 800e9b2:	9a00      	ldr	r2, [sp, #0]
 800e9b4:	1a9b      	subs	r3, r3, r2
 800e9b6:	9304      	str	r3, [sp, #16]
 800e9b8:	4253      	negs	r3, r2
 800e9ba:	9307      	str	r3, [sp, #28]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	930a      	str	r3, [sp, #40]	; 0x28
 800e9c0:	e7bf      	b.n	800e942 <_dtoa_r+0x1da>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	9308      	str	r3, [sp, #32]
 800e9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dc55      	bgt.n	800ea78 <_dtoa_r+0x310>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800e9d6:	e00c      	b.n	800e9f2 <_dtoa_r+0x28a>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e7f3      	b.n	800e9c4 <_dtoa_r+0x25c>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9e0:	9308      	str	r3, [sp, #32]
 800e9e2:	9b00      	ldr	r3, [sp, #0]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	9302      	str	r3, [sp, #8]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	9303      	str	r3, [sp, #12]
 800e9ee:	bfb8      	it	lt
 800e9f0:	2301      	movlt	r3, #1
 800e9f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	6042      	str	r2, [r0, #4]
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	f102 0614 	add.w	r6, r2, #20
 800e9fe:	429e      	cmp	r6, r3
 800ea00:	6841      	ldr	r1, [r0, #4]
 800ea02:	d93d      	bls.n	800ea80 <_dtoa_r+0x318>
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fee3 	bl	800f7d0 <_Balloc>
 800ea0a:	9001      	str	r0, [sp, #4]
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d13b      	bne.n	800ea88 <_dtoa_r+0x320>
 800ea10:	4b11      	ldr	r3, [pc, #68]	; (800ea58 <_dtoa_r+0x2f0>)
 800ea12:	4602      	mov	r2, r0
 800ea14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ea18:	e6c0      	b.n	800e79c <_dtoa_r+0x34>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e7df      	b.n	800e9de <_dtoa_r+0x276>
 800ea1e:	bf00      	nop
 800ea20:	636f4361 	.word	0x636f4361
 800ea24:	3fd287a7 	.word	0x3fd287a7
 800ea28:	8b60c8b3 	.word	0x8b60c8b3
 800ea2c:	3fc68a28 	.word	0x3fc68a28
 800ea30:	509f79fb 	.word	0x509f79fb
 800ea34:	3fd34413 	.word	0x3fd34413
 800ea38:	08010eeb 	.word	0x08010eeb
 800ea3c:	08010f02 	.word	0x08010f02
 800ea40:	7ff00000 	.word	0x7ff00000
 800ea44:	08010ee7 	.word	0x08010ee7
 800ea48:	08010ede 	.word	0x08010ede
 800ea4c:	08010dba 	.word	0x08010dba
 800ea50:	3ff80000 	.word	0x3ff80000
 800ea54:	08011058 	.word	0x08011058
 800ea58:	08010f5d 	.word	0x08010f5d
 800ea5c:	2501      	movs	r5, #1
 800ea5e:	2300      	movs	r3, #0
 800ea60:	9306      	str	r3, [sp, #24]
 800ea62:	9508      	str	r5, [sp, #32]
 800ea64:	f04f 33ff 	mov.w	r3, #4294967295
 800ea68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	2312      	movs	r3, #18
 800ea70:	e7b0      	b.n	800e9d4 <_dtoa_r+0x26c>
 800ea72:	2301      	movs	r3, #1
 800ea74:	9308      	str	r3, [sp, #32]
 800ea76:	e7f5      	b.n	800ea64 <_dtoa_r+0x2fc>
 800ea78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea7e:	e7b8      	b.n	800e9f2 <_dtoa_r+0x28a>
 800ea80:	3101      	adds	r1, #1
 800ea82:	6041      	str	r1, [r0, #4]
 800ea84:	0052      	lsls	r2, r2, #1
 800ea86:	e7b8      	b.n	800e9fa <_dtoa_r+0x292>
 800ea88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea8a:	9a01      	ldr	r2, [sp, #4]
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	2b0e      	cmp	r3, #14
 800ea92:	f200 809d 	bhi.w	800ebd0 <_dtoa_r+0x468>
 800ea96:	2d00      	cmp	r5, #0
 800ea98:	f000 809a 	beq.w	800ebd0 <_dtoa_r+0x468>
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	dd32      	ble.n	800eb08 <_dtoa_r+0x3a0>
 800eaa2:	4ab7      	ldr	r2, [pc, #732]	; (800ed80 <_dtoa_r+0x618>)
 800eaa4:	f003 030f 	and.w	r3, r3, #15
 800eaa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eaac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eab0:	9b00      	ldr	r3, [sp, #0]
 800eab2:	05d8      	lsls	r0, r3, #23
 800eab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eab8:	d516      	bpl.n	800eae8 <_dtoa_r+0x380>
 800eaba:	4bb2      	ldr	r3, [pc, #712]	; (800ed84 <_dtoa_r+0x61c>)
 800eabc:	ec51 0b19 	vmov	r0, r1, d9
 800eac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eac4:	f7f1 fec2 	bl	800084c <__aeabi_ddiv>
 800eac8:	f007 070f 	and.w	r7, r7, #15
 800eacc:	4682      	mov	sl, r0
 800eace:	468b      	mov	fp, r1
 800ead0:	2503      	movs	r5, #3
 800ead2:	4eac      	ldr	r6, [pc, #688]	; (800ed84 <_dtoa_r+0x61c>)
 800ead4:	b957      	cbnz	r7, 800eaec <_dtoa_r+0x384>
 800ead6:	4642      	mov	r2, r8
 800ead8:	464b      	mov	r3, r9
 800eada:	4650      	mov	r0, sl
 800eadc:	4659      	mov	r1, fp
 800eade:	f7f1 feb5 	bl	800084c <__aeabi_ddiv>
 800eae2:	4682      	mov	sl, r0
 800eae4:	468b      	mov	fp, r1
 800eae6:	e028      	b.n	800eb3a <_dtoa_r+0x3d2>
 800eae8:	2502      	movs	r5, #2
 800eaea:	e7f2      	b.n	800ead2 <_dtoa_r+0x36a>
 800eaec:	07f9      	lsls	r1, r7, #31
 800eaee:	d508      	bpl.n	800eb02 <_dtoa_r+0x39a>
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	4649      	mov	r1, r9
 800eaf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eaf8:	f7f1 fd7e 	bl	80005f8 <__aeabi_dmul>
 800eafc:	3501      	adds	r5, #1
 800eafe:	4680      	mov	r8, r0
 800eb00:	4689      	mov	r9, r1
 800eb02:	107f      	asrs	r7, r7, #1
 800eb04:	3608      	adds	r6, #8
 800eb06:	e7e5      	b.n	800ead4 <_dtoa_r+0x36c>
 800eb08:	f000 809b 	beq.w	800ec42 <_dtoa_r+0x4da>
 800eb0c:	9b00      	ldr	r3, [sp, #0]
 800eb0e:	4f9d      	ldr	r7, [pc, #628]	; (800ed84 <_dtoa_r+0x61c>)
 800eb10:	425e      	negs	r6, r3
 800eb12:	4b9b      	ldr	r3, [pc, #620]	; (800ed80 <_dtoa_r+0x618>)
 800eb14:	f006 020f 	and.w	r2, r6, #15
 800eb18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	ec51 0b19 	vmov	r0, r1, d9
 800eb24:	f7f1 fd68 	bl	80005f8 <__aeabi_dmul>
 800eb28:	1136      	asrs	r6, r6, #4
 800eb2a:	4682      	mov	sl, r0
 800eb2c:	468b      	mov	fp, r1
 800eb2e:	2300      	movs	r3, #0
 800eb30:	2502      	movs	r5, #2
 800eb32:	2e00      	cmp	r6, #0
 800eb34:	d17a      	bne.n	800ec2c <_dtoa_r+0x4c4>
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1d3      	bne.n	800eae2 <_dtoa_r+0x37a>
 800eb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 8082 	beq.w	800ec46 <_dtoa_r+0x4de>
 800eb42:	4b91      	ldr	r3, [pc, #580]	; (800ed88 <_dtoa_r+0x620>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	4650      	mov	r0, sl
 800eb48:	4659      	mov	r1, fp
 800eb4a:	f7f1 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d079      	beq.n	800ec46 <_dtoa_r+0x4de>
 800eb52:	9b03      	ldr	r3, [sp, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d076      	beq.n	800ec46 <_dtoa_r+0x4de>
 800eb58:	9b02      	ldr	r3, [sp, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dd36      	ble.n	800ebcc <_dtoa_r+0x464>
 800eb5e:	9b00      	ldr	r3, [sp, #0]
 800eb60:	4650      	mov	r0, sl
 800eb62:	4659      	mov	r1, fp
 800eb64:	1e5f      	subs	r7, r3, #1
 800eb66:	2200      	movs	r2, #0
 800eb68:	4b88      	ldr	r3, [pc, #544]	; (800ed8c <_dtoa_r+0x624>)
 800eb6a:	f7f1 fd45 	bl	80005f8 <__aeabi_dmul>
 800eb6e:	9e02      	ldr	r6, [sp, #8]
 800eb70:	4682      	mov	sl, r0
 800eb72:	468b      	mov	fp, r1
 800eb74:	3501      	adds	r5, #1
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7f1 fcd4 	bl	8000524 <__aeabi_i2d>
 800eb7c:	4652      	mov	r2, sl
 800eb7e:	465b      	mov	r3, fp
 800eb80:	f7f1 fd3a 	bl	80005f8 <__aeabi_dmul>
 800eb84:	4b82      	ldr	r3, [pc, #520]	; (800ed90 <_dtoa_r+0x628>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	f7f1 fb80 	bl	800028c <__adddf3>
 800eb8c:	46d0      	mov	r8, sl
 800eb8e:	46d9      	mov	r9, fp
 800eb90:	4682      	mov	sl, r0
 800eb92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d158      	bne.n	800ec4c <_dtoa_r+0x4e4>
 800eb9a:	4b7e      	ldr	r3, [pc, #504]	; (800ed94 <_dtoa_r+0x62c>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4640      	mov	r0, r8
 800eba0:	4649      	mov	r1, r9
 800eba2:	f7f1 fb71 	bl	8000288 <__aeabi_dsub>
 800eba6:	4652      	mov	r2, sl
 800eba8:	465b      	mov	r3, fp
 800ebaa:	4680      	mov	r8, r0
 800ebac:	4689      	mov	r9, r1
 800ebae:	f7f1 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f040 8295 	bne.w	800f0e2 <_dtoa_r+0x97a>
 800ebb8:	4652      	mov	r2, sl
 800ebba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	f040 8289 	bne.w	800f0de <_dtoa_r+0x976>
 800ebcc:	ec5b ab19 	vmov	sl, fp, d9
 800ebd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f2c0 8148 	blt.w	800ee68 <_dtoa_r+0x700>
 800ebd8:	9a00      	ldr	r2, [sp, #0]
 800ebda:	2a0e      	cmp	r2, #14
 800ebdc:	f300 8144 	bgt.w	800ee68 <_dtoa_r+0x700>
 800ebe0:	4b67      	ldr	r3, [pc, #412]	; (800ed80 <_dtoa_r+0x618>)
 800ebe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f280 80d5 	bge.w	800ed9c <_dtoa_r+0x634>
 800ebf2:	9b03      	ldr	r3, [sp, #12]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f300 80d1 	bgt.w	800ed9c <_dtoa_r+0x634>
 800ebfa:	f040 826f 	bne.w	800f0dc <_dtoa_r+0x974>
 800ebfe:	4b65      	ldr	r3, [pc, #404]	; (800ed94 <_dtoa_r+0x62c>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	4640      	mov	r0, r8
 800ec04:	4649      	mov	r1, r9
 800ec06:	f7f1 fcf7 	bl	80005f8 <__aeabi_dmul>
 800ec0a:	4652      	mov	r2, sl
 800ec0c:	465b      	mov	r3, fp
 800ec0e:	f7f1 ff79 	bl	8000b04 <__aeabi_dcmpge>
 800ec12:	9e03      	ldr	r6, [sp, #12]
 800ec14:	4637      	mov	r7, r6
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f040 8245 	bne.w	800f0a6 <_dtoa_r+0x93e>
 800ec1c:	9d01      	ldr	r5, [sp, #4]
 800ec1e:	2331      	movs	r3, #49	; 0x31
 800ec20:	f805 3b01 	strb.w	r3, [r5], #1
 800ec24:	9b00      	ldr	r3, [sp, #0]
 800ec26:	3301      	adds	r3, #1
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	e240      	b.n	800f0ae <_dtoa_r+0x946>
 800ec2c:	07f2      	lsls	r2, r6, #31
 800ec2e:	d505      	bpl.n	800ec3c <_dtoa_r+0x4d4>
 800ec30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec34:	f7f1 fce0 	bl	80005f8 <__aeabi_dmul>
 800ec38:	3501      	adds	r5, #1
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	1076      	asrs	r6, r6, #1
 800ec3e:	3708      	adds	r7, #8
 800ec40:	e777      	b.n	800eb32 <_dtoa_r+0x3ca>
 800ec42:	2502      	movs	r5, #2
 800ec44:	e779      	b.n	800eb3a <_dtoa_r+0x3d2>
 800ec46:	9f00      	ldr	r7, [sp, #0]
 800ec48:	9e03      	ldr	r6, [sp, #12]
 800ec4a:	e794      	b.n	800eb76 <_dtoa_r+0x40e>
 800ec4c:	9901      	ldr	r1, [sp, #4]
 800ec4e:	4b4c      	ldr	r3, [pc, #304]	; (800ed80 <_dtoa_r+0x618>)
 800ec50:	4431      	add	r1, r6
 800ec52:	910d      	str	r1, [sp, #52]	; 0x34
 800ec54:	9908      	ldr	r1, [sp, #32]
 800ec56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec5e:	2900      	cmp	r1, #0
 800ec60:	d043      	beq.n	800ecea <_dtoa_r+0x582>
 800ec62:	494d      	ldr	r1, [pc, #308]	; (800ed98 <_dtoa_r+0x630>)
 800ec64:	2000      	movs	r0, #0
 800ec66:	f7f1 fdf1 	bl	800084c <__aeabi_ddiv>
 800ec6a:	4652      	mov	r2, sl
 800ec6c:	465b      	mov	r3, fp
 800ec6e:	f7f1 fb0b 	bl	8000288 <__aeabi_dsub>
 800ec72:	9d01      	ldr	r5, [sp, #4]
 800ec74:	4682      	mov	sl, r0
 800ec76:	468b      	mov	fp, r1
 800ec78:	4649      	mov	r1, r9
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	f7f1 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800ec80:	4606      	mov	r6, r0
 800ec82:	f7f1 fc4f 	bl	8000524 <__aeabi_i2d>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	f7f1 fafb 	bl	8000288 <__aeabi_dsub>
 800ec92:	3630      	adds	r6, #48	; 0x30
 800ec94:	f805 6b01 	strb.w	r6, [r5], #1
 800ec98:	4652      	mov	r2, sl
 800ec9a:	465b      	mov	r3, fp
 800ec9c:	4680      	mov	r8, r0
 800ec9e:	4689      	mov	r9, r1
 800eca0:	f7f1 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d163      	bne.n	800ed70 <_dtoa_r+0x608>
 800eca8:	4642      	mov	r2, r8
 800ecaa:	464b      	mov	r3, r9
 800ecac:	4936      	ldr	r1, [pc, #216]	; (800ed88 <_dtoa_r+0x620>)
 800ecae:	2000      	movs	r0, #0
 800ecb0:	f7f1 faea 	bl	8000288 <__aeabi_dsub>
 800ecb4:	4652      	mov	r2, sl
 800ecb6:	465b      	mov	r3, fp
 800ecb8:	f7f1 ff10 	bl	8000adc <__aeabi_dcmplt>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	f040 80b5 	bne.w	800ee2c <_dtoa_r+0x6c4>
 800ecc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecc4:	429d      	cmp	r5, r3
 800ecc6:	d081      	beq.n	800ebcc <_dtoa_r+0x464>
 800ecc8:	4b30      	ldr	r3, [pc, #192]	; (800ed8c <_dtoa_r+0x624>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	4650      	mov	r0, sl
 800ecce:	4659      	mov	r1, fp
 800ecd0:	f7f1 fc92 	bl	80005f8 <__aeabi_dmul>
 800ecd4:	4b2d      	ldr	r3, [pc, #180]	; (800ed8c <_dtoa_r+0x624>)
 800ecd6:	4682      	mov	sl, r0
 800ecd8:	468b      	mov	fp, r1
 800ecda:	4640      	mov	r0, r8
 800ecdc:	4649      	mov	r1, r9
 800ecde:	2200      	movs	r2, #0
 800ece0:	f7f1 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ece4:	4680      	mov	r8, r0
 800ece6:	4689      	mov	r9, r1
 800ece8:	e7c6      	b.n	800ec78 <_dtoa_r+0x510>
 800ecea:	4650      	mov	r0, sl
 800ecec:	4659      	mov	r1, fp
 800ecee:	f7f1 fc83 	bl	80005f8 <__aeabi_dmul>
 800ecf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecf4:	9d01      	ldr	r5, [sp, #4]
 800ecf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecf8:	4682      	mov	sl, r0
 800ecfa:	468b      	mov	fp, r1
 800ecfc:	4649      	mov	r1, r9
 800ecfe:	4640      	mov	r0, r8
 800ed00:	f7f1 ff2a 	bl	8000b58 <__aeabi_d2iz>
 800ed04:	4606      	mov	r6, r0
 800ed06:	f7f1 fc0d 	bl	8000524 <__aeabi_i2d>
 800ed0a:	3630      	adds	r6, #48	; 0x30
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	f805 6b01 	strb.w	r6, [r5], #1
 800ed1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed1e:	429d      	cmp	r5, r3
 800ed20:	4680      	mov	r8, r0
 800ed22:	4689      	mov	r9, r1
 800ed24:	f04f 0200 	mov.w	r2, #0
 800ed28:	d124      	bne.n	800ed74 <_dtoa_r+0x60c>
 800ed2a:	4b1b      	ldr	r3, [pc, #108]	; (800ed98 <_dtoa_r+0x630>)
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	4659      	mov	r1, fp
 800ed30:	f7f1 faac 	bl	800028c <__adddf3>
 800ed34:	4602      	mov	r2, r0
 800ed36:	460b      	mov	r3, r1
 800ed38:	4640      	mov	r0, r8
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	f7f1 feec 	bl	8000b18 <__aeabi_dcmpgt>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d173      	bne.n	800ee2c <_dtoa_r+0x6c4>
 800ed44:	4652      	mov	r2, sl
 800ed46:	465b      	mov	r3, fp
 800ed48:	4913      	ldr	r1, [pc, #76]	; (800ed98 <_dtoa_r+0x630>)
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	f7f1 fa9c 	bl	8000288 <__aeabi_dsub>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4640      	mov	r0, r8
 800ed56:	4649      	mov	r1, r9
 800ed58:	f7f1 fec0 	bl	8000adc <__aeabi_dcmplt>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f43f af35 	beq.w	800ebcc <_dtoa_r+0x464>
 800ed62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed64:	1e6b      	subs	r3, r5, #1
 800ed66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed6c:	2b30      	cmp	r3, #48	; 0x30
 800ed6e:	d0f8      	beq.n	800ed62 <_dtoa_r+0x5fa>
 800ed70:	9700      	str	r7, [sp, #0]
 800ed72:	e049      	b.n	800ee08 <_dtoa_r+0x6a0>
 800ed74:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <_dtoa_r+0x624>)
 800ed76:	f7f1 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	4689      	mov	r9, r1
 800ed7e:	e7bd      	b.n	800ecfc <_dtoa_r+0x594>
 800ed80:	08011058 	.word	0x08011058
 800ed84:	08011030 	.word	0x08011030
 800ed88:	3ff00000 	.word	0x3ff00000
 800ed8c:	40240000 	.word	0x40240000
 800ed90:	401c0000 	.word	0x401c0000
 800ed94:	40140000 	.word	0x40140000
 800ed98:	3fe00000 	.word	0x3fe00000
 800ed9c:	9d01      	ldr	r5, [sp, #4]
 800ed9e:	4656      	mov	r6, sl
 800eda0:	465f      	mov	r7, fp
 800eda2:	4642      	mov	r2, r8
 800eda4:	464b      	mov	r3, r9
 800eda6:	4630      	mov	r0, r6
 800eda8:	4639      	mov	r1, r7
 800edaa:	f7f1 fd4f 	bl	800084c <__aeabi_ddiv>
 800edae:	f7f1 fed3 	bl	8000b58 <__aeabi_d2iz>
 800edb2:	4682      	mov	sl, r0
 800edb4:	f7f1 fbb6 	bl	8000524 <__aeabi_i2d>
 800edb8:	4642      	mov	r2, r8
 800edba:	464b      	mov	r3, r9
 800edbc:	f7f1 fc1c 	bl	80005f8 <__aeabi_dmul>
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	4630      	mov	r0, r6
 800edc6:	4639      	mov	r1, r7
 800edc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800edcc:	f7f1 fa5c 	bl	8000288 <__aeabi_dsub>
 800edd0:	f805 6b01 	strb.w	r6, [r5], #1
 800edd4:	9e01      	ldr	r6, [sp, #4]
 800edd6:	9f03      	ldr	r7, [sp, #12]
 800edd8:	1bae      	subs	r6, r5, r6
 800edda:	42b7      	cmp	r7, r6
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	d135      	bne.n	800ee4e <_dtoa_r+0x6e6>
 800ede2:	f7f1 fa53 	bl	800028c <__adddf3>
 800ede6:	4642      	mov	r2, r8
 800ede8:	464b      	mov	r3, r9
 800edea:	4606      	mov	r6, r0
 800edec:	460f      	mov	r7, r1
 800edee:	f7f1 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 800edf2:	b9d0      	cbnz	r0, 800ee2a <_dtoa_r+0x6c2>
 800edf4:	4642      	mov	r2, r8
 800edf6:	464b      	mov	r3, r9
 800edf8:	4630      	mov	r0, r6
 800edfa:	4639      	mov	r1, r7
 800edfc:	f7f1 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee00:	b110      	cbz	r0, 800ee08 <_dtoa_r+0x6a0>
 800ee02:	f01a 0f01 	tst.w	sl, #1
 800ee06:	d110      	bne.n	800ee2a <_dtoa_r+0x6c2>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	ee18 1a10 	vmov	r1, s16
 800ee0e:	f000 fd1f 	bl	800f850 <_Bfree>
 800ee12:	2300      	movs	r3, #0
 800ee14:	9800      	ldr	r0, [sp, #0]
 800ee16:	702b      	strb	r3, [r5, #0]
 800ee18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	6018      	str	r0, [r3, #0]
 800ee1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f43f acf1 	beq.w	800e808 <_dtoa_r+0xa0>
 800ee26:	601d      	str	r5, [r3, #0]
 800ee28:	e4ee      	b.n	800e808 <_dtoa_r+0xa0>
 800ee2a:	9f00      	ldr	r7, [sp, #0]
 800ee2c:	462b      	mov	r3, r5
 800ee2e:	461d      	mov	r5, r3
 800ee30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee34:	2a39      	cmp	r2, #57	; 0x39
 800ee36:	d106      	bne.n	800ee46 <_dtoa_r+0x6de>
 800ee38:	9a01      	ldr	r2, [sp, #4]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d1f7      	bne.n	800ee2e <_dtoa_r+0x6c6>
 800ee3e:	9901      	ldr	r1, [sp, #4]
 800ee40:	2230      	movs	r2, #48	; 0x30
 800ee42:	3701      	adds	r7, #1
 800ee44:	700a      	strb	r2, [r1, #0]
 800ee46:	781a      	ldrb	r2, [r3, #0]
 800ee48:	3201      	adds	r2, #1
 800ee4a:	701a      	strb	r2, [r3, #0]
 800ee4c:	e790      	b.n	800ed70 <_dtoa_r+0x608>
 800ee4e:	4ba6      	ldr	r3, [pc, #664]	; (800f0e8 <_dtoa_r+0x980>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	f7f1 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ee56:	2200      	movs	r2, #0
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	460f      	mov	r7, r1
 800ee5e:	f7f1 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d09d      	beq.n	800eda2 <_dtoa_r+0x63a>
 800ee66:	e7cf      	b.n	800ee08 <_dtoa_r+0x6a0>
 800ee68:	9a08      	ldr	r2, [sp, #32]
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	f000 80d7 	beq.w	800f01e <_dtoa_r+0x8b6>
 800ee70:	9a06      	ldr	r2, [sp, #24]
 800ee72:	2a01      	cmp	r2, #1
 800ee74:	f300 80ba 	bgt.w	800efec <_dtoa_r+0x884>
 800ee78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	f000 80b2 	beq.w	800efe4 <_dtoa_r+0x87c>
 800ee80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee84:	9e07      	ldr	r6, [sp, #28]
 800ee86:	9d04      	ldr	r5, [sp, #16]
 800ee88:	9a04      	ldr	r2, [sp, #16]
 800ee8a:	441a      	add	r2, r3
 800ee8c:	9204      	str	r2, [sp, #16]
 800ee8e:	9a05      	ldr	r2, [sp, #20]
 800ee90:	2101      	movs	r1, #1
 800ee92:	441a      	add	r2, r3
 800ee94:	4620      	mov	r0, r4
 800ee96:	9205      	str	r2, [sp, #20]
 800ee98:	f000 fd92 	bl	800f9c0 <__i2b>
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	2d00      	cmp	r5, #0
 800eea0:	dd0c      	ble.n	800eebc <_dtoa_r+0x754>
 800eea2:	9b05      	ldr	r3, [sp, #20]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dd09      	ble.n	800eebc <_dtoa_r+0x754>
 800eea8:	42ab      	cmp	r3, r5
 800eeaa:	9a04      	ldr	r2, [sp, #16]
 800eeac:	bfa8      	it	ge
 800eeae:	462b      	movge	r3, r5
 800eeb0:	1ad2      	subs	r2, r2, r3
 800eeb2:	9204      	str	r2, [sp, #16]
 800eeb4:	9a05      	ldr	r2, [sp, #20]
 800eeb6:	1aed      	subs	r5, r5, r3
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	9b07      	ldr	r3, [sp, #28]
 800eebe:	b31b      	cbz	r3, 800ef08 <_dtoa_r+0x7a0>
 800eec0:	9b08      	ldr	r3, [sp, #32]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	f000 80af 	beq.w	800f026 <_dtoa_r+0x8be>
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	dd13      	ble.n	800eef4 <_dtoa_r+0x78c>
 800eecc:	4639      	mov	r1, r7
 800eece:	4632      	mov	r2, r6
 800eed0:	4620      	mov	r0, r4
 800eed2:	f000 fe35 	bl	800fb40 <__pow5mult>
 800eed6:	ee18 2a10 	vmov	r2, s16
 800eeda:	4601      	mov	r1, r0
 800eedc:	4607      	mov	r7, r0
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fd84 	bl	800f9ec <__multiply>
 800eee4:	ee18 1a10 	vmov	r1, s16
 800eee8:	4680      	mov	r8, r0
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 fcb0 	bl	800f850 <_Bfree>
 800eef0:	ee08 8a10 	vmov	s16, r8
 800eef4:	9b07      	ldr	r3, [sp, #28]
 800eef6:	1b9a      	subs	r2, r3, r6
 800eef8:	d006      	beq.n	800ef08 <_dtoa_r+0x7a0>
 800eefa:	ee18 1a10 	vmov	r1, s16
 800eefe:	4620      	mov	r0, r4
 800ef00:	f000 fe1e 	bl	800fb40 <__pow5mult>
 800ef04:	ee08 0a10 	vmov	s16, r0
 800ef08:	2101      	movs	r1, #1
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 fd58 	bl	800f9c0 <__i2b>
 800ef10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	4606      	mov	r6, r0
 800ef16:	f340 8088 	ble.w	800f02a <_dtoa_r+0x8c2>
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	4601      	mov	r1, r0
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 fe0e 	bl	800fb40 <__pow5mult>
 800ef24:	9b06      	ldr	r3, [sp, #24]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	4606      	mov	r6, r0
 800ef2a:	f340 8081 	ble.w	800f030 <_dtoa_r+0x8c8>
 800ef2e:	f04f 0800 	mov.w	r8, #0
 800ef32:	6933      	ldr	r3, [r6, #16]
 800ef34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef38:	6918      	ldr	r0, [r3, #16]
 800ef3a:	f000 fcf1 	bl	800f920 <__hi0bits>
 800ef3e:	f1c0 0020 	rsb	r0, r0, #32
 800ef42:	9b05      	ldr	r3, [sp, #20]
 800ef44:	4418      	add	r0, r3
 800ef46:	f010 001f 	ands.w	r0, r0, #31
 800ef4a:	f000 8092 	beq.w	800f072 <_dtoa_r+0x90a>
 800ef4e:	f1c0 0320 	rsb	r3, r0, #32
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	f340 808a 	ble.w	800f06c <_dtoa_r+0x904>
 800ef58:	f1c0 001c 	rsb	r0, r0, #28
 800ef5c:	9b04      	ldr	r3, [sp, #16]
 800ef5e:	4403      	add	r3, r0
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	9b05      	ldr	r3, [sp, #20]
 800ef64:	4403      	add	r3, r0
 800ef66:	4405      	add	r5, r0
 800ef68:	9305      	str	r3, [sp, #20]
 800ef6a:	9b04      	ldr	r3, [sp, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd07      	ble.n	800ef80 <_dtoa_r+0x818>
 800ef70:	ee18 1a10 	vmov	r1, s16
 800ef74:	461a      	mov	r2, r3
 800ef76:	4620      	mov	r0, r4
 800ef78:	f000 fe3c 	bl	800fbf4 <__lshift>
 800ef7c:	ee08 0a10 	vmov	s16, r0
 800ef80:	9b05      	ldr	r3, [sp, #20]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	dd05      	ble.n	800ef92 <_dtoa_r+0x82a>
 800ef86:	4631      	mov	r1, r6
 800ef88:	461a      	mov	r2, r3
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 fe32 	bl	800fbf4 <__lshift>
 800ef90:	4606      	mov	r6, r0
 800ef92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d06e      	beq.n	800f076 <_dtoa_r+0x90e>
 800ef98:	ee18 0a10 	vmov	r0, s16
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	f000 fe99 	bl	800fcd4 <__mcmp>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	da67      	bge.n	800f076 <_dtoa_r+0x90e>
 800efa6:	9b00      	ldr	r3, [sp, #0]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	ee18 1a10 	vmov	r1, s16
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	220a      	movs	r2, #10
 800efb2:	2300      	movs	r3, #0
 800efb4:	4620      	mov	r0, r4
 800efb6:	f000 fc6d 	bl	800f894 <__multadd>
 800efba:	9b08      	ldr	r3, [sp, #32]
 800efbc:	ee08 0a10 	vmov	s16, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f000 81b1 	beq.w	800f328 <_dtoa_r+0xbc0>
 800efc6:	2300      	movs	r3, #0
 800efc8:	4639      	mov	r1, r7
 800efca:	220a      	movs	r2, #10
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 fc61 	bl	800f894 <__multadd>
 800efd2:	9b02      	ldr	r3, [sp, #8]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	4607      	mov	r7, r0
 800efd8:	f300 808e 	bgt.w	800f0f8 <_dtoa_r+0x990>
 800efdc:	9b06      	ldr	r3, [sp, #24]
 800efde:	2b02      	cmp	r3, #2
 800efe0:	dc51      	bgt.n	800f086 <_dtoa_r+0x91e>
 800efe2:	e089      	b.n	800f0f8 <_dtoa_r+0x990>
 800efe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efea:	e74b      	b.n	800ee84 <_dtoa_r+0x71c>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1e5e      	subs	r6, r3, #1
 800eff0:	9b07      	ldr	r3, [sp, #28]
 800eff2:	42b3      	cmp	r3, r6
 800eff4:	bfbf      	itttt	lt
 800eff6:	9b07      	ldrlt	r3, [sp, #28]
 800eff8:	9607      	strlt	r6, [sp, #28]
 800effa:	1af2      	sublt	r2, r6, r3
 800effc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800effe:	bfb6      	itet	lt
 800f000:	189b      	addlt	r3, r3, r2
 800f002:	1b9e      	subge	r6, r3, r6
 800f004:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	bfb8      	it	lt
 800f00a:	2600      	movlt	r6, #0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	bfb7      	itett	lt
 800f010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f018:	1a9d      	sublt	r5, r3, r2
 800f01a:	2300      	movlt	r3, #0
 800f01c:	e734      	b.n	800ee88 <_dtoa_r+0x720>
 800f01e:	9e07      	ldr	r6, [sp, #28]
 800f020:	9d04      	ldr	r5, [sp, #16]
 800f022:	9f08      	ldr	r7, [sp, #32]
 800f024:	e73b      	b.n	800ee9e <_dtoa_r+0x736>
 800f026:	9a07      	ldr	r2, [sp, #28]
 800f028:	e767      	b.n	800eefa <_dtoa_r+0x792>
 800f02a:	9b06      	ldr	r3, [sp, #24]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	dc18      	bgt.n	800f062 <_dtoa_r+0x8fa>
 800f030:	f1ba 0f00 	cmp.w	sl, #0
 800f034:	d115      	bne.n	800f062 <_dtoa_r+0x8fa>
 800f036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f03a:	b993      	cbnz	r3, 800f062 <_dtoa_r+0x8fa>
 800f03c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f040:	0d1b      	lsrs	r3, r3, #20
 800f042:	051b      	lsls	r3, r3, #20
 800f044:	b183      	cbz	r3, 800f068 <_dtoa_r+0x900>
 800f046:	9b04      	ldr	r3, [sp, #16]
 800f048:	3301      	adds	r3, #1
 800f04a:	9304      	str	r3, [sp, #16]
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	3301      	adds	r3, #1
 800f050:	9305      	str	r3, [sp, #20]
 800f052:	f04f 0801 	mov.w	r8, #1
 800f056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f47f af6a 	bne.w	800ef32 <_dtoa_r+0x7ca>
 800f05e:	2001      	movs	r0, #1
 800f060:	e76f      	b.n	800ef42 <_dtoa_r+0x7da>
 800f062:	f04f 0800 	mov.w	r8, #0
 800f066:	e7f6      	b.n	800f056 <_dtoa_r+0x8ee>
 800f068:	4698      	mov	r8, r3
 800f06a:	e7f4      	b.n	800f056 <_dtoa_r+0x8ee>
 800f06c:	f43f af7d 	beq.w	800ef6a <_dtoa_r+0x802>
 800f070:	4618      	mov	r0, r3
 800f072:	301c      	adds	r0, #28
 800f074:	e772      	b.n	800ef5c <_dtoa_r+0x7f4>
 800f076:	9b03      	ldr	r3, [sp, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	dc37      	bgt.n	800f0ec <_dtoa_r+0x984>
 800f07c:	9b06      	ldr	r3, [sp, #24]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	dd34      	ble.n	800f0ec <_dtoa_r+0x984>
 800f082:	9b03      	ldr	r3, [sp, #12]
 800f084:	9302      	str	r3, [sp, #8]
 800f086:	9b02      	ldr	r3, [sp, #8]
 800f088:	b96b      	cbnz	r3, 800f0a6 <_dtoa_r+0x93e>
 800f08a:	4631      	mov	r1, r6
 800f08c:	2205      	movs	r2, #5
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 fc00 	bl	800f894 <__multadd>
 800f094:	4601      	mov	r1, r0
 800f096:	4606      	mov	r6, r0
 800f098:	ee18 0a10 	vmov	r0, s16
 800f09c:	f000 fe1a 	bl	800fcd4 <__mcmp>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f73f adbb 	bgt.w	800ec1c <_dtoa_r+0x4b4>
 800f0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a8:	9d01      	ldr	r5, [sp, #4]
 800f0aa:	43db      	mvns	r3, r3
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	f04f 0800 	mov.w	r8, #0
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 fbcb 	bl	800f850 <_Bfree>
 800f0ba:	2f00      	cmp	r7, #0
 800f0bc:	f43f aea4 	beq.w	800ee08 <_dtoa_r+0x6a0>
 800f0c0:	f1b8 0f00 	cmp.w	r8, #0
 800f0c4:	d005      	beq.n	800f0d2 <_dtoa_r+0x96a>
 800f0c6:	45b8      	cmp	r8, r7
 800f0c8:	d003      	beq.n	800f0d2 <_dtoa_r+0x96a>
 800f0ca:	4641      	mov	r1, r8
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f000 fbbf 	bl	800f850 <_Bfree>
 800f0d2:	4639      	mov	r1, r7
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fbbb 	bl	800f850 <_Bfree>
 800f0da:	e695      	b.n	800ee08 <_dtoa_r+0x6a0>
 800f0dc:	2600      	movs	r6, #0
 800f0de:	4637      	mov	r7, r6
 800f0e0:	e7e1      	b.n	800f0a6 <_dtoa_r+0x93e>
 800f0e2:	9700      	str	r7, [sp, #0]
 800f0e4:	4637      	mov	r7, r6
 800f0e6:	e599      	b.n	800ec1c <_dtoa_r+0x4b4>
 800f0e8:	40240000 	.word	0x40240000
 800f0ec:	9b08      	ldr	r3, [sp, #32]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 80ca 	beq.w	800f288 <_dtoa_r+0xb20>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	9302      	str	r3, [sp, #8]
 800f0f8:	2d00      	cmp	r5, #0
 800f0fa:	dd05      	ble.n	800f108 <_dtoa_r+0x9a0>
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	462a      	mov	r2, r5
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fd77 	bl	800fbf4 <__lshift>
 800f106:	4607      	mov	r7, r0
 800f108:	f1b8 0f00 	cmp.w	r8, #0
 800f10c:	d05b      	beq.n	800f1c6 <_dtoa_r+0xa5e>
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	4620      	mov	r0, r4
 800f112:	f000 fb5d 	bl	800f7d0 <_Balloc>
 800f116:	4605      	mov	r5, r0
 800f118:	b928      	cbnz	r0, 800f126 <_dtoa_r+0x9be>
 800f11a:	4b87      	ldr	r3, [pc, #540]	; (800f338 <_dtoa_r+0xbd0>)
 800f11c:	4602      	mov	r2, r0
 800f11e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f122:	f7ff bb3b 	b.w	800e79c <_dtoa_r+0x34>
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	3202      	adds	r2, #2
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	f107 010c 	add.w	r1, r7, #12
 800f130:	300c      	adds	r0, #12
 800f132:	f7fe fa63 	bl	800d5fc <memcpy>
 800f136:	2201      	movs	r2, #1
 800f138:	4629      	mov	r1, r5
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 fd5a 	bl	800fbf4 <__lshift>
 800f140:	9b01      	ldr	r3, [sp, #4]
 800f142:	f103 0901 	add.w	r9, r3, #1
 800f146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f14a:	4413      	add	r3, r2
 800f14c:	9305      	str	r3, [sp, #20]
 800f14e:	f00a 0301 	and.w	r3, sl, #1
 800f152:	46b8      	mov	r8, r7
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	4607      	mov	r7, r0
 800f158:	4631      	mov	r1, r6
 800f15a:	ee18 0a10 	vmov	r0, s16
 800f15e:	f7ff fa76 	bl	800e64e <quorem>
 800f162:	4641      	mov	r1, r8
 800f164:	9002      	str	r0, [sp, #8]
 800f166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f16a:	ee18 0a10 	vmov	r0, s16
 800f16e:	f000 fdb1 	bl	800fcd4 <__mcmp>
 800f172:	463a      	mov	r2, r7
 800f174:	9003      	str	r0, [sp, #12]
 800f176:	4631      	mov	r1, r6
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 fdc7 	bl	800fd0c <__mdiff>
 800f17e:	68c2      	ldr	r2, [r0, #12]
 800f180:	f109 3bff 	add.w	fp, r9, #4294967295
 800f184:	4605      	mov	r5, r0
 800f186:	bb02      	cbnz	r2, 800f1ca <_dtoa_r+0xa62>
 800f188:	4601      	mov	r1, r0
 800f18a:	ee18 0a10 	vmov	r0, s16
 800f18e:	f000 fda1 	bl	800fcd4 <__mcmp>
 800f192:	4602      	mov	r2, r0
 800f194:	4629      	mov	r1, r5
 800f196:	4620      	mov	r0, r4
 800f198:	9207      	str	r2, [sp, #28]
 800f19a:	f000 fb59 	bl	800f850 <_Bfree>
 800f19e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f1a2:	ea43 0102 	orr.w	r1, r3, r2
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	430b      	orrs	r3, r1
 800f1aa:	464d      	mov	r5, r9
 800f1ac:	d10f      	bne.n	800f1ce <_dtoa_r+0xa66>
 800f1ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f1b2:	d02a      	beq.n	800f20a <_dtoa_r+0xaa2>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	dd02      	ble.n	800f1c0 <_dtoa_r+0xa58>
 800f1ba:	9b02      	ldr	r3, [sp, #8]
 800f1bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f1c0:	f88b a000 	strb.w	sl, [fp]
 800f1c4:	e775      	b.n	800f0b2 <_dtoa_r+0x94a>
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	e7ba      	b.n	800f140 <_dtoa_r+0x9d8>
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	e7e2      	b.n	800f194 <_dtoa_r+0xa2c>
 800f1ce:	9b03      	ldr	r3, [sp, #12]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	db04      	blt.n	800f1de <_dtoa_r+0xa76>
 800f1d4:	9906      	ldr	r1, [sp, #24]
 800f1d6:	430b      	orrs	r3, r1
 800f1d8:	9904      	ldr	r1, [sp, #16]
 800f1da:	430b      	orrs	r3, r1
 800f1dc:	d122      	bne.n	800f224 <_dtoa_r+0xabc>
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	ddee      	ble.n	800f1c0 <_dtoa_r+0xa58>
 800f1e2:	ee18 1a10 	vmov	r1, s16
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f000 fd03 	bl	800fbf4 <__lshift>
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	ee08 0a10 	vmov	s16, r0
 800f1f4:	f000 fd6e 	bl	800fcd4 <__mcmp>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	dc03      	bgt.n	800f204 <_dtoa_r+0xa9c>
 800f1fc:	d1e0      	bne.n	800f1c0 <_dtoa_r+0xa58>
 800f1fe:	f01a 0f01 	tst.w	sl, #1
 800f202:	d0dd      	beq.n	800f1c0 <_dtoa_r+0xa58>
 800f204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f208:	d1d7      	bne.n	800f1ba <_dtoa_r+0xa52>
 800f20a:	2339      	movs	r3, #57	; 0x39
 800f20c:	f88b 3000 	strb.w	r3, [fp]
 800f210:	462b      	mov	r3, r5
 800f212:	461d      	mov	r5, r3
 800f214:	3b01      	subs	r3, #1
 800f216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f21a:	2a39      	cmp	r2, #57	; 0x39
 800f21c:	d071      	beq.n	800f302 <_dtoa_r+0xb9a>
 800f21e:	3201      	adds	r2, #1
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	e746      	b.n	800f0b2 <_dtoa_r+0x94a>
 800f224:	2a00      	cmp	r2, #0
 800f226:	dd07      	ble.n	800f238 <_dtoa_r+0xad0>
 800f228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f22c:	d0ed      	beq.n	800f20a <_dtoa_r+0xaa2>
 800f22e:	f10a 0301 	add.w	r3, sl, #1
 800f232:	f88b 3000 	strb.w	r3, [fp]
 800f236:	e73c      	b.n	800f0b2 <_dtoa_r+0x94a>
 800f238:	9b05      	ldr	r3, [sp, #20]
 800f23a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f23e:	4599      	cmp	r9, r3
 800f240:	d047      	beq.n	800f2d2 <_dtoa_r+0xb6a>
 800f242:	ee18 1a10 	vmov	r1, s16
 800f246:	2300      	movs	r3, #0
 800f248:	220a      	movs	r2, #10
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fb22 	bl	800f894 <__multadd>
 800f250:	45b8      	cmp	r8, r7
 800f252:	ee08 0a10 	vmov	s16, r0
 800f256:	f04f 0300 	mov.w	r3, #0
 800f25a:	f04f 020a 	mov.w	r2, #10
 800f25e:	4641      	mov	r1, r8
 800f260:	4620      	mov	r0, r4
 800f262:	d106      	bne.n	800f272 <_dtoa_r+0xb0a>
 800f264:	f000 fb16 	bl	800f894 <__multadd>
 800f268:	4680      	mov	r8, r0
 800f26a:	4607      	mov	r7, r0
 800f26c:	f109 0901 	add.w	r9, r9, #1
 800f270:	e772      	b.n	800f158 <_dtoa_r+0x9f0>
 800f272:	f000 fb0f 	bl	800f894 <__multadd>
 800f276:	4639      	mov	r1, r7
 800f278:	4680      	mov	r8, r0
 800f27a:	2300      	movs	r3, #0
 800f27c:	220a      	movs	r2, #10
 800f27e:	4620      	mov	r0, r4
 800f280:	f000 fb08 	bl	800f894 <__multadd>
 800f284:	4607      	mov	r7, r0
 800f286:	e7f1      	b.n	800f26c <_dtoa_r+0xb04>
 800f288:	9b03      	ldr	r3, [sp, #12]
 800f28a:	9302      	str	r3, [sp, #8]
 800f28c:	9d01      	ldr	r5, [sp, #4]
 800f28e:	ee18 0a10 	vmov	r0, s16
 800f292:	4631      	mov	r1, r6
 800f294:	f7ff f9db 	bl	800e64e <quorem>
 800f298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f29c:	9b01      	ldr	r3, [sp, #4]
 800f29e:	f805 ab01 	strb.w	sl, [r5], #1
 800f2a2:	1aea      	subs	r2, r5, r3
 800f2a4:	9b02      	ldr	r3, [sp, #8]
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	dd09      	ble.n	800f2be <_dtoa_r+0xb56>
 800f2aa:	ee18 1a10 	vmov	r1, s16
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	220a      	movs	r2, #10
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	f000 faee 	bl	800f894 <__multadd>
 800f2b8:	ee08 0a10 	vmov	s16, r0
 800f2bc:	e7e7      	b.n	800f28e <_dtoa_r+0xb26>
 800f2be:	9b02      	ldr	r3, [sp, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfc8      	it	gt
 800f2c4:	461d      	movgt	r5, r3
 800f2c6:	9b01      	ldr	r3, [sp, #4]
 800f2c8:	bfd8      	it	le
 800f2ca:	2501      	movle	r5, #1
 800f2cc:	441d      	add	r5, r3
 800f2ce:	f04f 0800 	mov.w	r8, #0
 800f2d2:	ee18 1a10 	vmov	r1, s16
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f000 fc8b 	bl	800fbf4 <__lshift>
 800f2de:	4631      	mov	r1, r6
 800f2e0:	ee08 0a10 	vmov	s16, r0
 800f2e4:	f000 fcf6 	bl	800fcd4 <__mcmp>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	dc91      	bgt.n	800f210 <_dtoa_r+0xaa8>
 800f2ec:	d102      	bne.n	800f2f4 <_dtoa_r+0xb8c>
 800f2ee:	f01a 0f01 	tst.w	sl, #1
 800f2f2:	d18d      	bne.n	800f210 <_dtoa_r+0xaa8>
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	461d      	mov	r5, r3
 800f2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2fc:	2a30      	cmp	r2, #48	; 0x30
 800f2fe:	d0fa      	beq.n	800f2f6 <_dtoa_r+0xb8e>
 800f300:	e6d7      	b.n	800f0b2 <_dtoa_r+0x94a>
 800f302:	9a01      	ldr	r2, [sp, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	d184      	bne.n	800f212 <_dtoa_r+0xaaa>
 800f308:	9b00      	ldr	r3, [sp, #0]
 800f30a:	3301      	adds	r3, #1
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	2331      	movs	r3, #49	; 0x31
 800f310:	7013      	strb	r3, [r2, #0]
 800f312:	e6ce      	b.n	800f0b2 <_dtoa_r+0x94a>
 800f314:	4b09      	ldr	r3, [pc, #36]	; (800f33c <_dtoa_r+0xbd4>)
 800f316:	f7ff ba95 	b.w	800e844 <_dtoa_r+0xdc>
 800f31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f47f aa6e 	bne.w	800e7fe <_dtoa_r+0x96>
 800f322:	4b07      	ldr	r3, [pc, #28]	; (800f340 <_dtoa_r+0xbd8>)
 800f324:	f7ff ba8e 	b.w	800e844 <_dtoa_r+0xdc>
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dcae      	bgt.n	800f28c <_dtoa_r+0xb24>
 800f32e:	9b06      	ldr	r3, [sp, #24]
 800f330:	2b02      	cmp	r3, #2
 800f332:	f73f aea8 	bgt.w	800f086 <_dtoa_r+0x91e>
 800f336:	e7a9      	b.n	800f28c <_dtoa_r+0xb24>
 800f338:	08010f5d 	.word	0x08010f5d
 800f33c:	08010db9 	.word	0x08010db9
 800f340:	08010ede 	.word	0x08010ede

0800f344 <__sflush_r>:
 800f344:	898a      	ldrh	r2, [r1, #12]
 800f346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34a:	4605      	mov	r5, r0
 800f34c:	0710      	lsls	r0, r2, #28
 800f34e:	460c      	mov	r4, r1
 800f350:	d458      	bmi.n	800f404 <__sflush_r+0xc0>
 800f352:	684b      	ldr	r3, [r1, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	dc05      	bgt.n	800f364 <__sflush_r+0x20>
 800f358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dc02      	bgt.n	800f364 <__sflush_r+0x20>
 800f35e:	2000      	movs	r0, #0
 800f360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f366:	2e00      	cmp	r6, #0
 800f368:	d0f9      	beq.n	800f35e <__sflush_r+0x1a>
 800f36a:	2300      	movs	r3, #0
 800f36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f370:	682f      	ldr	r7, [r5, #0]
 800f372:	602b      	str	r3, [r5, #0]
 800f374:	d032      	beq.n	800f3dc <__sflush_r+0x98>
 800f376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f378:	89a3      	ldrh	r3, [r4, #12]
 800f37a:	075a      	lsls	r2, r3, #29
 800f37c:	d505      	bpl.n	800f38a <__sflush_r+0x46>
 800f37e:	6863      	ldr	r3, [r4, #4]
 800f380:	1ac0      	subs	r0, r0, r3
 800f382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f384:	b10b      	cbz	r3, 800f38a <__sflush_r+0x46>
 800f386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f388:	1ac0      	subs	r0, r0, r3
 800f38a:	2300      	movs	r3, #0
 800f38c:	4602      	mov	r2, r0
 800f38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f390:	6a21      	ldr	r1, [r4, #32]
 800f392:	4628      	mov	r0, r5
 800f394:	47b0      	blx	r6
 800f396:	1c43      	adds	r3, r0, #1
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	d106      	bne.n	800f3aa <__sflush_r+0x66>
 800f39c:	6829      	ldr	r1, [r5, #0]
 800f39e:	291d      	cmp	r1, #29
 800f3a0:	d82c      	bhi.n	800f3fc <__sflush_r+0xb8>
 800f3a2:	4a2a      	ldr	r2, [pc, #168]	; (800f44c <__sflush_r+0x108>)
 800f3a4:	40ca      	lsrs	r2, r1
 800f3a6:	07d6      	lsls	r6, r2, #31
 800f3a8:	d528      	bpl.n	800f3fc <__sflush_r+0xb8>
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	6062      	str	r2, [r4, #4]
 800f3ae:	04d9      	lsls	r1, r3, #19
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	6022      	str	r2, [r4, #0]
 800f3b4:	d504      	bpl.n	800f3c0 <__sflush_r+0x7c>
 800f3b6:	1c42      	adds	r2, r0, #1
 800f3b8:	d101      	bne.n	800f3be <__sflush_r+0x7a>
 800f3ba:	682b      	ldr	r3, [r5, #0]
 800f3bc:	b903      	cbnz	r3, 800f3c0 <__sflush_r+0x7c>
 800f3be:	6560      	str	r0, [r4, #84]	; 0x54
 800f3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3c2:	602f      	str	r7, [r5, #0]
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	d0ca      	beq.n	800f35e <__sflush_r+0x1a>
 800f3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3cc:	4299      	cmp	r1, r3
 800f3ce:	d002      	beq.n	800f3d6 <__sflush_r+0x92>
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f000 fd97 	bl	800ff04 <_free_r>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	6360      	str	r0, [r4, #52]	; 0x34
 800f3da:	e7c1      	b.n	800f360 <__sflush_r+0x1c>
 800f3dc:	6a21      	ldr	r1, [r4, #32]
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47b0      	blx	r6
 800f3e4:	1c41      	adds	r1, r0, #1
 800f3e6:	d1c7      	bne.n	800f378 <__sflush_r+0x34>
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0c4      	beq.n	800f378 <__sflush_r+0x34>
 800f3ee:	2b1d      	cmp	r3, #29
 800f3f0:	d001      	beq.n	800f3f6 <__sflush_r+0xb2>
 800f3f2:	2b16      	cmp	r3, #22
 800f3f4:	d101      	bne.n	800f3fa <__sflush_r+0xb6>
 800f3f6:	602f      	str	r7, [r5, #0]
 800f3f8:	e7b1      	b.n	800f35e <__sflush_r+0x1a>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f400:	81a3      	strh	r3, [r4, #12]
 800f402:	e7ad      	b.n	800f360 <__sflush_r+0x1c>
 800f404:	690f      	ldr	r7, [r1, #16]
 800f406:	2f00      	cmp	r7, #0
 800f408:	d0a9      	beq.n	800f35e <__sflush_r+0x1a>
 800f40a:	0793      	lsls	r3, r2, #30
 800f40c:	680e      	ldr	r6, [r1, #0]
 800f40e:	bf08      	it	eq
 800f410:	694b      	ldreq	r3, [r1, #20]
 800f412:	600f      	str	r7, [r1, #0]
 800f414:	bf18      	it	ne
 800f416:	2300      	movne	r3, #0
 800f418:	eba6 0807 	sub.w	r8, r6, r7
 800f41c:	608b      	str	r3, [r1, #8]
 800f41e:	f1b8 0f00 	cmp.w	r8, #0
 800f422:	dd9c      	ble.n	800f35e <__sflush_r+0x1a>
 800f424:	6a21      	ldr	r1, [r4, #32]
 800f426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f428:	4643      	mov	r3, r8
 800f42a:	463a      	mov	r2, r7
 800f42c:	4628      	mov	r0, r5
 800f42e:	47b0      	blx	r6
 800f430:	2800      	cmp	r0, #0
 800f432:	dc06      	bgt.n	800f442 <__sflush_r+0xfe>
 800f434:	89a3      	ldrh	r3, [r4, #12]
 800f436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f43a:	81a3      	strh	r3, [r4, #12]
 800f43c:	f04f 30ff 	mov.w	r0, #4294967295
 800f440:	e78e      	b.n	800f360 <__sflush_r+0x1c>
 800f442:	4407      	add	r7, r0
 800f444:	eba8 0800 	sub.w	r8, r8, r0
 800f448:	e7e9      	b.n	800f41e <__sflush_r+0xda>
 800f44a:	bf00      	nop
 800f44c:	20400001 	.word	0x20400001

0800f450 <_fflush_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	690b      	ldr	r3, [r1, #16]
 800f454:	4605      	mov	r5, r0
 800f456:	460c      	mov	r4, r1
 800f458:	b913      	cbnz	r3, 800f460 <_fflush_r+0x10>
 800f45a:	2500      	movs	r5, #0
 800f45c:	4628      	mov	r0, r5
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	b118      	cbz	r0, 800f46a <_fflush_r+0x1a>
 800f462:	6983      	ldr	r3, [r0, #24]
 800f464:	b90b      	cbnz	r3, 800f46a <_fflush_r+0x1a>
 800f466:	f000 f887 	bl	800f578 <__sinit>
 800f46a:	4b14      	ldr	r3, [pc, #80]	; (800f4bc <_fflush_r+0x6c>)
 800f46c:	429c      	cmp	r4, r3
 800f46e:	d11b      	bne.n	800f4a8 <_fflush_r+0x58>
 800f470:	686c      	ldr	r4, [r5, #4]
 800f472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d0ef      	beq.n	800f45a <_fflush_r+0xa>
 800f47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f47c:	07d0      	lsls	r0, r2, #31
 800f47e:	d404      	bmi.n	800f48a <_fflush_r+0x3a>
 800f480:	0599      	lsls	r1, r3, #22
 800f482:	d402      	bmi.n	800f48a <_fflush_r+0x3a>
 800f484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f486:	f000 f91a 	bl	800f6be <__retarget_lock_acquire_recursive>
 800f48a:	4628      	mov	r0, r5
 800f48c:	4621      	mov	r1, r4
 800f48e:	f7ff ff59 	bl	800f344 <__sflush_r>
 800f492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f494:	07da      	lsls	r2, r3, #31
 800f496:	4605      	mov	r5, r0
 800f498:	d4e0      	bmi.n	800f45c <_fflush_r+0xc>
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	059b      	lsls	r3, r3, #22
 800f49e:	d4dd      	bmi.n	800f45c <_fflush_r+0xc>
 800f4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4a2:	f000 f90d 	bl	800f6c0 <__retarget_lock_release_recursive>
 800f4a6:	e7d9      	b.n	800f45c <_fflush_r+0xc>
 800f4a8:	4b05      	ldr	r3, [pc, #20]	; (800f4c0 <_fflush_r+0x70>)
 800f4aa:	429c      	cmp	r4, r3
 800f4ac:	d101      	bne.n	800f4b2 <_fflush_r+0x62>
 800f4ae:	68ac      	ldr	r4, [r5, #8]
 800f4b0:	e7df      	b.n	800f472 <_fflush_r+0x22>
 800f4b2:	4b04      	ldr	r3, [pc, #16]	; (800f4c4 <_fflush_r+0x74>)
 800f4b4:	429c      	cmp	r4, r3
 800f4b6:	bf08      	it	eq
 800f4b8:	68ec      	ldreq	r4, [r5, #12]
 800f4ba:	e7da      	b.n	800f472 <_fflush_r+0x22>
 800f4bc:	08010f90 	.word	0x08010f90
 800f4c0:	08010fb0 	.word	0x08010fb0
 800f4c4:	08010f70 	.word	0x08010f70

0800f4c8 <std>:
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	b510      	push	{r4, lr}
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	e9c0 3300 	strd	r3, r3, [r0]
 800f4d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4d6:	6083      	str	r3, [r0, #8]
 800f4d8:	8181      	strh	r1, [r0, #12]
 800f4da:	6643      	str	r3, [r0, #100]	; 0x64
 800f4dc:	81c2      	strh	r2, [r0, #14]
 800f4de:	6183      	str	r3, [r0, #24]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	2208      	movs	r2, #8
 800f4e4:	305c      	adds	r0, #92	; 0x5c
 800f4e6:	f7fe f897 	bl	800d618 <memset>
 800f4ea:	4b05      	ldr	r3, [pc, #20]	; (800f500 <std+0x38>)
 800f4ec:	6263      	str	r3, [r4, #36]	; 0x24
 800f4ee:	4b05      	ldr	r3, [pc, #20]	; (800f504 <std+0x3c>)
 800f4f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4f2:	4b05      	ldr	r3, [pc, #20]	; (800f508 <std+0x40>)
 800f4f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4f6:	4b05      	ldr	r3, [pc, #20]	; (800f50c <std+0x44>)
 800f4f8:	6224      	str	r4, [r4, #32]
 800f4fa:	6323      	str	r3, [r4, #48]	; 0x30
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	bf00      	nop
 800f500:	08010481 	.word	0x08010481
 800f504:	080104a3 	.word	0x080104a3
 800f508:	080104db 	.word	0x080104db
 800f50c:	080104ff 	.word	0x080104ff

0800f510 <_cleanup_r>:
 800f510:	4901      	ldr	r1, [pc, #4]	; (800f518 <_cleanup_r+0x8>)
 800f512:	f000 b8af 	b.w	800f674 <_fwalk_reent>
 800f516:	bf00      	nop
 800f518:	0800f451 	.word	0x0800f451

0800f51c <__sfmoreglue>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	2268      	movs	r2, #104	; 0x68
 800f520:	1e4d      	subs	r5, r1, #1
 800f522:	4355      	muls	r5, r2
 800f524:	460e      	mov	r6, r1
 800f526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f52a:	f000 fd57 	bl	800ffdc <_malloc_r>
 800f52e:	4604      	mov	r4, r0
 800f530:	b140      	cbz	r0, 800f544 <__sfmoreglue+0x28>
 800f532:	2100      	movs	r1, #0
 800f534:	e9c0 1600 	strd	r1, r6, [r0]
 800f538:	300c      	adds	r0, #12
 800f53a:	60a0      	str	r0, [r4, #8]
 800f53c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f540:	f7fe f86a 	bl	800d618 <memset>
 800f544:	4620      	mov	r0, r4
 800f546:	bd70      	pop	{r4, r5, r6, pc}

0800f548 <__sfp_lock_acquire>:
 800f548:	4801      	ldr	r0, [pc, #4]	; (800f550 <__sfp_lock_acquire+0x8>)
 800f54a:	f000 b8b8 	b.w	800f6be <__retarget_lock_acquire_recursive>
 800f54e:	bf00      	nop
 800f550:	200007ed 	.word	0x200007ed

0800f554 <__sfp_lock_release>:
 800f554:	4801      	ldr	r0, [pc, #4]	; (800f55c <__sfp_lock_release+0x8>)
 800f556:	f000 b8b3 	b.w	800f6c0 <__retarget_lock_release_recursive>
 800f55a:	bf00      	nop
 800f55c:	200007ed 	.word	0x200007ed

0800f560 <__sinit_lock_acquire>:
 800f560:	4801      	ldr	r0, [pc, #4]	; (800f568 <__sinit_lock_acquire+0x8>)
 800f562:	f000 b8ac 	b.w	800f6be <__retarget_lock_acquire_recursive>
 800f566:	bf00      	nop
 800f568:	200007ee 	.word	0x200007ee

0800f56c <__sinit_lock_release>:
 800f56c:	4801      	ldr	r0, [pc, #4]	; (800f574 <__sinit_lock_release+0x8>)
 800f56e:	f000 b8a7 	b.w	800f6c0 <__retarget_lock_release_recursive>
 800f572:	bf00      	nop
 800f574:	200007ee 	.word	0x200007ee

0800f578 <__sinit>:
 800f578:	b510      	push	{r4, lr}
 800f57a:	4604      	mov	r4, r0
 800f57c:	f7ff fff0 	bl	800f560 <__sinit_lock_acquire>
 800f580:	69a3      	ldr	r3, [r4, #24]
 800f582:	b11b      	cbz	r3, 800f58c <__sinit+0x14>
 800f584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f588:	f7ff bff0 	b.w	800f56c <__sinit_lock_release>
 800f58c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f590:	6523      	str	r3, [r4, #80]	; 0x50
 800f592:	4b13      	ldr	r3, [pc, #76]	; (800f5e0 <__sinit+0x68>)
 800f594:	4a13      	ldr	r2, [pc, #76]	; (800f5e4 <__sinit+0x6c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	62a2      	str	r2, [r4, #40]	; 0x28
 800f59a:	42a3      	cmp	r3, r4
 800f59c:	bf04      	itt	eq
 800f59e:	2301      	moveq	r3, #1
 800f5a0:	61a3      	streq	r3, [r4, #24]
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f000 f820 	bl	800f5e8 <__sfp>
 800f5a8:	6060      	str	r0, [r4, #4]
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 f81c 	bl	800f5e8 <__sfp>
 800f5b0:	60a0      	str	r0, [r4, #8]
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 f818 	bl	800f5e8 <__sfp>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	60e0      	str	r0, [r4, #12]
 800f5bc:	2104      	movs	r1, #4
 800f5be:	6860      	ldr	r0, [r4, #4]
 800f5c0:	f7ff ff82 	bl	800f4c8 <std>
 800f5c4:	68a0      	ldr	r0, [r4, #8]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	2109      	movs	r1, #9
 800f5ca:	f7ff ff7d 	bl	800f4c8 <std>
 800f5ce:	68e0      	ldr	r0, [r4, #12]
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	2112      	movs	r1, #18
 800f5d4:	f7ff ff78 	bl	800f4c8 <std>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	61a3      	str	r3, [r4, #24]
 800f5dc:	e7d2      	b.n	800f584 <__sinit+0xc>
 800f5de:	bf00      	nop
 800f5e0:	08010d94 	.word	0x08010d94
 800f5e4:	0800f511 	.word	0x0800f511

0800f5e8 <__sfp>:
 800f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ea:	4607      	mov	r7, r0
 800f5ec:	f7ff ffac 	bl	800f548 <__sfp_lock_acquire>
 800f5f0:	4b1e      	ldr	r3, [pc, #120]	; (800f66c <__sfp+0x84>)
 800f5f2:	681e      	ldr	r6, [r3, #0]
 800f5f4:	69b3      	ldr	r3, [r6, #24]
 800f5f6:	b913      	cbnz	r3, 800f5fe <__sfp+0x16>
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f7ff ffbd 	bl	800f578 <__sinit>
 800f5fe:	3648      	adds	r6, #72	; 0x48
 800f600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f604:	3b01      	subs	r3, #1
 800f606:	d503      	bpl.n	800f610 <__sfp+0x28>
 800f608:	6833      	ldr	r3, [r6, #0]
 800f60a:	b30b      	cbz	r3, 800f650 <__sfp+0x68>
 800f60c:	6836      	ldr	r6, [r6, #0]
 800f60e:	e7f7      	b.n	800f600 <__sfp+0x18>
 800f610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f614:	b9d5      	cbnz	r5, 800f64c <__sfp+0x64>
 800f616:	4b16      	ldr	r3, [pc, #88]	; (800f670 <__sfp+0x88>)
 800f618:	60e3      	str	r3, [r4, #12]
 800f61a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f61e:	6665      	str	r5, [r4, #100]	; 0x64
 800f620:	f000 f84c 	bl	800f6bc <__retarget_lock_init_recursive>
 800f624:	f7ff ff96 	bl	800f554 <__sfp_lock_release>
 800f628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f62c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f630:	6025      	str	r5, [r4, #0]
 800f632:	61a5      	str	r5, [r4, #24]
 800f634:	2208      	movs	r2, #8
 800f636:	4629      	mov	r1, r5
 800f638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f63c:	f7fd ffec 	bl	800d618 <memset>
 800f640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f648:	4620      	mov	r0, r4
 800f64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f64c:	3468      	adds	r4, #104	; 0x68
 800f64e:	e7d9      	b.n	800f604 <__sfp+0x1c>
 800f650:	2104      	movs	r1, #4
 800f652:	4638      	mov	r0, r7
 800f654:	f7ff ff62 	bl	800f51c <__sfmoreglue>
 800f658:	4604      	mov	r4, r0
 800f65a:	6030      	str	r0, [r6, #0]
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d1d5      	bne.n	800f60c <__sfp+0x24>
 800f660:	f7ff ff78 	bl	800f554 <__sfp_lock_release>
 800f664:	230c      	movs	r3, #12
 800f666:	603b      	str	r3, [r7, #0]
 800f668:	e7ee      	b.n	800f648 <__sfp+0x60>
 800f66a:	bf00      	nop
 800f66c:	08010d94 	.word	0x08010d94
 800f670:	ffff0001 	.word	0xffff0001

0800f674 <_fwalk_reent>:
 800f674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f678:	4606      	mov	r6, r0
 800f67a:	4688      	mov	r8, r1
 800f67c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f680:	2700      	movs	r7, #0
 800f682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f686:	f1b9 0901 	subs.w	r9, r9, #1
 800f68a:	d505      	bpl.n	800f698 <_fwalk_reent+0x24>
 800f68c:	6824      	ldr	r4, [r4, #0]
 800f68e:	2c00      	cmp	r4, #0
 800f690:	d1f7      	bne.n	800f682 <_fwalk_reent+0xe>
 800f692:	4638      	mov	r0, r7
 800f694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f698:	89ab      	ldrh	r3, [r5, #12]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d907      	bls.n	800f6ae <_fwalk_reent+0x3a>
 800f69e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	d003      	beq.n	800f6ae <_fwalk_reent+0x3a>
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	47c0      	blx	r8
 800f6ac:	4307      	orrs	r7, r0
 800f6ae:	3568      	adds	r5, #104	; 0x68
 800f6b0:	e7e9      	b.n	800f686 <_fwalk_reent+0x12>
	...

0800f6b4 <_localeconv_r>:
 800f6b4:	4800      	ldr	r0, [pc, #0]	; (800f6b8 <_localeconv_r+0x4>)
 800f6b6:	4770      	bx	lr
 800f6b8:	20000384 	.word	0x20000384

0800f6bc <__retarget_lock_init_recursive>:
 800f6bc:	4770      	bx	lr

0800f6be <__retarget_lock_acquire_recursive>:
 800f6be:	4770      	bx	lr

0800f6c0 <__retarget_lock_release_recursive>:
 800f6c0:	4770      	bx	lr

0800f6c2 <__swhatbuf_r>:
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	460e      	mov	r6, r1
 800f6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ca:	2900      	cmp	r1, #0
 800f6cc:	b096      	sub	sp, #88	; 0x58
 800f6ce:	4614      	mov	r4, r2
 800f6d0:	461d      	mov	r5, r3
 800f6d2:	da08      	bge.n	800f6e6 <__swhatbuf_r+0x24>
 800f6d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	602a      	str	r2, [r5, #0]
 800f6dc:	061a      	lsls	r2, r3, #24
 800f6de:	d410      	bmi.n	800f702 <__swhatbuf_r+0x40>
 800f6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e4:	e00e      	b.n	800f704 <__swhatbuf_r+0x42>
 800f6e6:	466a      	mov	r2, sp
 800f6e8:	f000 ff30 	bl	801054c <_fstat_r>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	dbf1      	blt.n	800f6d4 <__swhatbuf_r+0x12>
 800f6f0:	9a01      	ldr	r2, [sp, #4]
 800f6f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6fa:	425a      	negs	r2, r3
 800f6fc:	415a      	adcs	r2, r3
 800f6fe:	602a      	str	r2, [r5, #0]
 800f700:	e7ee      	b.n	800f6e0 <__swhatbuf_r+0x1e>
 800f702:	2340      	movs	r3, #64	; 0x40
 800f704:	2000      	movs	r0, #0
 800f706:	6023      	str	r3, [r4, #0]
 800f708:	b016      	add	sp, #88	; 0x58
 800f70a:	bd70      	pop	{r4, r5, r6, pc}

0800f70c <__smakebuf_r>:
 800f70c:	898b      	ldrh	r3, [r1, #12]
 800f70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f710:	079d      	lsls	r5, r3, #30
 800f712:	4606      	mov	r6, r0
 800f714:	460c      	mov	r4, r1
 800f716:	d507      	bpl.n	800f728 <__smakebuf_r+0x1c>
 800f718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	2301      	movs	r3, #1
 800f722:	6163      	str	r3, [r4, #20]
 800f724:	b002      	add	sp, #8
 800f726:	bd70      	pop	{r4, r5, r6, pc}
 800f728:	ab01      	add	r3, sp, #4
 800f72a:	466a      	mov	r2, sp
 800f72c:	f7ff ffc9 	bl	800f6c2 <__swhatbuf_r>
 800f730:	9900      	ldr	r1, [sp, #0]
 800f732:	4605      	mov	r5, r0
 800f734:	4630      	mov	r0, r6
 800f736:	f000 fc51 	bl	800ffdc <_malloc_r>
 800f73a:	b948      	cbnz	r0, 800f750 <__smakebuf_r+0x44>
 800f73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f740:	059a      	lsls	r2, r3, #22
 800f742:	d4ef      	bmi.n	800f724 <__smakebuf_r+0x18>
 800f744:	f023 0303 	bic.w	r3, r3, #3
 800f748:	f043 0302 	orr.w	r3, r3, #2
 800f74c:	81a3      	strh	r3, [r4, #12]
 800f74e:	e7e3      	b.n	800f718 <__smakebuf_r+0xc>
 800f750:	4b0d      	ldr	r3, [pc, #52]	; (800f788 <__smakebuf_r+0x7c>)
 800f752:	62b3      	str	r3, [r6, #40]	; 0x28
 800f754:	89a3      	ldrh	r3, [r4, #12]
 800f756:	6020      	str	r0, [r4, #0]
 800f758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f75c:	81a3      	strh	r3, [r4, #12]
 800f75e:	9b00      	ldr	r3, [sp, #0]
 800f760:	6163      	str	r3, [r4, #20]
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	6120      	str	r0, [r4, #16]
 800f766:	b15b      	cbz	r3, 800f780 <__smakebuf_r+0x74>
 800f768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f76c:	4630      	mov	r0, r6
 800f76e:	f000 feff 	bl	8010570 <_isatty_r>
 800f772:	b128      	cbz	r0, 800f780 <__smakebuf_r+0x74>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f023 0303 	bic.w	r3, r3, #3
 800f77a:	f043 0301 	orr.w	r3, r3, #1
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	89a0      	ldrh	r0, [r4, #12]
 800f782:	4305      	orrs	r5, r0
 800f784:	81a5      	strh	r5, [r4, #12]
 800f786:	e7cd      	b.n	800f724 <__smakebuf_r+0x18>
 800f788:	0800f511 	.word	0x0800f511

0800f78c <malloc>:
 800f78c:	4b02      	ldr	r3, [pc, #8]	; (800f798 <malloc+0xc>)
 800f78e:	4601      	mov	r1, r0
 800f790:	6818      	ldr	r0, [r3, #0]
 800f792:	f000 bc23 	b.w	800ffdc <_malloc_r>
 800f796:	bf00      	nop
 800f798:	20000230 	.word	0x20000230

0800f79c <memmove>:
 800f79c:	4288      	cmp	r0, r1
 800f79e:	b510      	push	{r4, lr}
 800f7a0:	eb01 0402 	add.w	r4, r1, r2
 800f7a4:	d902      	bls.n	800f7ac <memmove+0x10>
 800f7a6:	4284      	cmp	r4, r0
 800f7a8:	4623      	mov	r3, r4
 800f7aa:	d807      	bhi.n	800f7bc <memmove+0x20>
 800f7ac:	1e43      	subs	r3, r0, #1
 800f7ae:	42a1      	cmp	r1, r4
 800f7b0:	d008      	beq.n	800f7c4 <memmove+0x28>
 800f7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ba:	e7f8      	b.n	800f7ae <memmove+0x12>
 800f7bc:	4402      	add	r2, r0
 800f7be:	4601      	mov	r1, r0
 800f7c0:	428a      	cmp	r2, r1
 800f7c2:	d100      	bne.n	800f7c6 <memmove+0x2a>
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ce:	e7f7      	b.n	800f7c0 <memmove+0x24>

0800f7d0 <_Balloc>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	460d      	mov	r5, r1
 800f7d8:	b976      	cbnz	r6, 800f7f8 <_Balloc+0x28>
 800f7da:	2010      	movs	r0, #16
 800f7dc:	f7ff ffd6 	bl	800f78c <malloc>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	6260      	str	r0, [r4, #36]	; 0x24
 800f7e4:	b920      	cbnz	r0, 800f7f0 <_Balloc+0x20>
 800f7e6:	4b18      	ldr	r3, [pc, #96]	; (800f848 <_Balloc+0x78>)
 800f7e8:	4818      	ldr	r0, [pc, #96]	; (800f84c <_Balloc+0x7c>)
 800f7ea:	2166      	movs	r1, #102	; 0x66
 800f7ec:	f7fd fea8 	bl	800d540 <__assert_func>
 800f7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7f4:	6006      	str	r6, [r0, #0]
 800f7f6:	60c6      	str	r6, [r0, #12]
 800f7f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f7fa:	68f3      	ldr	r3, [r6, #12]
 800f7fc:	b183      	cbz	r3, 800f820 <_Balloc+0x50>
 800f7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f806:	b9b8      	cbnz	r0, 800f838 <_Balloc+0x68>
 800f808:	2101      	movs	r1, #1
 800f80a:	fa01 f605 	lsl.w	r6, r1, r5
 800f80e:	1d72      	adds	r2, r6, #5
 800f810:	0092      	lsls	r2, r2, #2
 800f812:	4620      	mov	r0, r4
 800f814:	f000 fb60 	bl	800fed8 <_calloc_r>
 800f818:	b160      	cbz	r0, 800f834 <_Balloc+0x64>
 800f81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f81e:	e00e      	b.n	800f83e <_Balloc+0x6e>
 800f820:	2221      	movs	r2, #33	; 0x21
 800f822:	2104      	movs	r1, #4
 800f824:	4620      	mov	r0, r4
 800f826:	f000 fb57 	bl	800fed8 <_calloc_r>
 800f82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f82c:	60f0      	str	r0, [r6, #12]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1e4      	bne.n	800f7fe <_Balloc+0x2e>
 800f834:	2000      	movs	r0, #0
 800f836:	bd70      	pop	{r4, r5, r6, pc}
 800f838:	6802      	ldr	r2, [r0, #0]
 800f83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f83e:	2300      	movs	r3, #0
 800f840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f844:	e7f7      	b.n	800f836 <_Balloc+0x66>
 800f846:	bf00      	nop
 800f848:	08010eeb 	.word	0x08010eeb
 800f84c:	08010fd0 	.word	0x08010fd0

0800f850 <_Bfree>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f854:	4605      	mov	r5, r0
 800f856:	460c      	mov	r4, r1
 800f858:	b976      	cbnz	r6, 800f878 <_Bfree+0x28>
 800f85a:	2010      	movs	r0, #16
 800f85c:	f7ff ff96 	bl	800f78c <malloc>
 800f860:	4602      	mov	r2, r0
 800f862:	6268      	str	r0, [r5, #36]	; 0x24
 800f864:	b920      	cbnz	r0, 800f870 <_Bfree+0x20>
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <_Bfree+0x3c>)
 800f868:	4809      	ldr	r0, [pc, #36]	; (800f890 <_Bfree+0x40>)
 800f86a:	218a      	movs	r1, #138	; 0x8a
 800f86c:	f7fd fe68 	bl	800d540 <__assert_func>
 800f870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f874:	6006      	str	r6, [r0, #0]
 800f876:	60c6      	str	r6, [r0, #12]
 800f878:	b13c      	cbz	r4, 800f88a <_Bfree+0x3a>
 800f87a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f87c:	6862      	ldr	r2, [r4, #4]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f884:	6021      	str	r1, [r4, #0]
 800f886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f88a:	bd70      	pop	{r4, r5, r6, pc}
 800f88c:	08010eeb 	.word	0x08010eeb
 800f890:	08010fd0 	.word	0x08010fd0

0800f894 <__multadd>:
 800f894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f898:	690d      	ldr	r5, [r1, #16]
 800f89a:	4607      	mov	r7, r0
 800f89c:	460c      	mov	r4, r1
 800f89e:	461e      	mov	r6, r3
 800f8a0:	f101 0c14 	add.w	ip, r1, #20
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800f8aa:	b299      	uxth	r1, r3
 800f8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800f8b0:	0c1e      	lsrs	r6, r3, #16
 800f8b2:	0c0b      	lsrs	r3, r1, #16
 800f8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800f8b8:	b289      	uxth	r1, r1
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8c0:	4285      	cmp	r5, r0
 800f8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800f8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8ca:	dcec      	bgt.n	800f8a6 <__multadd+0x12>
 800f8cc:	b30e      	cbz	r6, 800f912 <__multadd+0x7e>
 800f8ce:	68a3      	ldr	r3, [r4, #8]
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	dc19      	bgt.n	800f908 <__multadd+0x74>
 800f8d4:	6861      	ldr	r1, [r4, #4]
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	3101      	adds	r1, #1
 800f8da:	f7ff ff79 	bl	800f7d0 <_Balloc>
 800f8de:	4680      	mov	r8, r0
 800f8e0:	b928      	cbnz	r0, 800f8ee <__multadd+0x5a>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	4b0c      	ldr	r3, [pc, #48]	; (800f918 <__multadd+0x84>)
 800f8e6:	480d      	ldr	r0, [pc, #52]	; (800f91c <__multadd+0x88>)
 800f8e8:	21b5      	movs	r1, #181	; 0xb5
 800f8ea:	f7fd fe29 	bl	800d540 <__assert_func>
 800f8ee:	6922      	ldr	r2, [r4, #16]
 800f8f0:	3202      	adds	r2, #2
 800f8f2:	f104 010c 	add.w	r1, r4, #12
 800f8f6:	0092      	lsls	r2, r2, #2
 800f8f8:	300c      	adds	r0, #12
 800f8fa:	f7fd fe7f 	bl	800d5fc <memcpy>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4638      	mov	r0, r7
 800f902:	f7ff ffa5 	bl	800f850 <_Bfree>
 800f906:	4644      	mov	r4, r8
 800f908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f90c:	3501      	adds	r5, #1
 800f90e:	615e      	str	r6, [r3, #20]
 800f910:	6125      	str	r5, [r4, #16]
 800f912:	4620      	mov	r0, r4
 800f914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f918:	08010f5d 	.word	0x08010f5d
 800f91c:	08010fd0 	.word	0x08010fd0

0800f920 <__hi0bits>:
 800f920:	0c03      	lsrs	r3, r0, #16
 800f922:	041b      	lsls	r3, r3, #16
 800f924:	b9d3      	cbnz	r3, 800f95c <__hi0bits+0x3c>
 800f926:	0400      	lsls	r0, r0, #16
 800f928:	2310      	movs	r3, #16
 800f92a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f92e:	bf04      	itt	eq
 800f930:	0200      	lsleq	r0, r0, #8
 800f932:	3308      	addeq	r3, #8
 800f934:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f938:	bf04      	itt	eq
 800f93a:	0100      	lsleq	r0, r0, #4
 800f93c:	3304      	addeq	r3, #4
 800f93e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f942:	bf04      	itt	eq
 800f944:	0080      	lsleq	r0, r0, #2
 800f946:	3302      	addeq	r3, #2
 800f948:	2800      	cmp	r0, #0
 800f94a:	db05      	blt.n	800f958 <__hi0bits+0x38>
 800f94c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f950:	f103 0301 	add.w	r3, r3, #1
 800f954:	bf08      	it	eq
 800f956:	2320      	moveq	r3, #32
 800f958:	4618      	mov	r0, r3
 800f95a:	4770      	bx	lr
 800f95c:	2300      	movs	r3, #0
 800f95e:	e7e4      	b.n	800f92a <__hi0bits+0xa>

0800f960 <__lo0bits>:
 800f960:	6803      	ldr	r3, [r0, #0]
 800f962:	f013 0207 	ands.w	r2, r3, #7
 800f966:	4601      	mov	r1, r0
 800f968:	d00b      	beq.n	800f982 <__lo0bits+0x22>
 800f96a:	07da      	lsls	r2, r3, #31
 800f96c:	d423      	bmi.n	800f9b6 <__lo0bits+0x56>
 800f96e:	0798      	lsls	r0, r3, #30
 800f970:	bf49      	itett	mi
 800f972:	085b      	lsrmi	r3, r3, #1
 800f974:	089b      	lsrpl	r3, r3, #2
 800f976:	2001      	movmi	r0, #1
 800f978:	600b      	strmi	r3, [r1, #0]
 800f97a:	bf5c      	itt	pl
 800f97c:	600b      	strpl	r3, [r1, #0]
 800f97e:	2002      	movpl	r0, #2
 800f980:	4770      	bx	lr
 800f982:	b298      	uxth	r0, r3
 800f984:	b9a8      	cbnz	r0, 800f9b2 <__lo0bits+0x52>
 800f986:	0c1b      	lsrs	r3, r3, #16
 800f988:	2010      	movs	r0, #16
 800f98a:	b2da      	uxtb	r2, r3
 800f98c:	b90a      	cbnz	r2, 800f992 <__lo0bits+0x32>
 800f98e:	3008      	adds	r0, #8
 800f990:	0a1b      	lsrs	r3, r3, #8
 800f992:	071a      	lsls	r2, r3, #28
 800f994:	bf04      	itt	eq
 800f996:	091b      	lsreq	r3, r3, #4
 800f998:	3004      	addeq	r0, #4
 800f99a:	079a      	lsls	r2, r3, #30
 800f99c:	bf04      	itt	eq
 800f99e:	089b      	lsreq	r3, r3, #2
 800f9a0:	3002      	addeq	r0, #2
 800f9a2:	07da      	lsls	r2, r3, #31
 800f9a4:	d403      	bmi.n	800f9ae <__lo0bits+0x4e>
 800f9a6:	085b      	lsrs	r3, r3, #1
 800f9a8:	f100 0001 	add.w	r0, r0, #1
 800f9ac:	d005      	beq.n	800f9ba <__lo0bits+0x5a>
 800f9ae:	600b      	str	r3, [r1, #0]
 800f9b0:	4770      	bx	lr
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	e7e9      	b.n	800f98a <__lo0bits+0x2a>
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	4770      	bx	lr
 800f9ba:	2020      	movs	r0, #32
 800f9bc:	4770      	bx	lr
	...

0800f9c0 <__i2b>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	2101      	movs	r1, #1
 800f9c6:	f7ff ff03 	bl	800f7d0 <_Balloc>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	b928      	cbnz	r0, 800f9da <__i2b+0x1a>
 800f9ce:	4b05      	ldr	r3, [pc, #20]	; (800f9e4 <__i2b+0x24>)
 800f9d0:	4805      	ldr	r0, [pc, #20]	; (800f9e8 <__i2b+0x28>)
 800f9d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9d6:	f7fd fdb3 	bl	800d540 <__assert_func>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	6144      	str	r4, [r0, #20]
 800f9de:	6103      	str	r3, [r0, #16]
 800f9e0:	bd10      	pop	{r4, pc}
 800f9e2:	bf00      	nop
 800f9e4:	08010f5d 	.word	0x08010f5d
 800f9e8:	08010fd0 	.word	0x08010fd0

0800f9ec <__multiply>:
 800f9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	4691      	mov	r9, r2
 800f9f2:	690a      	ldr	r2, [r1, #16]
 800f9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	bfb8      	it	lt
 800f9fc:	460b      	movlt	r3, r1
 800f9fe:	460c      	mov	r4, r1
 800fa00:	bfbc      	itt	lt
 800fa02:	464c      	movlt	r4, r9
 800fa04:	4699      	movlt	r9, r3
 800fa06:	6927      	ldr	r7, [r4, #16]
 800fa08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa0c:	68a3      	ldr	r3, [r4, #8]
 800fa0e:	6861      	ldr	r1, [r4, #4]
 800fa10:	eb07 060a 	add.w	r6, r7, sl
 800fa14:	42b3      	cmp	r3, r6
 800fa16:	b085      	sub	sp, #20
 800fa18:	bfb8      	it	lt
 800fa1a:	3101      	addlt	r1, #1
 800fa1c:	f7ff fed8 	bl	800f7d0 <_Balloc>
 800fa20:	b930      	cbnz	r0, 800fa30 <__multiply+0x44>
 800fa22:	4602      	mov	r2, r0
 800fa24:	4b44      	ldr	r3, [pc, #272]	; (800fb38 <__multiply+0x14c>)
 800fa26:	4845      	ldr	r0, [pc, #276]	; (800fb3c <__multiply+0x150>)
 800fa28:	f240 115d 	movw	r1, #349	; 0x15d
 800fa2c:	f7fd fd88 	bl	800d540 <__assert_func>
 800fa30:	f100 0514 	add.w	r5, r0, #20
 800fa34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa38:	462b      	mov	r3, r5
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	4543      	cmp	r3, r8
 800fa3e:	d321      	bcc.n	800fa84 <__multiply+0x98>
 800fa40:	f104 0314 	add.w	r3, r4, #20
 800fa44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa48:	f109 0314 	add.w	r3, r9, #20
 800fa4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa50:	9202      	str	r2, [sp, #8]
 800fa52:	1b3a      	subs	r2, r7, r4
 800fa54:	3a15      	subs	r2, #21
 800fa56:	f022 0203 	bic.w	r2, r2, #3
 800fa5a:	3204      	adds	r2, #4
 800fa5c:	f104 0115 	add.w	r1, r4, #21
 800fa60:	428f      	cmp	r7, r1
 800fa62:	bf38      	it	cc
 800fa64:	2204      	movcc	r2, #4
 800fa66:	9201      	str	r2, [sp, #4]
 800fa68:	9a02      	ldr	r2, [sp, #8]
 800fa6a:	9303      	str	r3, [sp, #12]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d80c      	bhi.n	800fa8a <__multiply+0x9e>
 800fa70:	2e00      	cmp	r6, #0
 800fa72:	dd03      	ble.n	800fa7c <__multiply+0x90>
 800fa74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d05a      	beq.n	800fb32 <__multiply+0x146>
 800fa7c:	6106      	str	r6, [r0, #16]
 800fa7e:	b005      	add	sp, #20
 800fa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa84:	f843 2b04 	str.w	r2, [r3], #4
 800fa88:	e7d8      	b.n	800fa3c <__multiply+0x50>
 800fa8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa8e:	f1ba 0f00 	cmp.w	sl, #0
 800fa92:	d024      	beq.n	800fade <__multiply+0xf2>
 800fa94:	f104 0e14 	add.w	lr, r4, #20
 800fa98:	46a9      	mov	r9, r5
 800fa9a:	f04f 0c00 	mov.w	ip, #0
 800fa9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faa2:	f8d9 1000 	ldr.w	r1, [r9]
 800faa6:	fa1f fb82 	uxth.w	fp, r2
 800faaa:	b289      	uxth	r1, r1
 800faac:	fb0a 110b 	mla	r1, sl, fp, r1
 800fab0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fab4:	f8d9 2000 	ldr.w	r2, [r9]
 800fab8:	4461      	add	r1, ip
 800faba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fabe:	fb0a c20b 	mla	r2, sl, fp, ip
 800fac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fac6:	b289      	uxth	r1, r1
 800fac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800facc:	4577      	cmp	r7, lr
 800face:	f849 1b04 	str.w	r1, [r9], #4
 800fad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fad6:	d8e2      	bhi.n	800fa9e <__multiply+0xb2>
 800fad8:	9a01      	ldr	r2, [sp, #4]
 800fada:	f845 c002 	str.w	ip, [r5, r2]
 800fade:	9a03      	ldr	r2, [sp, #12]
 800fae0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fae4:	3304      	adds	r3, #4
 800fae6:	f1b9 0f00 	cmp.w	r9, #0
 800faea:	d020      	beq.n	800fb2e <__multiply+0x142>
 800faec:	6829      	ldr	r1, [r5, #0]
 800faee:	f104 0c14 	add.w	ip, r4, #20
 800faf2:	46ae      	mov	lr, r5
 800faf4:	f04f 0a00 	mov.w	sl, #0
 800faf8:	f8bc b000 	ldrh.w	fp, [ip]
 800fafc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb00:	fb09 220b 	mla	r2, r9, fp, r2
 800fb04:	4492      	add	sl, r2
 800fb06:	b289      	uxth	r1, r1
 800fb08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fb0c:	f84e 1b04 	str.w	r1, [lr], #4
 800fb10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb14:	f8be 1000 	ldrh.w	r1, [lr]
 800fb18:	0c12      	lsrs	r2, r2, #16
 800fb1a:	fb09 1102 	mla	r1, r9, r2, r1
 800fb1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb22:	4567      	cmp	r7, ip
 800fb24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb28:	d8e6      	bhi.n	800faf8 <__multiply+0x10c>
 800fb2a:	9a01      	ldr	r2, [sp, #4]
 800fb2c:	50a9      	str	r1, [r5, r2]
 800fb2e:	3504      	adds	r5, #4
 800fb30:	e79a      	b.n	800fa68 <__multiply+0x7c>
 800fb32:	3e01      	subs	r6, #1
 800fb34:	e79c      	b.n	800fa70 <__multiply+0x84>
 800fb36:	bf00      	nop
 800fb38:	08010f5d 	.word	0x08010f5d
 800fb3c:	08010fd0 	.word	0x08010fd0

0800fb40 <__pow5mult>:
 800fb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb44:	4615      	mov	r5, r2
 800fb46:	f012 0203 	ands.w	r2, r2, #3
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	460f      	mov	r7, r1
 800fb4e:	d007      	beq.n	800fb60 <__pow5mult+0x20>
 800fb50:	4c25      	ldr	r4, [pc, #148]	; (800fbe8 <__pow5mult+0xa8>)
 800fb52:	3a01      	subs	r2, #1
 800fb54:	2300      	movs	r3, #0
 800fb56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb5a:	f7ff fe9b 	bl	800f894 <__multadd>
 800fb5e:	4607      	mov	r7, r0
 800fb60:	10ad      	asrs	r5, r5, #2
 800fb62:	d03d      	beq.n	800fbe0 <__pow5mult+0xa0>
 800fb64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb66:	b97c      	cbnz	r4, 800fb88 <__pow5mult+0x48>
 800fb68:	2010      	movs	r0, #16
 800fb6a:	f7ff fe0f 	bl	800f78c <malloc>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	6270      	str	r0, [r6, #36]	; 0x24
 800fb72:	b928      	cbnz	r0, 800fb80 <__pow5mult+0x40>
 800fb74:	4b1d      	ldr	r3, [pc, #116]	; (800fbec <__pow5mult+0xac>)
 800fb76:	481e      	ldr	r0, [pc, #120]	; (800fbf0 <__pow5mult+0xb0>)
 800fb78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb7c:	f7fd fce0 	bl	800d540 <__assert_func>
 800fb80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb84:	6004      	str	r4, [r0, #0]
 800fb86:	60c4      	str	r4, [r0, #12]
 800fb88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb90:	b94c      	cbnz	r4, 800fba6 <__pow5mult+0x66>
 800fb92:	f240 2171 	movw	r1, #625	; 0x271
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7ff ff12 	bl	800f9c0 <__i2b>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fba2:	4604      	mov	r4, r0
 800fba4:	6003      	str	r3, [r0, #0]
 800fba6:	f04f 0900 	mov.w	r9, #0
 800fbaa:	07eb      	lsls	r3, r5, #31
 800fbac:	d50a      	bpl.n	800fbc4 <__pow5mult+0x84>
 800fbae:	4639      	mov	r1, r7
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f7ff ff1a 	bl	800f9ec <__multiply>
 800fbb8:	4639      	mov	r1, r7
 800fbba:	4680      	mov	r8, r0
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f7ff fe47 	bl	800f850 <_Bfree>
 800fbc2:	4647      	mov	r7, r8
 800fbc4:	106d      	asrs	r5, r5, #1
 800fbc6:	d00b      	beq.n	800fbe0 <__pow5mult+0xa0>
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	b938      	cbnz	r0, 800fbdc <__pow5mult+0x9c>
 800fbcc:	4622      	mov	r2, r4
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7ff ff0b 	bl	800f9ec <__multiply>
 800fbd6:	6020      	str	r0, [r4, #0]
 800fbd8:	f8c0 9000 	str.w	r9, [r0]
 800fbdc:	4604      	mov	r4, r0
 800fbde:	e7e4      	b.n	800fbaa <__pow5mult+0x6a>
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe6:	bf00      	nop
 800fbe8:	08011120 	.word	0x08011120
 800fbec:	08010eeb 	.word	0x08010eeb
 800fbf0:	08010fd0 	.word	0x08010fd0

0800fbf4 <__lshift>:
 800fbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	6849      	ldr	r1, [r1, #4]
 800fbfc:	6923      	ldr	r3, [r4, #16]
 800fbfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc02:	68a3      	ldr	r3, [r4, #8]
 800fc04:	4607      	mov	r7, r0
 800fc06:	4691      	mov	r9, r2
 800fc08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc0c:	f108 0601 	add.w	r6, r8, #1
 800fc10:	42b3      	cmp	r3, r6
 800fc12:	db0b      	blt.n	800fc2c <__lshift+0x38>
 800fc14:	4638      	mov	r0, r7
 800fc16:	f7ff fddb 	bl	800f7d0 <_Balloc>
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	b948      	cbnz	r0, 800fc32 <__lshift+0x3e>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	4b2a      	ldr	r3, [pc, #168]	; (800fccc <__lshift+0xd8>)
 800fc22:	482b      	ldr	r0, [pc, #172]	; (800fcd0 <__lshift+0xdc>)
 800fc24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc28:	f7fd fc8a 	bl	800d540 <__assert_func>
 800fc2c:	3101      	adds	r1, #1
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	e7ee      	b.n	800fc10 <__lshift+0x1c>
 800fc32:	2300      	movs	r3, #0
 800fc34:	f100 0114 	add.w	r1, r0, #20
 800fc38:	f100 0210 	add.w	r2, r0, #16
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	4553      	cmp	r3, sl
 800fc40:	db37      	blt.n	800fcb2 <__lshift+0xbe>
 800fc42:	6920      	ldr	r0, [r4, #16]
 800fc44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc48:	f104 0314 	add.w	r3, r4, #20
 800fc4c:	f019 091f 	ands.w	r9, r9, #31
 800fc50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc58:	d02f      	beq.n	800fcba <__lshift+0xc6>
 800fc5a:	f1c9 0e20 	rsb	lr, r9, #32
 800fc5e:	468a      	mov	sl, r1
 800fc60:	f04f 0c00 	mov.w	ip, #0
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	fa02 f209 	lsl.w	r2, r2, r9
 800fc6a:	ea42 020c 	orr.w	r2, r2, ip
 800fc6e:	f84a 2b04 	str.w	r2, [sl], #4
 800fc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc76:	4298      	cmp	r0, r3
 800fc78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc7c:	d8f2      	bhi.n	800fc64 <__lshift+0x70>
 800fc7e:	1b03      	subs	r3, r0, r4
 800fc80:	3b15      	subs	r3, #21
 800fc82:	f023 0303 	bic.w	r3, r3, #3
 800fc86:	3304      	adds	r3, #4
 800fc88:	f104 0215 	add.w	r2, r4, #21
 800fc8c:	4290      	cmp	r0, r2
 800fc8e:	bf38      	it	cc
 800fc90:	2304      	movcc	r3, #4
 800fc92:	f841 c003 	str.w	ip, [r1, r3]
 800fc96:	f1bc 0f00 	cmp.w	ip, #0
 800fc9a:	d001      	beq.n	800fca0 <__lshift+0xac>
 800fc9c:	f108 0602 	add.w	r6, r8, #2
 800fca0:	3e01      	subs	r6, #1
 800fca2:	4638      	mov	r0, r7
 800fca4:	612e      	str	r6, [r5, #16]
 800fca6:	4621      	mov	r1, r4
 800fca8:	f7ff fdd2 	bl	800f850 <_Bfree>
 800fcac:	4628      	mov	r0, r5
 800fcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	e7c1      	b.n	800fc3e <__lshift+0x4a>
 800fcba:	3904      	subs	r1, #4
 800fcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcc4:	4298      	cmp	r0, r3
 800fcc6:	d8f9      	bhi.n	800fcbc <__lshift+0xc8>
 800fcc8:	e7ea      	b.n	800fca0 <__lshift+0xac>
 800fcca:	bf00      	nop
 800fccc:	08010f5d 	.word	0x08010f5d
 800fcd0:	08010fd0 	.word	0x08010fd0

0800fcd4 <__mcmp>:
 800fcd4:	b530      	push	{r4, r5, lr}
 800fcd6:	6902      	ldr	r2, [r0, #16]
 800fcd8:	690c      	ldr	r4, [r1, #16]
 800fcda:	1b12      	subs	r2, r2, r4
 800fcdc:	d10e      	bne.n	800fcfc <__mcmp+0x28>
 800fcde:	f100 0314 	add.w	r3, r0, #20
 800fce2:	3114      	adds	r1, #20
 800fce4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fce8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcf4:	42a5      	cmp	r5, r4
 800fcf6:	d003      	beq.n	800fd00 <__mcmp+0x2c>
 800fcf8:	d305      	bcc.n	800fd06 <__mcmp+0x32>
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	bd30      	pop	{r4, r5, pc}
 800fd00:	4283      	cmp	r3, r0
 800fd02:	d3f3      	bcc.n	800fcec <__mcmp+0x18>
 800fd04:	e7fa      	b.n	800fcfc <__mcmp+0x28>
 800fd06:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0a:	e7f7      	b.n	800fcfc <__mcmp+0x28>

0800fd0c <__mdiff>:
 800fd0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd10:	460c      	mov	r4, r1
 800fd12:	4606      	mov	r6, r0
 800fd14:	4611      	mov	r1, r2
 800fd16:	4620      	mov	r0, r4
 800fd18:	4690      	mov	r8, r2
 800fd1a:	f7ff ffdb 	bl	800fcd4 <__mcmp>
 800fd1e:	1e05      	subs	r5, r0, #0
 800fd20:	d110      	bne.n	800fd44 <__mdiff+0x38>
 800fd22:	4629      	mov	r1, r5
 800fd24:	4630      	mov	r0, r6
 800fd26:	f7ff fd53 	bl	800f7d0 <_Balloc>
 800fd2a:	b930      	cbnz	r0, 800fd3a <__mdiff+0x2e>
 800fd2c:	4b3a      	ldr	r3, [pc, #232]	; (800fe18 <__mdiff+0x10c>)
 800fd2e:	4602      	mov	r2, r0
 800fd30:	f240 2132 	movw	r1, #562	; 0x232
 800fd34:	4839      	ldr	r0, [pc, #228]	; (800fe1c <__mdiff+0x110>)
 800fd36:	f7fd fc03 	bl	800d540 <__assert_func>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	bfa4      	itt	ge
 800fd46:	4643      	movge	r3, r8
 800fd48:	46a0      	movge	r8, r4
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd50:	bfa6      	itte	ge
 800fd52:	461c      	movge	r4, r3
 800fd54:	2500      	movge	r5, #0
 800fd56:	2501      	movlt	r5, #1
 800fd58:	f7ff fd3a 	bl	800f7d0 <_Balloc>
 800fd5c:	b920      	cbnz	r0, 800fd68 <__mdiff+0x5c>
 800fd5e:	4b2e      	ldr	r3, [pc, #184]	; (800fe18 <__mdiff+0x10c>)
 800fd60:	4602      	mov	r2, r0
 800fd62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd66:	e7e5      	b.n	800fd34 <__mdiff+0x28>
 800fd68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd6c:	6926      	ldr	r6, [r4, #16]
 800fd6e:	60c5      	str	r5, [r0, #12]
 800fd70:	f104 0914 	add.w	r9, r4, #20
 800fd74:	f108 0514 	add.w	r5, r8, #20
 800fd78:	f100 0e14 	add.w	lr, r0, #20
 800fd7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd84:	f108 0210 	add.w	r2, r8, #16
 800fd88:	46f2      	mov	sl, lr
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd94:	fa1f f883 	uxth.w	r8, r3
 800fd98:	fa11 f18b 	uxtah	r1, r1, fp
 800fd9c:	0c1b      	lsrs	r3, r3, #16
 800fd9e:	eba1 0808 	sub.w	r8, r1, r8
 800fda2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fda6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdaa:	fa1f f888 	uxth.w	r8, r8
 800fdae:	1419      	asrs	r1, r3, #16
 800fdb0:	454e      	cmp	r6, r9
 800fdb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdb6:	f84a 3b04 	str.w	r3, [sl], #4
 800fdba:	d8e7      	bhi.n	800fd8c <__mdiff+0x80>
 800fdbc:	1b33      	subs	r3, r6, r4
 800fdbe:	3b15      	subs	r3, #21
 800fdc0:	f023 0303 	bic.w	r3, r3, #3
 800fdc4:	3304      	adds	r3, #4
 800fdc6:	3415      	adds	r4, #21
 800fdc8:	42a6      	cmp	r6, r4
 800fdca:	bf38      	it	cc
 800fdcc:	2304      	movcc	r3, #4
 800fdce:	441d      	add	r5, r3
 800fdd0:	4473      	add	r3, lr
 800fdd2:	469e      	mov	lr, r3
 800fdd4:	462e      	mov	r6, r5
 800fdd6:	4566      	cmp	r6, ip
 800fdd8:	d30e      	bcc.n	800fdf8 <__mdiff+0xec>
 800fdda:	f10c 0203 	add.w	r2, ip, #3
 800fdde:	1b52      	subs	r2, r2, r5
 800fde0:	f022 0203 	bic.w	r2, r2, #3
 800fde4:	3d03      	subs	r5, #3
 800fde6:	45ac      	cmp	ip, r5
 800fde8:	bf38      	it	cc
 800fdea:	2200      	movcc	r2, #0
 800fdec:	441a      	add	r2, r3
 800fdee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdf2:	b17b      	cbz	r3, 800fe14 <__mdiff+0x108>
 800fdf4:	6107      	str	r7, [r0, #16]
 800fdf6:	e7a3      	b.n	800fd40 <__mdiff+0x34>
 800fdf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800fdfc:	fa11 f288 	uxtah	r2, r1, r8
 800fe00:	1414      	asrs	r4, r2, #16
 800fe02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe06:	b292      	uxth	r2, r2
 800fe08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe0c:	f84e 2b04 	str.w	r2, [lr], #4
 800fe10:	1421      	asrs	r1, r4, #16
 800fe12:	e7e0      	b.n	800fdd6 <__mdiff+0xca>
 800fe14:	3f01      	subs	r7, #1
 800fe16:	e7ea      	b.n	800fdee <__mdiff+0xe2>
 800fe18:	08010f5d 	.word	0x08010f5d
 800fe1c:	08010fd0 	.word	0x08010fd0

0800fe20 <__d2b>:
 800fe20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	4689      	mov	r9, r1
 800fe26:	2101      	movs	r1, #1
 800fe28:	ec57 6b10 	vmov	r6, r7, d0
 800fe2c:	4690      	mov	r8, r2
 800fe2e:	f7ff fccf 	bl	800f7d0 <_Balloc>
 800fe32:	4604      	mov	r4, r0
 800fe34:	b930      	cbnz	r0, 800fe44 <__d2b+0x24>
 800fe36:	4602      	mov	r2, r0
 800fe38:	4b25      	ldr	r3, [pc, #148]	; (800fed0 <__d2b+0xb0>)
 800fe3a:	4826      	ldr	r0, [pc, #152]	; (800fed4 <__d2b+0xb4>)
 800fe3c:	f240 310a 	movw	r1, #778	; 0x30a
 800fe40:	f7fd fb7e 	bl	800d540 <__assert_func>
 800fe44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe4c:	bb35      	cbnz	r5, 800fe9c <__d2b+0x7c>
 800fe4e:	2e00      	cmp	r6, #0
 800fe50:	9301      	str	r3, [sp, #4]
 800fe52:	d028      	beq.n	800fea6 <__d2b+0x86>
 800fe54:	4668      	mov	r0, sp
 800fe56:	9600      	str	r6, [sp, #0]
 800fe58:	f7ff fd82 	bl	800f960 <__lo0bits>
 800fe5c:	9900      	ldr	r1, [sp, #0]
 800fe5e:	b300      	cbz	r0, 800fea2 <__d2b+0x82>
 800fe60:	9a01      	ldr	r2, [sp, #4]
 800fe62:	f1c0 0320 	rsb	r3, r0, #32
 800fe66:	fa02 f303 	lsl.w	r3, r2, r3
 800fe6a:	430b      	orrs	r3, r1
 800fe6c:	40c2      	lsrs	r2, r0
 800fe6e:	6163      	str	r3, [r4, #20]
 800fe70:	9201      	str	r2, [sp, #4]
 800fe72:	9b01      	ldr	r3, [sp, #4]
 800fe74:	61a3      	str	r3, [r4, #24]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	bf14      	ite	ne
 800fe7a:	2202      	movne	r2, #2
 800fe7c:	2201      	moveq	r2, #1
 800fe7e:	6122      	str	r2, [r4, #16]
 800fe80:	b1d5      	cbz	r5, 800feb8 <__d2b+0x98>
 800fe82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe86:	4405      	add	r5, r0
 800fe88:	f8c9 5000 	str.w	r5, [r9]
 800fe8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe90:	f8c8 0000 	str.w	r0, [r8]
 800fe94:	4620      	mov	r0, r4
 800fe96:	b003      	add	sp, #12
 800fe98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fea0:	e7d5      	b.n	800fe4e <__d2b+0x2e>
 800fea2:	6161      	str	r1, [r4, #20]
 800fea4:	e7e5      	b.n	800fe72 <__d2b+0x52>
 800fea6:	a801      	add	r0, sp, #4
 800fea8:	f7ff fd5a 	bl	800f960 <__lo0bits>
 800feac:	9b01      	ldr	r3, [sp, #4]
 800feae:	6163      	str	r3, [r4, #20]
 800feb0:	2201      	movs	r2, #1
 800feb2:	6122      	str	r2, [r4, #16]
 800feb4:	3020      	adds	r0, #32
 800feb6:	e7e3      	b.n	800fe80 <__d2b+0x60>
 800feb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800febc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fec0:	f8c9 0000 	str.w	r0, [r9]
 800fec4:	6918      	ldr	r0, [r3, #16]
 800fec6:	f7ff fd2b 	bl	800f920 <__hi0bits>
 800feca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fece:	e7df      	b.n	800fe90 <__d2b+0x70>
 800fed0:	08010f5d 	.word	0x08010f5d
 800fed4:	08010fd0 	.word	0x08010fd0

0800fed8 <_calloc_r>:
 800fed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feda:	fba1 2402 	umull	r2, r4, r1, r2
 800fede:	b94c      	cbnz	r4, 800fef4 <_calloc_r+0x1c>
 800fee0:	4611      	mov	r1, r2
 800fee2:	9201      	str	r2, [sp, #4]
 800fee4:	f000 f87a 	bl	800ffdc <_malloc_r>
 800fee8:	9a01      	ldr	r2, [sp, #4]
 800feea:	4605      	mov	r5, r0
 800feec:	b930      	cbnz	r0, 800fefc <_calloc_r+0x24>
 800feee:	4628      	mov	r0, r5
 800fef0:	b003      	add	sp, #12
 800fef2:	bd30      	pop	{r4, r5, pc}
 800fef4:	220c      	movs	r2, #12
 800fef6:	6002      	str	r2, [r0, #0]
 800fef8:	2500      	movs	r5, #0
 800fefa:	e7f8      	b.n	800feee <_calloc_r+0x16>
 800fefc:	4621      	mov	r1, r4
 800fefe:	f7fd fb8b 	bl	800d618 <memset>
 800ff02:	e7f4      	b.n	800feee <_calloc_r+0x16>

0800ff04 <_free_r>:
 800ff04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff06:	2900      	cmp	r1, #0
 800ff08:	d044      	beq.n	800ff94 <_free_r+0x90>
 800ff0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff0e:	9001      	str	r0, [sp, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f1a1 0404 	sub.w	r4, r1, #4
 800ff16:	bfb8      	it	lt
 800ff18:	18e4      	addlt	r4, r4, r3
 800ff1a:	f000 fb5d 	bl	80105d8 <__malloc_lock>
 800ff1e:	4a1e      	ldr	r2, [pc, #120]	; (800ff98 <_free_r+0x94>)
 800ff20:	9801      	ldr	r0, [sp, #4]
 800ff22:	6813      	ldr	r3, [r2, #0]
 800ff24:	b933      	cbnz	r3, 800ff34 <_free_r+0x30>
 800ff26:	6063      	str	r3, [r4, #4]
 800ff28:	6014      	str	r4, [r2, #0]
 800ff2a:	b003      	add	sp, #12
 800ff2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff30:	f000 bb58 	b.w	80105e4 <__malloc_unlock>
 800ff34:	42a3      	cmp	r3, r4
 800ff36:	d908      	bls.n	800ff4a <_free_r+0x46>
 800ff38:	6825      	ldr	r5, [r4, #0]
 800ff3a:	1961      	adds	r1, r4, r5
 800ff3c:	428b      	cmp	r3, r1
 800ff3e:	bf01      	itttt	eq
 800ff40:	6819      	ldreq	r1, [r3, #0]
 800ff42:	685b      	ldreq	r3, [r3, #4]
 800ff44:	1949      	addeq	r1, r1, r5
 800ff46:	6021      	streq	r1, [r4, #0]
 800ff48:	e7ed      	b.n	800ff26 <_free_r+0x22>
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	b10b      	cbz	r3, 800ff54 <_free_r+0x50>
 800ff50:	42a3      	cmp	r3, r4
 800ff52:	d9fa      	bls.n	800ff4a <_free_r+0x46>
 800ff54:	6811      	ldr	r1, [r2, #0]
 800ff56:	1855      	adds	r5, r2, r1
 800ff58:	42a5      	cmp	r5, r4
 800ff5a:	d10b      	bne.n	800ff74 <_free_r+0x70>
 800ff5c:	6824      	ldr	r4, [r4, #0]
 800ff5e:	4421      	add	r1, r4
 800ff60:	1854      	adds	r4, r2, r1
 800ff62:	42a3      	cmp	r3, r4
 800ff64:	6011      	str	r1, [r2, #0]
 800ff66:	d1e0      	bne.n	800ff2a <_free_r+0x26>
 800ff68:	681c      	ldr	r4, [r3, #0]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	6053      	str	r3, [r2, #4]
 800ff6e:	4421      	add	r1, r4
 800ff70:	6011      	str	r1, [r2, #0]
 800ff72:	e7da      	b.n	800ff2a <_free_r+0x26>
 800ff74:	d902      	bls.n	800ff7c <_free_r+0x78>
 800ff76:	230c      	movs	r3, #12
 800ff78:	6003      	str	r3, [r0, #0]
 800ff7a:	e7d6      	b.n	800ff2a <_free_r+0x26>
 800ff7c:	6825      	ldr	r5, [r4, #0]
 800ff7e:	1961      	adds	r1, r4, r5
 800ff80:	428b      	cmp	r3, r1
 800ff82:	bf04      	itt	eq
 800ff84:	6819      	ldreq	r1, [r3, #0]
 800ff86:	685b      	ldreq	r3, [r3, #4]
 800ff88:	6063      	str	r3, [r4, #4]
 800ff8a:	bf04      	itt	eq
 800ff8c:	1949      	addeq	r1, r1, r5
 800ff8e:	6021      	streq	r1, [r4, #0]
 800ff90:	6054      	str	r4, [r2, #4]
 800ff92:	e7ca      	b.n	800ff2a <_free_r+0x26>
 800ff94:	b003      	add	sp, #12
 800ff96:	bd30      	pop	{r4, r5, pc}
 800ff98:	200007f0 	.word	0x200007f0

0800ff9c <sbrk_aligned>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4e0e      	ldr	r6, [pc, #56]	; (800ffd8 <sbrk_aligned+0x3c>)
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	6831      	ldr	r1, [r6, #0]
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	b911      	cbnz	r1, 800ffae <sbrk_aligned+0x12>
 800ffa8:	f000 fa16 	bl	80103d8 <_sbrk_r>
 800ffac:	6030      	str	r0, [r6, #0]
 800ffae:	4621      	mov	r1, r4
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f000 fa11 	bl	80103d8 <_sbrk_r>
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	d00a      	beq.n	800ffd0 <sbrk_aligned+0x34>
 800ffba:	1cc4      	adds	r4, r0, #3
 800ffbc:	f024 0403 	bic.w	r4, r4, #3
 800ffc0:	42a0      	cmp	r0, r4
 800ffc2:	d007      	beq.n	800ffd4 <sbrk_aligned+0x38>
 800ffc4:	1a21      	subs	r1, r4, r0
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f000 fa06 	bl	80103d8 <_sbrk_r>
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d101      	bne.n	800ffd4 <sbrk_aligned+0x38>
 800ffd0:	f04f 34ff 	mov.w	r4, #4294967295
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	bd70      	pop	{r4, r5, r6, pc}
 800ffd8:	200007f4 	.word	0x200007f4

0800ffdc <_malloc_r>:
 800ffdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe0:	1ccd      	adds	r5, r1, #3
 800ffe2:	f025 0503 	bic.w	r5, r5, #3
 800ffe6:	3508      	adds	r5, #8
 800ffe8:	2d0c      	cmp	r5, #12
 800ffea:	bf38      	it	cc
 800ffec:	250c      	movcc	r5, #12
 800ffee:	2d00      	cmp	r5, #0
 800fff0:	4607      	mov	r7, r0
 800fff2:	db01      	blt.n	800fff8 <_malloc_r+0x1c>
 800fff4:	42a9      	cmp	r1, r5
 800fff6:	d905      	bls.n	8010004 <_malloc_r+0x28>
 800fff8:	230c      	movs	r3, #12
 800fffa:	603b      	str	r3, [r7, #0]
 800fffc:	2600      	movs	r6, #0
 800fffe:	4630      	mov	r0, r6
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	4e2e      	ldr	r6, [pc, #184]	; (80100c0 <_malloc_r+0xe4>)
 8010006:	f000 fae7 	bl	80105d8 <__malloc_lock>
 801000a:	6833      	ldr	r3, [r6, #0]
 801000c:	461c      	mov	r4, r3
 801000e:	bb34      	cbnz	r4, 801005e <_malloc_r+0x82>
 8010010:	4629      	mov	r1, r5
 8010012:	4638      	mov	r0, r7
 8010014:	f7ff ffc2 	bl	800ff9c <sbrk_aligned>
 8010018:	1c43      	adds	r3, r0, #1
 801001a:	4604      	mov	r4, r0
 801001c:	d14d      	bne.n	80100ba <_malloc_r+0xde>
 801001e:	6834      	ldr	r4, [r6, #0]
 8010020:	4626      	mov	r6, r4
 8010022:	2e00      	cmp	r6, #0
 8010024:	d140      	bne.n	80100a8 <_malloc_r+0xcc>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	4631      	mov	r1, r6
 801002a:	4638      	mov	r0, r7
 801002c:	eb04 0803 	add.w	r8, r4, r3
 8010030:	f000 f9d2 	bl	80103d8 <_sbrk_r>
 8010034:	4580      	cmp	r8, r0
 8010036:	d13a      	bne.n	80100ae <_malloc_r+0xd2>
 8010038:	6821      	ldr	r1, [r4, #0]
 801003a:	3503      	adds	r5, #3
 801003c:	1a6d      	subs	r5, r5, r1
 801003e:	f025 0503 	bic.w	r5, r5, #3
 8010042:	3508      	adds	r5, #8
 8010044:	2d0c      	cmp	r5, #12
 8010046:	bf38      	it	cc
 8010048:	250c      	movcc	r5, #12
 801004a:	4629      	mov	r1, r5
 801004c:	4638      	mov	r0, r7
 801004e:	f7ff ffa5 	bl	800ff9c <sbrk_aligned>
 8010052:	3001      	adds	r0, #1
 8010054:	d02b      	beq.n	80100ae <_malloc_r+0xd2>
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	442b      	add	r3, r5
 801005a:	6023      	str	r3, [r4, #0]
 801005c:	e00e      	b.n	801007c <_malloc_r+0xa0>
 801005e:	6822      	ldr	r2, [r4, #0]
 8010060:	1b52      	subs	r2, r2, r5
 8010062:	d41e      	bmi.n	80100a2 <_malloc_r+0xc6>
 8010064:	2a0b      	cmp	r2, #11
 8010066:	d916      	bls.n	8010096 <_malloc_r+0xba>
 8010068:	1961      	adds	r1, r4, r5
 801006a:	42a3      	cmp	r3, r4
 801006c:	6025      	str	r5, [r4, #0]
 801006e:	bf18      	it	ne
 8010070:	6059      	strne	r1, [r3, #4]
 8010072:	6863      	ldr	r3, [r4, #4]
 8010074:	bf08      	it	eq
 8010076:	6031      	streq	r1, [r6, #0]
 8010078:	5162      	str	r2, [r4, r5]
 801007a:	604b      	str	r3, [r1, #4]
 801007c:	4638      	mov	r0, r7
 801007e:	f104 060b 	add.w	r6, r4, #11
 8010082:	f000 faaf 	bl	80105e4 <__malloc_unlock>
 8010086:	f026 0607 	bic.w	r6, r6, #7
 801008a:	1d23      	adds	r3, r4, #4
 801008c:	1af2      	subs	r2, r6, r3
 801008e:	d0b6      	beq.n	800fffe <_malloc_r+0x22>
 8010090:	1b9b      	subs	r3, r3, r6
 8010092:	50a3      	str	r3, [r4, r2]
 8010094:	e7b3      	b.n	800fffe <_malloc_r+0x22>
 8010096:	6862      	ldr	r2, [r4, #4]
 8010098:	42a3      	cmp	r3, r4
 801009a:	bf0c      	ite	eq
 801009c:	6032      	streq	r2, [r6, #0]
 801009e:	605a      	strne	r2, [r3, #4]
 80100a0:	e7ec      	b.n	801007c <_malloc_r+0xa0>
 80100a2:	4623      	mov	r3, r4
 80100a4:	6864      	ldr	r4, [r4, #4]
 80100a6:	e7b2      	b.n	801000e <_malloc_r+0x32>
 80100a8:	4634      	mov	r4, r6
 80100aa:	6876      	ldr	r6, [r6, #4]
 80100ac:	e7b9      	b.n	8010022 <_malloc_r+0x46>
 80100ae:	230c      	movs	r3, #12
 80100b0:	603b      	str	r3, [r7, #0]
 80100b2:	4638      	mov	r0, r7
 80100b4:	f000 fa96 	bl	80105e4 <__malloc_unlock>
 80100b8:	e7a1      	b.n	800fffe <_malloc_r+0x22>
 80100ba:	6025      	str	r5, [r4, #0]
 80100bc:	e7de      	b.n	801007c <_malloc_r+0xa0>
 80100be:	bf00      	nop
 80100c0:	200007f0 	.word	0x200007f0

080100c4 <_realloc_r>:
 80100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c8:	4680      	mov	r8, r0
 80100ca:	4614      	mov	r4, r2
 80100cc:	460e      	mov	r6, r1
 80100ce:	b921      	cbnz	r1, 80100da <_realloc_r+0x16>
 80100d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	4611      	mov	r1, r2
 80100d6:	f7ff bf81 	b.w	800ffdc <_malloc_r>
 80100da:	b92a      	cbnz	r2, 80100e8 <_realloc_r+0x24>
 80100dc:	f7ff ff12 	bl	800ff04 <_free_r>
 80100e0:	4625      	mov	r5, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e8:	f000 fa82 	bl	80105f0 <_malloc_usable_size_r>
 80100ec:	4284      	cmp	r4, r0
 80100ee:	4607      	mov	r7, r0
 80100f0:	d802      	bhi.n	80100f8 <_realloc_r+0x34>
 80100f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100f6:	d812      	bhi.n	801011e <_realloc_r+0x5a>
 80100f8:	4621      	mov	r1, r4
 80100fa:	4640      	mov	r0, r8
 80100fc:	f7ff ff6e 	bl	800ffdc <_malloc_r>
 8010100:	4605      	mov	r5, r0
 8010102:	2800      	cmp	r0, #0
 8010104:	d0ed      	beq.n	80100e2 <_realloc_r+0x1e>
 8010106:	42bc      	cmp	r4, r7
 8010108:	4622      	mov	r2, r4
 801010a:	4631      	mov	r1, r6
 801010c:	bf28      	it	cs
 801010e:	463a      	movcs	r2, r7
 8010110:	f7fd fa74 	bl	800d5fc <memcpy>
 8010114:	4631      	mov	r1, r6
 8010116:	4640      	mov	r0, r8
 8010118:	f7ff fef4 	bl	800ff04 <_free_r>
 801011c:	e7e1      	b.n	80100e2 <_realloc_r+0x1e>
 801011e:	4635      	mov	r5, r6
 8010120:	e7df      	b.n	80100e2 <_realloc_r+0x1e>

08010122 <__ssputs_r>:
 8010122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010126:	688e      	ldr	r6, [r1, #8]
 8010128:	429e      	cmp	r6, r3
 801012a:	4682      	mov	sl, r0
 801012c:	460c      	mov	r4, r1
 801012e:	4690      	mov	r8, r2
 8010130:	461f      	mov	r7, r3
 8010132:	d838      	bhi.n	80101a6 <__ssputs_r+0x84>
 8010134:	898a      	ldrh	r2, [r1, #12]
 8010136:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801013a:	d032      	beq.n	80101a2 <__ssputs_r+0x80>
 801013c:	6825      	ldr	r5, [r4, #0]
 801013e:	6909      	ldr	r1, [r1, #16]
 8010140:	eba5 0901 	sub.w	r9, r5, r1
 8010144:	6965      	ldr	r5, [r4, #20]
 8010146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801014a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801014e:	3301      	adds	r3, #1
 8010150:	444b      	add	r3, r9
 8010152:	106d      	asrs	r5, r5, #1
 8010154:	429d      	cmp	r5, r3
 8010156:	bf38      	it	cc
 8010158:	461d      	movcc	r5, r3
 801015a:	0553      	lsls	r3, r2, #21
 801015c:	d531      	bpl.n	80101c2 <__ssputs_r+0xa0>
 801015e:	4629      	mov	r1, r5
 8010160:	f7ff ff3c 	bl	800ffdc <_malloc_r>
 8010164:	4606      	mov	r6, r0
 8010166:	b950      	cbnz	r0, 801017e <__ssputs_r+0x5c>
 8010168:	230c      	movs	r3, #12
 801016a:	f8ca 3000 	str.w	r3, [sl]
 801016e:	89a3      	ldrh	r3, [r4, #12]
 8010170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010174:	81a3      	strh	r3, [r4, #12]
 8010176:	f04f 30ff 	mov.w	r0, #4294967295
 801017a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801017e:	6921      	ldr	r1, [r4, #16]
 8010180:	464a      	mov	r2, r9
 8010182:	f7fd fa3b 	bl	800d5fc <memcpy>
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801018c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	6126      	str	r6, [r4, #16]
 8010194:	6165      	str	r5, [r4, #20]
 8010196:	444e      	add	r6, r9
 8010198:	eba5 0509 	sub.w	r5, r5, r9
 801019c:	6026      	str	r6, [r4, #0]
 801019e:	60a5      	str	r5, [r4, #8]
 80101a0:	463e      	mov	r6, r7
 80101a2:	42be      	cmp	r6, r7
 80101a4:	d900      	bls.n	80101a8 <__ssputs_r+0x86>
 80101a6:	463e      	mov	r6, r7
 80101a8:	6820      	ldr	r0, [r4, #0]
 80101aa:	4632      	mov	r2, r6
 80101ac:	4641      	mov	r1, r8
 80101ae:	f7ff faf5 	bl	800f79c <memmove>
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	1b9b      	subs	r3, r3, r6
 80101b6:	60a3      	str	r3, [r4, #8]
 80101b8:	6823      	ldr	r3, [r4, #0]
 80101ba:	4433      	add	r3, r6
 80101bc:	6023      	str	r3, [r4, #0]
 80101be:	2000      	movs	r0, #0
 80101c0:	e7db      	b.n	801017a <__ssputs_r+0x58>
 80101c2:	462a      	mov	r2, r5
 80101c4:	f7ff ff7e 	bl	80100c4 <_realloc_r>
 80101c8:	4606      	mov	r6, r0
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d1e1      	bne.n	8010192 <__ssputs_r+0x70>
 80101ce:	6921      	ldr	r1, [r4, #16]
 80101d0:	4650      	mov	r0, sl
 80101d2:	f7ff fe97 	bl	800ff04 <_free_r>
 80101d6:	e7c7      	b.n	8010168 <__ssputs_r+0x46>

080101d8 <_svfiprintf_r>:
 80101d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101dc:	4698      	mov	r8, r3
 80101de:	898b      	ldrh	r3, [r1, #12]
 80101e0:	061b      	lsls	r3, r3, #24
 80101e2:	b09d      	sub	sp, #116	; 0x74
 80101e4:	4607      	mov	r7, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	4614      	mov	r4, r2
 80101ea:	d50e      	bpl.n	801020a <_svfiprintf_r+0x32>
 80101ec:	690b      	ldr	r3, [r1, #16]
 80101ee:	b963      	cbnz	r3, 801020a <_svfiprintf_r+0x32>
 80101f0:	2140      	movs	r1, #64	; 0x40
 80101f2:	f7ff fef3 	bl	800ffdc <_malloc_r>
 80101f6:	6028      	str	r0, [r5, #0]
 80101f8:	6128      	str	r0, [r5, #16]
 80101fa:	b920      	cbnz	r0, 8010206 <_svfiprintf_r+0x2e>
 80101fc:	230c      	movs	r3, #12
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	f04f 30ff 	mov.w	r0, #4294967295
 8010204:	e0d1      	b.n	80103aa <_svfiprintf_r+0x1d2>
 8010206:	2340      	movs	r3, #64	; 0x40
 8010208:	616b      	str	r3, [r5, #20]
 801020a:	2300      	movs	r3, #0
 801020c:	9309      	str	r3, [sp, #36]	; 0x24
 801020e:	2320      	movs	r3, #32
 8010210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010214:	f8cd 800c 	str.w	r8, [sp, #12]
 8010218:	2330      	movs	r3, #48	; 0x30
 801021a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103c4 <_svfiprintf_r+0x1ec>
 801021e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010222:	f04f 0901 	mov.w	r9, #1
 8010226:	4623      	mov	r3, r4
 8010228:	469a      	mov	sl, r3
 801022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022e:	b10a      	cbz	r2, 8010234 <_svfiprintf_r+0x5c>
 8010230:	2a25      	cmp	r2, #37	; 0x25
 8010232:	d1f9      	bne.n	8010228 <_svfiprintf_r+0x50>
 8010234:	ebba 0b04 	subs.w	fp, sl, r4
 8010238:	d00b      	beq.n	8010252 <_svfiprintf_r+0x7a>
 801023a:	465b      	mov	r3, fp
 801023c:	4622      	mov	r2, r4
 801023e:	4629      	mov	r1, r5
 8010240:	4638      	mov	r0, r7
 8010242:	f7ff ff6e 	bl	8010122 <__ssputs_r>
 8010246:	3001      	adds	r0, #1
 8010248:	f000 80aa 	beq.w	80103a0 <_svfiprintf_r+0x1c8>
 801024c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801024e:	445a      	add	r2, fp
 8010250:	9209      	str	r2, [sp, #36]	; 0x24
 8010252:	f89a 3000 	ldrb.w	r3, [sl]
 8010256:	2b00      	cmp	r3, #0
 8010258:	f000 80a2 	beq.w	80103a0 <_svfiprintf_r+0x1c8>
 801025c:	2300      	movs	r3, #0
 801025e:	f04f 32ff 	mov.w	r2, #4294967295
 8010262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010266:	f10a 0a01 	add.w	sl, sl, #1
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	9307      	str	r3, [sp, #28]
 801026e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010272:	931a      	str	r3, [sp, #104]	; 0x68
 8010274:	4654      	mov	r4, sl
 8010276:	2205      	movs	r2, #5
 8010278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801027c:	4851      	ldr	r0, [pc, #324]	; (80103c4 <_svfiprintf_r+0x1ec>)
 801027e:	f7ef ffaf 	bl	80001e0 <memchr>
 8010282:	9a04      	ldr	r2, [sp, #16]
 8010284:	b9d8      	cbnz	r0, 80102be <_svfiprintf_r+0xe6>
 8010286:	06d0      	lsls	r0, r2, #27
 8010288:	bf44      	itt	mi
 801028a:	2320      	movmi	r3, #32
 801028c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010290:	0711      	lsls	r1, r2, #28
 8010292:	bf44      	itt	mi
 8010294:	232b      	movmi	r3, #43	; 0x2b
 8010296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801029a:	f89a 3000 	ldrb.w	r3, [sl]
 801029e:	2b2a      	cmp	r3, #42	; 0x2a
 80102a0:	d015      	beq.n	80102ce <_svfiprintf_r+0xf6>
 80102a2:	9a07      	ldr	r2, [sp, #28]
 80102a4:	4654      	mov	r4, sl
 80102a6:	2000      	movs	r0, #0
 80102a8:	f04f 0c0a 	mov.w	ip, #10
 80102ac:	4621      	mov	r1, r4
 80102ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102b2:	3b30      	subs	r3, #48	; 0x30
 80102b4:	2b09      	cmp	r3, #9
 80102b6:	d94e      	bls.n	8010356 <_svfiprintf_r+0x17e>
 80102b8:	b1b0      	cbz	r0, 80102e8 <_svfiprintf_r+0x110>
 80102ba:	9207      	str	r2, [sp, #28]
 80102bc:	e014      	b.n	80102e8 <_svfiprintf_r+0x110>
 80102be:	eba0 0308 	sub.w	r3, r0, r8
 80102c2:	fa09 f303 	lsl.w	r3, r9, r3
 80102c6:	4313      	orrs	r3, r2
 80102c8:	9304      	str	r3, [sp, #16]
 80102ca:	46a2      	mov	sl, r4
 80102cc:	e7d2      	b.n	8010274 <_svfiprintf_r+0x9c>
 80102ce:	9b03      	ldr	r3, [sp, #12]
 80102d0:	1d19      	adds	r1, r3, #4
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	9103      	str	r1, [sp, #12]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	bfbb      	ittet	lt
 80102da:	425b      	neglt	r3, r3
 80102dc:	f042 0202 	orrlt.w	r2, r2, #2
 80102e0:	9307      	strge	r3, [sp, #28]
 80102e2:	9307      	strlt	r3, [sp, #28]
 80102e4:	bfb8      	it	lt
 80102e6:	9204      	strlt	r2, [sp, #16]
 80102e8:	7823      	ldrb	r3, [r4, #0]
 80102ea:	2b2e      	cmp	r3, #46	; 0x2e
 80102ec:	d10c      	bne.n	8010308 <_svfiprintf_r+0x130>
 80102ee:	7863      	ldrb	r3, [r4, #1]
 80102f0:	2b2a      	cmp	r3, #42	; 0x2a
 80102f2:	d135      	bne.n	8010360 <_svfiprintf_r+0x188>
 80102f4:	9b03      	ldr	r3, [sp, #12]
 80102f6:	1d1a      	adds	r2, r3, #4
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	9203      	str	r2, [sp, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfb8      	it	lt
 8010300:	f04f 33ff 	movlt.w	r3, #4294967295
 8010304:	3402      	adds	r4, #2
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103d4 <_svfiprintf_r+0x1fc>
 801030c:	7821      	ldrb	r1, [r4, #0]
 801030e:	2203      	movs	r2, #3
 8010310:	4650      	mov	r0, sl
 8010312:	f7ef ff65 	bl	80001e0 <memchr>
 8010316:	b140      	cbz	r0, 801032a <_svfiprintf_r+0x152>
 8010318:	2340      	movs	r3, #64	; 0x40
 801031a:	eba0 000a 	sub.w	r0, r0, sl
 801031e:	fa03 f000 	lsl.w	r0, r3, r0
 8010322:	9b04      	ldr	r3, [sp, #16]
 8010324:	4303      	orrs	r3, r0
 8010326:	3401      	adds	r4, #1
 8010328:	9304      	str	r3, [sp, #16]
 801032a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801032e:	4826      	ldr	r0, [pc, #152]	; (80103c8 <_svfiprintf_r+0x1f0>)
 8010330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010334:	2206      	movs	r2, #6
 8010336:	f7ef ff53 	bl	80001e0 <memchr>
 801033a:	2800      	cmp	r0, #0
 801033c:	d038      	beq.n	80103b0 <_svfiprintf_r+0x1d8>
 801033e:	4b23      	ldr	r3, [pc, #140]	; (80103cc <_svfiprintf_r+0x1f4>)
 8010340:	bb1b      	cbnz	r3, 801038a <_svfiprintf_r+0x1b2>
 8010342:	9b03      	ldr	r3, [sp, #12]
 8010344:	3307      	adds	r3, #7
 8010346:	f023 0307 	bic.w	r3, r3, #7
 801034a:	3308      	adds	r3, #8
 801034c:	9303      	str	r3, [sp, #12]
 801034e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010350:	4433      	add	r3, r6
 8010352:	9309      	str	r3, [sp, #36]	; 0x24
 8010354:	e767      	b.n	8010226 <_svfiprintf_r+0x4e>
 8010356:	fb0c 3202 	mla	r2, ip, r2, r3
 801035a:	460c      	mov	r4, r1
 801035c:	2001      	movs	r0, #1
 801035e:	e7a5      	b.n	80102ac <_svfiprintf_r+0xd4>
 8010360:	2300      	movs	r3, #0
 8010362:	3401      	adds	r4, #1
 8010364:	9305      	str	r3, [sp, #20]
 8010366:	4619      	mov	r1, r3
 8010368:	f04f 0c0a 	mov.w	ip, #10
 801036c:	4620      	mov	r0, r4
 801036e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010372:	3a30      	subs	r2, #48	; 0x30
 8010374:	2a09      	cmp	r2, #9
 8010376:	d903      	bls.n	8010380 <_svfiprintf_r+0x1a8>
 8010378:	2b00      	cmp	r3, #0
 801037a:	d0c5      	beq.n	8010308 <_svfiprintf_r+0x130>
 801037c:	9105      	str	r1, [sp, #20]
 801037e:	e7c3      	b.n	8010308 <_svfiprintf_r+0x130>
 8010380:	fb0c 2101 	mla	r1, ip, r1, r2
 8010384:	4604      	mov	r4, r0
 8010386:	2301      	movs	r3, #1
 8010388:	e7f0      	b.n	801036c <_svfiprintf_r+0x194>
 801038a:	ab03      	add	r3, sp, #12
 801038c:	9300      	str	r3, [sp, #0]
 801038e:	462a      	mov	r2, r5
 8010390:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <_svfiprintf_r+0x1f8>)
 8010392:	a904      	add	r1, sp, #16
 8010394:	4638      	mov	r0, r7
 8010396:	f7fd fb41 	bl	800da1c <_printf_float>
 801039a:	1c42      	adds	r2, r0, #1
 801039c:	4606      	mov	r6, r0
 801039e:	d1d6      	bne.n	801034e <_svfiprintf_r+0x176>
 80103a0:	89ab      	ldrh	r3, [r5, #12]
 80103a2:	065b      	lsls	r3, r3, #25
 80103a4:	f53f af2c 	bmi.w	8010200 <_svfiprintf_r+0x28>
 80103a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103aa:	b01d      	add	sp, #116	; 0x74
 80103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b0:	ab03      	add	r3, sp, #12
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	462a      	mov	r2, r5
 80103b6:	4b06      	ldr	r3, [pc, #24]	; (80103d0 <_svfiprintf_r+0x1f8>)
 80103b8:	a904      	add	r1, sp, #16
 80103ba:	4638      	mov	r0, r7
 80103bc:	f7fd fdd2 	bl	800df64 <_printf_i>
 80103c0:	e7eb      	b.n	801039a <_svfiprintf_r+0x1c2>
 80103c2:	bf00      	nop
 80103c4:	08010d98 	.word	0x08010d98
 80103c8:	08010da2 	.word	0x08010da2
 80103cc:	0800da1d 	.word	0x0800da1d
 80103d0:	08010123 	.word	0x08010123
 80103d4:	08010d9e 	.word	0x08010d9e

080103d8 <_sbrk_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d06      	ldr	r5, [pc, #24]	; (80103f4 <_sbrk_r+0x1c>)
 80103dc:	2300      	movs	r3, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	602b      	str	r3, [r5, #0]
 80103e4:	f7f3 ff7c 	bl	80042e0 <_sbrk>
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	d102      	bne.n	80103f2 <_sbrk_r+0x1a>
 80103ec:	682b      	ldr	r3, [r5, #0]
 80103ee:	b103      	cbz	r3, 80103f2 <_sbrk_r+0x1a>
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	200007f8 	.word	0x200007f8

080103f8 <_raise_r>:
 80103f8:	291f      	cmp	r1, #31
 80103fa:	b538      	push	{r3, r4, r5, lr}
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	d904      	bls.n	801040c <_raise_r+0x14>
 8010402:	2316      	movs	r3, #22
 8010404:	6003      	str	r3, [r0, #0]
 8010406:	f04f 30ff 	mov.w	r0, #4294967295
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801040e:	b112      	cbz	r2, 8010416 <_raise_r+0x1e>
 8010410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010414:	b94b      	cbnz	r3, 801042a <_raise_r+0x32>
 8010416:	4620      	mov	r0, r4
 8010418:	f000 f830 	bl	801047c <_getpid_r>
 801041c:	462a      	mov	r2, r5
 801041e:	4601      	mov	r1, r0
 8010420:	4620      	mov	r0, r4
 8010422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010426:	f000 b817 	b.w	8010458 <_kill_r>
 801042a:	2b01      	cmp	r3, #1
 801042c:	d00a      	beq.n	8010444 <_raise_r+0x4c>
 801042e:	1c59      	adds	r1, r3, #1
 8010430:	d103      	bne.n	801043a <_raise_r+0x42>
 8010432:	2316      	movs	r3, #22
 8010434:	6003      	str	r3, [r0, #0]
 8010436:	2001      	movs	r0, #1
 8010438:	e7e7      	b.n	801040a <_raise_r+0x12>
 801043a:	2400      	movs	r4, #0
 801043c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010440:	4628      	mov	r0, r5
 8010442:	4798      	blx	r3
 8010444:	2000      	movs	r0, #0
 8010446:	e7e0      	b.n	801040a <_raise_r+0x12>

08010448 <raise>:
 8010448:	4b02      	ldr	r3, [pc, #8]	; (8010454 <raise+0xc>)
 801044a:	4601      	mov	r1, r0
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	f7ff bfd3 	b.w	80103f8 <_raise_r>
 8010452:	bf00      	nop
 8010454:	20000230 	.word	0x20000230

08010458 <_kill_r>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	4d07      	ldr	r5, [pc, #28]	; (8010478 <_kill_r+0x20>)
 801045c:	2300      	movs	r3, #0
 801045e:	4604      	mov	r4, r0
 8010460:	4608      	mov	r0, r1
 8010462:	4611      	mov	r1, r2
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	f7f3 feb3 	bl	80041d0 <_kill>
 801046a:	1c43      	adds	r3, r0, #1
 801046c:	d102      	bne.n	8010474 <_kill_r+0x1c>
 801046e:	682b      	ldr	r3, [r5, #0]
 8010470:	b103      	cbz	r3, 8010474 <_kill_r+0x1c>
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	bd38      	pop	{r3, r4, r5, pc}
 8010476:	bf00      	nop
 8010478:	200007f8 	.word	0x200007f8

0801047c <_getpid_r>:
 801047c:	f7f3 bea0 	b.w	80041c0 <_getpid>

08010480 <__sread>:
 8010480:	b510      	push	{r4, lr}
 8010482:	460c      	mov	r4, r1
 8010484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010488:	f000 f8ba 	bl	8010600 <_read_r>
 801048c:	2800      	cmp	r0, #0
 801048e:	bfab      	itete	ge
 8010490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010492:	89a3      	ldrhlt	r3, [r4, #12]
 8010494:	181b      	addge	r3, r3, r0
 8010496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801049a:	bfac      	ite	ge
 801049c:	6563      	strge	r3, [r4, #84]	; 0x54
 801049e:	81a3      	strhlt	r3, [r4, #12]
 80104a0:	bd10      	pop	{r4, pc}

080104a2 <__swrite>:
 80104a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a6:	461f      	mov	r7, r3
 80104a8:	898b      	ldrh	r3, [r1, #12]
 80104aa:	05db      	lsls	r3, r3, #23
 80104ac:	4605      	mov	r5, r0
 80104ae:	460c      	mov	r4, r1
 80104b0:	4616      	mov	r6, r2
 80104b2:	d505      	bpl.n	80104c0 <__swrite+0x1e>
 80104b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b8:	2302      	movs	r3, #2
 80104ba:	2200      	movs	r2, #0
 80104bc:	f000 f868 	bl	8010590 <_lseek_r>
 80104c0:	89a3      	ldrh	r3, [r4, #12]
 80104c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104ca:	81a3      	strh	r3, [r4, #12]
 80104cc:	4632      	mov	r2, r6
 80104ce:	463b      	mov	r3, r7
 80104d0:	4628      	mov	r0, r5
 80104d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104d6:	f000 b817 	b.w	8010508 <_write_r>

080104da <__sseek>:
 80104da:	b510      	push	{r4, lr}
 80104dc:	460c      	mov	r4, r1
 80104de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e2:	f000 f855 	bl	8010590 <_lseek_r>
 80104e6:	1c43      	adds	r3, r0, #1
 80104e8:	89a3      	ldrh	r3, [r4, #12]
 80104ea:	bf15      	itete	ne
 80104ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80104ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104f6:	81a3      	strheq	r3, [r4, #12]
 80104f8:	bf18      	it	ne
 80104fa:	81a3      	strhne	r3, [r4, #12]
 80104fc:	bd10      	pop	{r4, pc}

080104fe <__sclose>:
 80104fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010502:	f000 b813 	b.w	801052c <_close_r>
	...

08010508 <_write_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4d07      	ldr	r5, [pc, #28]	; (8010528 <_write_r+0x20>)
 801050c:	4604      	mov	r4, r0
 801050e:	4608      	mov	r0, r1
 8010510:	4611      	mov	r1, r2
 8010512:	2200      	movs	r2, #0
 8010514:	602a      	str	r2, [r5, #0]
 8010516:	461a      	mov	r2, r3
 8010518:	f7f3 fe91 	bl	800423e <_write>
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	d102      	bne.n	8010526 <_write_r+0x1e>
 8010520:	682b      	ldr	r3, [r5, #0]
 8010522:	b103      	cbz	r3, 8010526 <_write_r+0x1e>
 8010524:	6023      	str	r3, [r4, #0]
 8010526:	bd38      	pop	{r3, r4, r5, pc}
 8010528:	200007f8 	.word	0x200007f8

0801052c <_close_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	4d06      	ldr	r5, [pc, #24]	; (8010548 <_close_r+0x1c>)
 8010530:	2300      	movs	r3, #0
 8010532:	4604      	mov	r4, r0
 8010534:	4608      	mov	r0, r1
 8010536:	602b      	str	r3, [r5, #0]
 8010538:	f7f3 fe9d 	bl	8004276 <_close>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_close_r+0x1a>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_close_r+0x1a>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	200007f8 	.word	0x200007f8

0801054c <_fstat_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	; (801056c <_fstat_r+0x20>)
 8010550:	2300      	movs	r3, #0
 8010552:	4604      	mov	r4, r0
 8010554:	4608      	mov	r0, r1
 8010556:	4611      	mov	r1, r2
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	f7f3 fe98 	bl	800428e <_fstat>
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	d102      	bne.n	8010568 <_fstat_r+0x1c>
 8010562:	682b      	ldr	r3, [r5, #0]
 8010564:	b103      	cbz	r3, 8010568 <_fstat_r+0x1c>
 8010566:	6023      	str	r3, [r4, #0]
 8010568:	bd38      	pop	{r3, r4, r5, pc}
 801056a:	bf00      	nop
 801056c:	200007f8 	.word	0x200007f8

08010570 <_isatty_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4d06      	ldr	r5, [pc, #24]	; (801058c <_isatty_r+0x1c>)
 8010574:	2300      	movs	r3, #0
 8010576:	4604      	mov	r4, r0
 8010578:	4608      	mov	r0, r1
 801057a:	602b      	str	r3, [r5, #0]
 801057c:	f7f3 fe97 	bl	80042ae <_isatty>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_isatty_r+0x1a>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_isatty_r+0x1a>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	200007f8 	.word	0x200007f8

08010590 <_lseek_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	; (80105b0 <_lseek_r+0x20>)
 8010594:	4604      	mov	r4, r0
 8010596:	4608      	mov	r0, r1
 8010598:	4611      	mov	r1, r2
 801059a:	2200      	movs	r2, #0
 801059c:	602a      	str	r2, [r5, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f7f3 fe90 	bl	80042c4 <_lseek>
 80105a4:	1c43      	adds	r3, r0, #1
 80105a6:	d102      	bne.n	80105ae <_lseek_r+0x1e>
 80105a8:	682b      	ldr	r3, [r5, #0]
 80105aa:	b103      	cbz	r3, 80105ae <_lseek_r+0x1e>
 80105ac:	6023      	str	r3, [r4, #0]
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	200007f8 	.word	0x200007f8

080105b4 <__ascii_mbtowc>:
 80105b4:	b082      	sub	sp, #8
 80105b6:	b901      	cbnz	r1, 80105ba <__ascii_mbtowc+0x6>
 80105b8:	a901      	add	r1, sp, #4
 80105ba:	b142      	cbz	r2, 80105ce <__ascii_mbtowc+0x1a>
 80105bc:	b14b      	cbz	r3, 80105d2 <__ascii_mbtowc+0x1e>
 80105be:	7813      	ldrb	r3, [r2, #0]
 80105c0:	600b      	str	r3, [r1, #0]
 80105c2:	7812      	ldrb	r2, [r2, #0]
 80105c4:	1e10      	subs	r0, r2, #0
 80105c6:	bf18      	it	ne
 80105c8:	2001      	movne	r0, #1
 80105ca:	b002      	add	sp, #8
 80105cc:	4770      	bx	lr
 80105ce:	4610      	mov	r0, r2
 80105d0:	e7fb      	b.n	80105ca <__ascii_mbtowc+0x16>
 80105d2:	f06f 0001 	mvn.w	r0, #1
 80105d6:	e7f8      	b.n	80105ca <__ascii_mbtowc+0x16>

080105d8 <__malloc_lock>:
 80105d8:	4801      	ldr	r0, [pc, #4]	; (80105e0 <__malloc_lock+0x8>)
 80105da:	f7ff b870 	b.w	800f6be <__retarget_lock_acquire_recursive>
 80105de:	bf00      	nop
 80105e0:	200007ec 	.word	0x200007ec

080105e4 <__malloc_unlock>:
 80105e4:	4801      	ldr	r0, [pc, #4]	; (80105ec <__malloc_unlock+0x8>)
 80105e6:	f7ff b86b 	b.w	800f6c0 <__retarget_lock_release_recursive>
 80105ea:	bf00      	nop
 80105ec:	200007ec 	.word	0x200007ec

080105f0 <_malloc_usable_size_r>:
 80105f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105f4:	1f18      	subs	r0, r3, #4
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	bfbc      	itt	lt
 80105fa:	580b      	ldrlt	r3, [r1, r0]
 80105fc:	18c0      	addlt	r0, r0, r3
 80105fe:	4770      	bx	lr

08010600 <_read_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4d07      	ldr	r5, [pc, #28]	; (8010620 <_read_r+0x20>)
 8010604:	4604      	mov	r4, r0
 8010606:	4608      	mov	r0, r1
 8010608:	4611      	mov	r1, r2
 801060a:	2200      	movs	r2, #0
 801060c:	602a      	str	r2, [r5, #0]
 801060e:	461a      	mov	r2, r3
 8010610:	f7f3 fdf8 	bl	8004204 <_read>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_read_r+0x1e>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	b103      	cbz	r3, 801061e <_read_r+0x1e>
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	200007f8 	.word	0x200007f8

08010624 <__ascii_wctomb>:
 8010624:	b149      	cbz	r1, 801063a <__ascii_wctomb+0x16>
 8010626:	2aff      	cmp	r2, #255	; 0xff
 8010628:	bf85      	ittet	hi
 801062a:	238a      	movhi	r3, #138	; 0x8a
 801062c:	6003      	strhi	r3, [r0, #0]
 801062e:	700a      	strbls	r2, [r1, #0]
 8010630:	f04f 30ff 	movhi.w	r0, #4294967295
 8010634:	bf98      	it	ls
 8010636:	2001      	movls	r0, #1
 8010638:	4770      	bx	lr
 801063a:	4608      	mov	r0, r1
 801063c:	4770      	bx	lr
	...

08010640 <_init>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	bf00      	nop
 8010644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010646:	bc08      	pop	{r3}
 8010648:	469e      	mov	lr, r3
 801064a:	4770      	bx	lr

0801064c <_fini>:
 801064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064e:	bf00      	nop
 8010650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010652:	bc08      	pop	{r3}
 8010654:	469e      	mov	lr, r3
 8010656:	4770      	bx	lr
